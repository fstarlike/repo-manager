{"version":3,"file":"floating-widget.min.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,KAAK;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD,gDAAgD;AAChD,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA,kCAAkC;AAClC;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,4BAA4B,mCAAmC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,2BAA2B,4BAA4B,IAAI;AAC3D;AACA;AACA,2BAA2B,EAAE,OAAO;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,aAAa;AACvE;AACA,iDAAiD,aAAa;AAC9D;AACA;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB,IAAI;AACrD;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;AACd;AACA,uBAAuB,sBAAsB,IAAI;AACjD;AACA;AACA,sBAAsB;AACtB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB,IAAI;AACrD;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;AACd;AACA,uBAAuB,sBAAsB,IAAI;AACjD;AACA;AACA,sBAAsB;AACtB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,sBAAsB,IAAI;AACrD;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,2BAA2B,sBAAsB;AACjD;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA,cAAc;AACd;AACA,uBAAuB,sBAAsB,IAAI;AACjD;AACA;AACA,sBAAsB;AACtB;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,8FAA8F,kBAAkB;AAChH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mnBAAmnB,wBAAwB,yBAAyB,WAAW;AAC/qB;AACA;AACA;AACA;AACA;AACA,0CAA0C,+BAA+B,mDAAmD,6CAA6C,sHAAsH;AAC/R,cAAc;AACd;AACA;AACA;AACA;AACA,0CAA0C,UAAU,mDAAmD,6CAA6C,sHAAsH;AAC1Q;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,+BAA+B,mDAAmD,6CAA6C,sHAAsH;AACnS,kBAAkB;AAClB;AACA;AACA;AACA;AACA,8CAA8C,UAAU,mDAAmD,6CAA6C,sHAAsH;AAC9Q,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA,0BAA0B;AAC1B,6EAA6E;AAC7E;AACA,0BAA0B;AAC1B;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,kFAAkF;AAClF;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA,oFAAoF;AACpF;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,IAAI;AACvC;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,oCAAoC,EAAE,6BAA6B;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA,oCAAoC,EAAE,4BAA4B;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,WAAW;AACtD;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,WAAW;AACtD;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8EAA8E;AAC9E;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA,8CAA8C;AAC9C,wCAAwC;AACxC,2DAA2D;AAC3D;AACA;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA,2BAA2B,QAAQ;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,QAAQ,MAAM,QAAQ,YAAY,MAAM;AACxG;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,OAAO,GAAG,OAAO;AACnE;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO,GAAG,OAAO;AACvE;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,OAAO,GAAG,OAAO;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,sDAAsD,KAAK,KAAK,KAAK;AACreAAe;AAC5C;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,QAAQ;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,2CAA2C,iBAAiB,IAAI,UAAU;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,UAAU,IAAI;AAC3C;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;AACd;AACA,6BAA6B,UAAU,IAAI;AAC3C;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;AACd;AACA,6BAA6B,UAAU,IAAI;AAC3C;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE,QAAQ,IAAI,cAAc,IAAI,OAAO;AAC7G,wDAAwD,QAAQ,GAAG,cAAc,GAAG,OAAO;AAC3F;AACA;AACA,kDAAkD,cAAc,GAAG,OAAO;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,QAAQ;AACxD;AACA;AACA;AACA,0BAA0B,EAAE,6BAA6B;AACzD;AACA;AACA,gDAAgD,OAAO;AACvD;AACA;AACA;AACA,0BAA0B,EAAE,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA,2BAA2B,EAAE,WAAW,IAAI,mBAAmB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,iBAAiB,IAAI,aAAa;AAC5D,cAAc;AACd,0BAA0B,YAAY,IAAI,aAAa;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB,GAAG,qBAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD,mDAAmD,aAAa,gBAAgB;AAChF,0BAA0B;AAC1B;AACA,yCAAyC,aAAa,gBAAgB;AACtE,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA,2CAA2C,wBAAwB,SAAS;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qCAAqC;AACvE,sDAAsD,gBAAgB,IAAI;AAC1E;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,0BAA0B;AAC1B,sDAAsD,gBAAgB,IAAI;AAC1E;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC;AAClC;AACA;AACA,0BAA0B;AAC1B,sDAAsD,gBAAgB,IAAI;AAC1E;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,qCAAqC;AACvE,sDAAsD,gBAAgB,IAAI;AAC1E;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,qBAAqB,GAAG,qBAAqB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,kBAAkB;AAClB;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,WAAW,GAAG,WAAW;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,MAAM;AACN;AACA;AACA,CAAC","sources":["webpack://repo-manager/./src/Assets/js/floating-widget.js"],"sourcesContent":["/**\r\n * Repo Manager floating Widget - Redesigned\r\n * Modern, minimal, and user-friendly floating widget for Git operations\r\n */\r\n\r\n(function () {\r\n    \"use strict\";\r\n\r\n    const { __ } = wp.i18n;\r\n\r\n    class GitManagerFloatingWidget {\r\n        constructor() {\r\n            this.currentRepo = null;\r\n            this.currentBranch = null;\r\n            this.repositories = [];\r\n            this.isLoading = false;\r\n            this.notificationQueue = [];\r\n            this.isProcessingNotifications = false;\r\n            this.isPanelOpen = false;\r\n            this.shownStatusNotifications = new Set(); // Track shown status notifications\r\n            this.sessionDismissals = new Set(); // Hide-until-refresh dismissals (not persisted)\r\n            this.isInitializing = true; // Flag to prevent duplicate calls during initialization\r\n            // Add notification dismissal system\r\n            this.notificationDismissals = this.loadNotificationDismissals();\r\n\r\n            this.init();\r\n        }\r\n\r\n        init() {\r\n            this.bindEvents();\r\n            this.loadRepositories();\r\n            this.startPolling();\r\n\r\n            // Clean up expired dismissals on initialization\r\n            this.cleanupExpiredDismissals();\r\n        }\r\n\r\n        bindEvents() {\r\n            // Floating trigger button\r\n            const trigger = document.getElementById(\r\n                \"repo-manager-floating-trigger\"\r\n            );\r\n            if (trigger) {\r\n                trigger.addEventListener(\"click\", () => this.togglePanel());\r\n            }\r\n\r\n            // Panel close button\r\n            const closeBtn = document.getElementById(\r\n                \"repo-manager-panel-close\"\r\n            );\r\n            if (closeBtn) {\r\n                closeBtn.addEventListener(\"click\", () => this.closePanel());\r\n            }\r\n\r\n            // Close panel when clicking outside\r\n            document.addEventListener(\"click\", (e) => {\r\n                if (!e.target.closest(\"#repo-manager-floating-widget\")) {\r\n                    this.closePanel();\r\n                }\r\n            });\r\n\r\n            // Repository selector\r\n            const repoSelect = document.getElementById(\r\n                \"repo-manager-repo-select\"\r\n            );\r\n            if (repoSelect) {\r\n                repoSelect.addEventListener(\"change\", (e) => {\r\n                    this.selectRepository(e.target.value);\r\n                });\r\n            }\r\n\r\n            // Action buttons\r\n            const fetchBtn = document.getElementById(\"repo-manager-fetch-btn\");\r\n            const pullBtn = document.getElementById(\"repo-manager-pull-btn\");\r\n            const pushBtn = document.getElementById(\"repo-manager-push-btn\");\r\n            const branchSelect = document.getElementById(\r\n                \"repo-manager-branch-select\"\r\n            );\r\n            const checkoutBtn = document.getElementById(\r\n                \"repo-manager-branch-checkout-btn\"\r\n            );\r\n\r\n            if (fetchBtn) {\r\n                fetchBtn.addEventListener(\"click\", () =>\r\n                    this.fetchRepository()\r\n                );\r\n            }\r\n\r\n            if (pullBtn) {\r\n                pullBtn.addEventListener(\"click\", () => this.pullRepository());\r\n            }\r\n\r\n            if (pushBtn) {\r\n                pushBtn.addEventListener(\"click\", () => this.pushRepository());\r\n            }\r\n\r\n            if (checkoutBtn) {\r\n                checkoutBtn.addEventListener(\"click\", () =>\r\n                    this.checkoutSelectedBranch()\r\n                );\r\n            }\r\n\r\n            // Close notification on click\r\n            document.addEventListener(\"click\", (e) => {\r\n                if (e.target.closest(\".repo-manager-notification-close\")) {\r\n                    const notification = e.target.closest(\r\n                        \".repo-manager-notification\"\r\n                    );\r\n                    if (notification) {\r\n                        // Check if this is a status notification\r\n                        const notificationKey =\r\n                            notification.dataset.notificationKey;\r\n                        if (\r\n                            notificationKey &&\r\n                            (notificationKey.startsWith(\"status-\") ||\r\n                                notificationKey.startsWith(\r\n                                    \"background-status\" // Check for both old and new prefixes\r\n                                ))\r\n                        ) {\r\n                            if (notificationKey.includes(\"::\")) {\r\n                                // New format: background-status::repoId::branch::status\r\n                                const parts = notificationKey.split(\"::\");\r\n                                if (parts.length === 4) {\r\n                                    const repoId = parts[1];\r\n                                    const branchName = parts[2];\r\n                                    const statusType = parts[3];\r\n\r\n                                    // Show dismissal options popup\r\n                                    this.showDismissalOptionsPopup(\r\n                                        notification,\r\n                                        branchName,\r\n                                        statusType\r\n                                    );\r\n                                } else {\r\n                                    // Fallback to direct removal for malformed new keys\r\n                                    this.removeNotification(notification);\r\n                                }\r\n                            } else {\r\n                                // Fallback for old format: background-status-repoId-branch-status\r\n                                // This can be removed after a transition period\r\n                                const withoutPrefix =\r\n                                    notificationKey.startsWith(\r\n                                        \"background-status-\"\r\n                                    )\r\n                                        ? notificationKey.substring(\r\n                                              \"background-status-\".length\r\n                                          )\r\n                                        : notificationKey.substring(\r\n                                              \"status-\".length\r\n                                          );\r\n\r\n                                const lastDashIndex =\r\n                                    withoutPrefix.lastIndexOf(\"-\");\r\n                                if (lastDashIndex !== -1) {\r\n                                    const statusType = withoutPrefix.substring(\r\n                                        lastDashIndex + 1\r\n                                    );\r\n                                    const beforeStatus =\r\n                                        withoutPrefix.substring(\r\n                                            0,\r\n                                            lastDashIndex\r\n                                        );\r\n                                    const firstDashIndex =\r\n                                        beforeStatus.indexOf(\"-\");\r\n\r\n                                    if (firstDashIndex !== -1) {\r\n                                        const branchName =\r\n                                            beforeStatus.substring(\r\n                                                firstDashIndex + 1\r\n                                            );\r\n                                        this.showDismissalOptionsPopup(\r\n                                            notification,\r\n                                            branchName,\r\n                                            statusType\r\n                                        );\r\n                                    } else {\r\n                                        this.removeNotification(notification);\r\n                                    }\r\n                                } else {\r\n                                    this.removeNotification(notification);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            this.removeNotification(notification);\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Keyboard navigation\r\n            document.addEventListener(\"keydown\", (e) => {\r\n                if (e.key === \"Escape\" && this.isPanelOpen) {\r\n                    this.closePanel();\r\n                }\r\n            });\r\n        }\r\n\r\n        togglePanel() {\r\n            if (this.isPanelOpen) {\r\n                this.closePanel();\r\n            } else {\r\n                this.openPanel();\r\n            }\r\n        }\r\n\r\n        openPanel() {\r\n            const panel = document.getElementById(\r\n                \"repo-manager-floating-panel\"\r\n            );\r\n            if (panel) {\r\n                panel.classList.add(\"active\");\r\n                this.isPanelOpen = true;\r\n\r\n                // Focus management\r\n                setTimeout(() => {\r\n                    const repoSelect = document.getElementById(\r\n                        \"repo-manager-repo-select\"\r\n                    );\r\n                    if (repoSelect) {\r\n                        repoSelect.focus();\r\n                    }\r\n                }, 100);\r\n            }\r\n        }\r\n\r\n        closePanel() {\r\n            const panel = document.getElementById(\r\n                \"repo-manager-floating-panel\"\r\n            );\r\n            if (panel) {\r\n                panel.classList.remove(\"active\");\r\n                this.isPanelOpen = false;\r\n            }\r\n        }\r\n\r\n        async loadRepositories() {\r\n            try {\r\n                this.showLoading();\r\n\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_get_repos\",\r\n                    {}\r\n                );\r\n\r\n                if (response.success && response.data) {\r\n                    this.repositories = response.data;\r\n                    this.populateRepositorySelect();\r\n                    // Remove duplicate call - this will be handled by startPolling()\r\n\r\n                    // Auto-select first repository if available\r\n                    if (this.repositories.length > 0) {\r\n                        const firstRepo = this.repositories[0];\r\n                        this.selectRepository(firstRepo.id);\r\n\r\n                        // Update the select element to show the selected repository\r\n                        const repoSelect = document.getElementById(\r\n                            \"repo-manager-repo-select\"\r\n                        );\r\n                        if (repoSelect) {\r\n                            repoSelect.value = firstRepo.id;\r\n                        }\r\n                    }\r\n                    // Trigger initial background status check immediately after repositories are available\r\n                    // Avoid waiting for the 30s polling interval for the first notifications\r\n                    if (this.repositories.length > 0) {\r\n                        this.isInitializing = false;\r\n                        this.checkAllRepositoriesForUpdates();\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                this.showError(\r\n                    __(\"Failed to load repositories\", \"repo-manager\")\r\n                );\r\n            } finally {\r\n                this.hideLoading();\r\n            }\r\n        }\r\n\r\n        populateRepositorySelect() {\r\n            const select = document.getElementById(\"repo-manager-repo-select\");\r\n            if (!select) return;\r\n\r\n            // Clear existing options except the first one\r\n            while (select.children.length > 1) {\r\n                select.removeChild(select.lastChild);\r\n            }\r\n\r\n            this.repositories.forEach((repo) => {\r\n                const option = document.createElement(\"option\");\r\n                option.value = repo.id;\r\n                option.textContent = repo.name || repo.path.split(\"/\").pop();\r\n                select.appendChild(option);\r\n            });\r\n        }\r\n\r\n        async selectRepository(repoId) {\r\n            if (!repoId) {\r\n                this.hideBranchInfo();\r\n                return;\r\n            }\r\n\r\n            this.currentRepo = this.repositories.find(\r\n                (repo) => repo.id === repoId\r\n            );\r\n            if (!this.currentRepo) return;\r\n\r\n            try {\r\n                this.showLoading();\r\n\r\n                // Get repository status first (includes current branch info)\r\n                await this.updateRepositoryStatusSilent();\r\n\r\n                // Get full branch list for dropdown\r\n                const branchResponse = await this.makeAjaxRequest(\r\n                    \"git_manager_get_branches\",\r\n                    { id: repoId }\r\n                );\r\n                if (branchResponse.success && branchResponse.data) {\r\n                    const { branches = [], activeBranch = \"\" } =\r\n                        branchResponse.data;\r\n                    // Fallbacks if API returned empty arrays\r\n                    const normalizedBranches = Array.isArray(branches)\r\n                        ? branches.filter(Boolean)\r\n                        : [];\r\n                    this.currentBranch =\r\n                        activeBranch || normalizedBranches[0] || \"\";\r\n                    this.populateBranchDropdown(\r\n                        normalizedBranches,\r\n                        this.currentBranch\r\n                    );\r\n                    this.updateBranchInfo();\r\n                }\r\n            } catch (error) {\r\n                this.showError(\r\n                    __(\"Failed to load repository information\", \"repo-manager\")\r\n                );\r\n            } finally {\r\n                this.hideLoading();\r\n            }\r\n        }\r\n\r\n        populateBranchDropdown(branches, activeBranch) {\r\n            const select = document.getElementById(\r\n                \"repo-manager-branch-select\"\r\n            );\r\n            if (!select) return;\r\n            // reset options except placeholder\r\n            while (select.children.length > 1) {\r\n                select.removeChild(select.lastChild);\r\n            }\r\n            branches.forEach((b) => {\r\n                const opt = document.createElement(\"option\");\r\n                opt.value = b;\r\n                opt.textContent = b;\r\n                if (b === activeBranch) opt.selected = true;\r\n                select.appendChild(opt);\r\n            });\r\n            // If nothing selected yet, and we have branches, select first\r\n            if (!select.value && branches.length > 0) {\r\n                select.value = branches[0];\r\n            }\r\n        }\r\n\r\n        async checkoutSelectedBranch() {\r\n            if (!this.currentRepo) return;\r\n            const select = document.getElementById(\r\n                \"repo-manager-branch-select\"\r\n            );\r\n            if (!select || !select.value) return;\r\n            const branch = select.value;\r\n            try {\r\n                this.showLoading();\r\n                const res = await this.makeAjaxRequest(\"git_manager_checkout\", {\r\n                    id: this.currentRepo.id,\r\n                    branch,\r\n                });\r\n                if (res.success) {\r\n                    this.currentBranch = branch;\r\n                    this.updateBranchInfo();\r\n                    await this.updateRepositoryStatus();\r\n                    this.showSuccess(\r\n                        `${this.currentRepo.name || \"\"}: ${__(\r\n                            \"Switched to\",\r\n                            \"repo-manager\"\r\n                        )} ${branch}`\r\n                    );\r\n                    // Notify other tabs (dashboard) to refresh\r\n                    try {\r\n                        localStorage.setItem(\r\n                            \"git_manager_last_checkout\",\r\n                            String(Date.now())\r\n                        );\r\n                    } catch (e) {}\r\n                } else {\r\n                    this.showError(\r\n                        res.data || __(\"Checkout failed\", \"repo-manager\")\r\n                    );\r\n                }\r\n            } catch (e) {\r\n                this.showError(\r\n                    e?.message || __(\"Checkout error\", \"repo-manager\")\r\n                );\r\n            } finally {\r\n                this.hideLoading();\r\n            }\r\n        }\r\n\r\n        updateBranchInfo() {\r\n            const branchName = document.getElementById(\r\n                \"repo-manager-current-branch-name\"\r\n            );\r\n            const branchSection = document.getElementById(\r\n                \"repo-manager-branch-section\"\r\n            );\r\n            const emptyState = document.getElementById(\r\n                \"repo-manager-empty-state\"\r\n            );\r\n\r\n            if (branchName && this.currentBranch) {\r\n                branchName.textContent = this.currentBranch;\r\n                if (branchSection) branchSection.style.display = \"block\";\r\n                if (emptyState) emptyState.style.display = \"none\";\r\n            }\r\n        }\r\n\r\n        async updateRepositoryStatus() {\r\n            if (!this.currentRepo) return;\r\n\r\n            try {\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_bulk_repo_status\",\r\n                    {}\r\n                );\r\n\r\n                if (\r\n                    response.success &&\r\n                    response.data &&\r\n                    response.data[this.currentRepo.id]\r\n                ) {\r\n                    this.updateStatusIndicator(\r\n                        response.data[this.currentRepo.id]\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                // Silent error handling\r\n            }\r\n        }\r\n\r\n        async updateRepositoryStatusSilent() {\r\n            if (!this.currentRepo) return;\r\n\r\n            try {\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_bulk_repo_status\",\r\n                    {}\r\n                );\r\n\r\n                if (\r\n                    response.success &&\r\n                    response.data &&\r\n                    response.data[this.currentRepo.id]\r\n                ) {\r\n                    this.updateStatusIndicatorSilent(\r\n                        response.data[this.currentRepo.id]\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                // Silent error handling\r\n            }\r\n        }\r\n\r\n        updateStatusIndicator(statusData) {\r\n            const statusDot = document.getElementById(\r\n                \"repo-manager-status-dot\"\r\n            );\r\n            const statusText = document.getElementById(\r\n                \"repo-manager-status-text\"\r\n            );\r\n            const triggerStatus = document.getElementById(\r\n                \"repo-manager-trigger-status\"\r\n            );\r\n\r\n            if (!statusDot || !statusText) return;\r\n\r\n            // Handle both old string format and new object format\r\n            let behind = 0;\r\n            let ahead = 0;\r\n            let hasChanges = false;\r\n\r\n            if (typeof statusData === \"string\") {\r\n                // Old format - parse the string\r\n                const lines = statusData.split(\"\\n\");\r\n                lines.forEach((line) => {\r\n                    line = line.trim();\r\n                    if (line.startsWith(\"##\")) {\r\n                        if (line.includes(\"behind\")) {\r\n                            const match = line.match(/behind (\\d+)/);\r\n                            if (match) behind = parseInt(match[1]);\r\n                        }\r\n                        if (line.includes(\"ahead\")) {\r\n                            const match = line.match(/ahead (\\d+)/);\r\n                            if (match) ahead = parseInt(match[1]);\r\n                        }\r\n                    } else if (line) {\r\n                        hasChanges = true;\r\n                    }\r\n                });\r\n            } else if (typeof statusData === \"object\") {\r\n                // New format - use object properties\r\n                behind = statusData.behind || 0;\r\n                ahead = statusData.ahead || 0;\r\n                hasChanges = statusData.hasChanges || false;\r\n            }\r\n\r\n            // Remove existing status classes\r\n            statusDot.classList.remove(\"behind\", \"ahead\", \"diverged\", \"clean\");\r\n            if (triggerStatus) {\r\n                triggerStatus.classList.remove(\r\n                    \"status-behind\",\r\n                    \"status-ahead\",\r\n                    \"status-diverged\",\r\n                    \"status-clean\"\r\n                );\r\n            }\r\n\r\n            let status = \"clean\";\r\n            let text = __(\"Up to date\", \"repo-manager\");\r\n\r\n            // Check for behind commits (need to pull)\r\n            if (behind > 0) {\r\n                status = \"behind\";\r\n                text = __(\"Behind remote\", \"repo-manager\");\r\n            }\r\n            // Check for ahead commits (need to push)\r\n            else if (ahead > 0) {\r\n                status = \"ahead\";\r\n                text = __(\"Ahead of remote\", \"repo-manager\");\r\n            }\r\n            // Check for diverged (both behind and ahead)\r\n            else if (behind > 0 && ahead > 0) {\r\n                status = \"diverged\";\r\n                text = __(\"Diverged\", \"repo-manager\");\r\n            }\r\n\r\n            statusDot.classList.add(status);\r\n            statusText.textContent = text;\r\n\r\n            // Update trigger status indicator\r\n            if (triggerStatus) {\r\n                triggerStatus.classList.add(`status-${status}`);\r\n            }\r\n        }\r\n\r\n        updateStatusIndicatorSilent(statusData) {\r\n            const statusDot = document.getElementById(\r\n                \"repo-manager-status-dot\"\r\n            );\r\n            const statusText = document.getElementById(\r\n                \"repo-manager-status-text\"\r\n            );\r\n            const triggerStatus = document.getElementById(\r\n                \"repo-manager-trigger-status\"\r\n            );\r\n\r\n            if (!statusDot || !statusText) return;\r\n\r\n            // Handle both old string format and new object format\r\n            let behind = 0;\r\n            let ahead = 0;\r\n            let hasChanges = false;\r\n\r\n            if (typeof statusData === \"string\") {\r\n                // Old format - parse the string\r\n                const lines = statusData.split(\"\\n\");\r\n                lines.forEach((line) => {\r\n                    line = line.trim();\r\n                    if (line.startsWith(\"##\")) {\r\n                        if (line.includes(\"behind\")) {\r\n                            const match = line.match(/behind (\\d+)/);\r\n                            if (match) behind = parseInt(match[1]);\r\n                        }\r\n                        if (line.includes(\"ahead\")) {\r\n                            const match = line.match(/ahead (\\d+)/);\r\n                            if (match) ahead = parseInt(match[1]);\r\n                        }\r\n                    } else if (line) {\r\n                        hasChanges = true;\r\n                    }\r\n                });\r\n            } else if (typeof statusData === \"object\") {\r\n                // New format - use object properties\r\n                behind = statusData.behind || 0;\r\n                ahead = statusData.ahead || 0;\r\n                hasChanges = statusData.hasChanges || false;\r\n            }\r\n\r\n            // Remove existing status classes\r\n            statusDot.classList.remove(\"behind\", \"ahead\", \"diverged\", \"clean\");\r\n            if (triggerStatus) {\r\n                triggerStatus.classList.remove(\r\n                    \"status-behind\",\r\n                    \"status-ahead\",\r\n                    \"status-diverged\",\r\n                    \"status-clean\"\r\n                );\r\n            }\r\n\r\n            let status = \"clean\";\r\n            let text = __(\"Up to date\", \"repo-manager\");\r\n\r\n            // Check for behind commits (need to pull)\r\n            if (behind > 0) {\r\n                status = \"behind\";\r\n                text = __(\"Behind remote\", \"repo-manager\");\r\n            }\r\n            // Check for ahead commits (need to push)\r\n            else if (ahead > 0) {\r\n                status = \"ahead\";\r\n                text = __(\"Ahead of remote\", \"repo-manager\");\r\n            }\r\n            // Check for diverged (both behind and ahead)\r\n            else if (behind > 0 && ahead > 0) {\r\n                status = \"diverged\";\r\n                text = __(\"Diverged\", \"repo-manager\");\r\n            }\r\n\r\n            statusDot.classList.add(status);\r\n            statusText.textContent = text;\r\n\r\n            // Update trigger status indicator\r\n            if (triggerStatus) {\r\n                triggerStatus.classList.add(`status-${status}`);\r\n            }\r\n\r\n            // Don't show notifications in silent mode\r\n            // Only clear existing notifications if status is clean\r\n            if (status === \"clean\" && this.currentRepo) {\r\n                this.clearStatusNotification(this.currentRepo.id);\r\n            }\r\n        }\r\n\r\n        clearStatusNotification(repoId = null) {\r\n            const targetRepoId =\r\n                repoId || (this.currentRepo ? this.currentRepo.id : null);\r\n            if (!targetRepoId) return;\r\n\r\n            // Remove all status notifications for this repository\r\n            const notifications = document.querySelectorAll(\r\n                \".repo-manager-notification\"\r\n            );\r\n            notifications.forEach((notification) => {\r\n                const notificationKey = notification.dataset.notificationKey;\r\n                if (\r\n                    notificationKey &&\r\n                    (notificationKey.startsWith(`status-${targetRepoId}-`) ||\r\n                        notificationKey.startsWith(\r\n                            `background-status-${targetRepoId}-`\r\n                        ) ||\r\n                        notificationKey.startsWith(\r\n                            `background-status::${targetRepoId}::`\r\n                        ))\r\n                ) {\r\n                    this.removeNotification(notification);\r\n                }\r\n            });\r\n        }\r\n\r\n        async fetchRepository() {\r\n            if (!this.currentRepo || this.isLoading) return;\r\n\r\n            try {\r\n                this.isLoading = true;\r\n                this.disableButtons();\r\n\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_fetch\",\r\n                    {\r\n                        id: this.currentRepo.id,\r\n                    }\r\n                );\r\n\r\n                if (response.success) {\r\n                    this.showSuccess(\r\n                        `${this.currentRepo.name}: ${__(\r\n                            \"Repository fetched successfully\",\r\n                            \"repo-manager\"\r\n                        )}`\r\n                    );\r\n                    await this.updateRepositoryStatus();\r\n                    // Clear status notifications after successful fetch\r\n                    this.clearStatusNotification(this.currentRepo.id);\r\n                } else {\r\n                    this.showError(\r\n                        `${this.currentRepo.name}: ${\r\n                            response.data?.message ||\r\n                            response.data ||\r\n                            __(\"Fetch failed\", \"repo-manager\")\r\n                        }`\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                this.showError(\r\n                    `${this.currentRepo.name}: ${__(\r\n                        \"Fetch operation failed\",\r\n                        \"repo-manager\"\r\n                    )}`\r\n                );\r\n            } finally {\r\n                this.isLoading = false;\r\n                this.enableButtons();\r\n            }\r\n        }\r\n\r\n        async pullRepository() {\r\n            if (!this.currentRepo || this.isLoading) return;\r\n\r\n            try {\r\n                this.isLoading = true;\r\n                this.disableButtons();\r\n\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_repo_git\",\r\n                    {\r\n                        id: this.currentRepo.id,\r\n                        op: \"pull\",\r\n                    }\r\n                );\r\n\r\n                if (response.success) {\r\n                    this.showSuccess(\r\n                        `${this.currentRepo.name}: ${__(\r\n                            \"Repository pulled successfully\",\r\n                            \"repo-manager\"\r\n                        )}`\r\n                    );\r\n                    await this.updateRepositoryStatus();\r\n                    // Clear status notifications after successful pull\r\n                    this.clearStatusNotification(this.currentRepo.id);\r\n                } else {\r\n                    this.showError(\r\n                        `${this.currentRepo.name}: ${\r\n                            response.data?.message ||\r\n                            response.data ||\r\n                            __(\"Pull failed\", \"repo-manager\")\r\n                        }`\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                this.showError(\r\n                    `${this.currentRepo.name}: ${__(\r\n                        \"Pull operation failed\",\r\n                        \"repo-manager\"\r\n                    )}`\r\n                );\r\n            } finally {\r\n                this.isLoading = false;\r\n                this.enableButtons();\r\n            }\r\n        }\r\n\r\n        async pushRepository() {\r\n            if (!this.currentRepo || this.isLoading) return;\r\n\r\n            try {\r\n                this.isLoading = true;\r\n                this.disableButtons();\r\n\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_repo_git\",\r\n                    {\r\n                        id: this.currentRepo.id,\r\n                        op: \"push\",\r\n                    }\r\n                );\r\n\r\n                if (response.success) {\r\n                    this.showSuccess(\r\n                        `${this.currentRepo.name}: ${__(\r\n                            \"Repository pushed successfully\",\r\n                            \"repo-manager\"\r\n                        )}`\r\n                    );\r\n                    await this.updateRepositoryStatus();\r\n                    // Clear status notifications after successful push\r\n                    this.clearStatusNotification(this.currentRepo.id);\r\n                } else {\r\n                    this.showError(\r\n                        `${this.currentRepo.name}: ${\r\n                            response.data?.message ||\r\n                            response.data ||\r\n                            __(\"Push failed\", \"repo-manager\")\r\n                        }`\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                this.showError(\r\n                    `${this.currentRepo.name}: ${__(\r\n                        \"Push operation failed\",\r\n                        \"repo-manager\"\r\n                    )}`\r\n                );\r\n            } finally {\r\n                this.isLoading = false;\r\n                this.enableButtons();\r\n            }\r\n        }\r\n\r\n        hideBranchInfo() {\r\n            const branchSection = document.getElementById(\r\n                \"repo-manager-branch-section\"\r\n            );\r\n            const emptyState = document.getElementById(\r\n                \"repo-manager-empty-state\"\r\n            );\r\n\r\n            if (branchSection) branchSection.style.display = \"none\";\r\n            if (emptyState) emptyState.style.display = \"block\";\r\n        }\r\n\r\n        showLoading() {\r\n            const loading = document.getElementById(\r\n                \"repo-manager-loading-state\"\r\n            );\r\n            const branchSection = document.getElementById(\r\n                \"repo-manager-branch-section\"\r\n            );\r\n            const emptyState = document.getElementById(\r\n                \"repo-manager-empty-state\"\r\n            );\r\n\r\n            if (loading) loading.style.display = \"flex\";\r\n            if (branchSection) branchSection.style.display = \"none\";\r\n            if (emptyState) emptyState.style.display = \"none\";\r\n        }\r\n\r\n        hideLoading() {\r\n            const loading = document.getElementById(\r\n                \"repo-manager-loading-state\"\r\n            );\r\n            if (loading) loading.style.display = \"none\";\r\n        }\r\n\r\n        disableButtons() {\r\n            const buttons = document.querySelectorAll(\r\n                \".repo-manager-action-btn\"\r\n            );\r\n            buttons.forEach((btn) => (btn.disabled = true));\r\n        }\r\n\r\n        enableButtons() {\r\n            const buttons = document.querySelectorAll(\r\n                \".repo-manager-action-btn\"\r\n            );\r\n            buttons.forEach((btn) => (btn.disabled = false));\r\n        }\r\n\r\n        showSuccess(message) {\r\n            this.showNotification(message, \"success\");\r\n        }\r\n\r\n        showError(message) {\r\n            this.showNotification(message, \"error\");\r\n        }\r\n\r\n        showNotification(message, type = \"info\", data = {}) {\r\n            // Check if notifications are enabled\r\n            if (!this.areNotificationsEnabled()) {\r\n                return; // Notifications are disabled\r\n            }\r\n\r\n            const notification = {\r\n                id: Date.now() + Math.random(),\r\n                message,\r\n                type,\r\n                data,\r\n                timestamp: Date.now(),\r\n            };\r\n\r\n            this.notificationQueue.push(notification);\r\n            this.processNotificationQueue();\r\n        }\r\n\r\n        async processNotificationQueue() {\r\n            if (\r\n                this.isProcessingNotifications ||\r\n                this.notificationQueue.length === 0\r\n            ) {\r\n                return;\r\n            }\r\n\r\n            this.isProcessingNotifications = true;\r\n\r\n            while (this.notificationQueue.length > 0) {\r\n                const notification = this.notificationQueue.shift();\r\n                await this.displayNotification(notification);\r\n\r\n                // Wait a bit between notifications\r\n                await new Promise((resolve) => setTimeout(resolve, 100));\r\n            }\r\n\r\n            this.isProcessingNotifications = false;\r\n        }\r\n\r\n        async displayNotification(notification) {\r\n            let container = document.getElementById(\r\n                \"repo-manager-notification-container\"\r\n            );\r\n            if (!container) {\r\n                // Create the notification container if it doesn't exist\r\n                container = this.createNotificationContainer();\r\n                if (!container) {\r\n                    // If we still can't create it, wait a bit and try again\r\n                    setTimeout(() => {\r\n                        this.displayNotification(notification);\r\n                    }, 100);\r\n                    return;\r\n                }\r\n            }\r\n\r\n            const notificationEl = document.createElement(\"div\");\r\n            notificationEl.className = `repo-manager-notification repo-manager-notification-${notification.type}`;\r\n            notificationEl.dataset.notificationId = notification.id;\r\n\r\n            // Add notification key for status notifications\r\n            if (notification.data.notificationKey) {\r\n                notificationEl.dataset.notificationKey =\r\n                    notification.data.notificationKey;\r\n            }\r\n\r\n            // Get avatar URL if available\r\n            let avatarHtml = `\r\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <g><path stroke=\"var(--repo-manager-success)\" d=\"M 9 19 C 5.283 20.115 3.005 19.703 2.068 17.054 C 1.848 16.432 1.085 16.283 0.572 16.155 M 16.558 22.159 L 16 18.13 C 16.076 17.165 15.465 15.854 14.792 15.159 C 17.932 14.809 23.456 15.349 21.5 8.52 C 21.116 7.178 20.963 5.781 20 4.77 C 20.456 3.549 20.853 1.609 20.339 0.411 C 20.339 0.411 18.73 0.65 16 2.48 C 13.708 1.859 11.292 1.859 9 2.48 C 6.27 0.65 4.768 0.464 4.768 0.464 C 4.254 1.662 4.544 3.549 5 4.77 C 4.03 5.789 3.716 7.16 3.5 8.55 C 2.522 14.85 7.019 14.692 10.159 15.082 C 9.494 15.77 8.933 17.176 9 18.13 L 9 22\" style=\"stroke-linecap: round; stroke-linejoin: round; stroke-width: 1.80018px; fill: none;\"></path></g>\r\n                </svg>\r\n            `;\r\n\r\n            // Use backend-provided avatar URL if available\r\n            if (notification.data.gravatar_url) {\r\n                avatarHtml = `<img src=\"${notification.data.gravatar_url}\" alt=\"Avatar\" onerror=\"this.style.display='none'; this.nextElementSibling.style.display='flex';\"><svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"><path d=\"M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><circle cx=\"12\" cy=\"7\" r=\"4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>`;\r\n            } else if (notification.data.author_email) {\r\n                // Fallback to frontend MD5 generation if backend doesn't provide URL\r\n                const avatarUrl = this.getGravatarUrl(\r\n                    notification.data.author_email\r\n                );\r\n                avatarHtml = `<img src=\"${avatarUrl}\" alt=\"Avatar\" onerror=\"this.style.display='none'; this.nextElementSibling.style.display='flex';\"><svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"><path d=\"M20 21V19C20 17.9391 19.5786 16.9217 18.8284 16.1716C18.0783 15.4214 17.0609 15 16 15H8C6.93913 15 5.92172 15.4214 5.17157 16.1716C4.42143 16.9217 4 17.9391 4 19V21\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><circle cx=\"12\" cy=\"7\" r=\"4\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>`;\r\n            }\r\n\r\n            // Use different icon for status notifications\r\n            if (notification.data.isStatusNotification) {\r\n                // Show author avatar if available, otherwise use default icon\r\n                if (notification.data.gravatar_url) {\r\n                    avatarHtml = `<img src=\"${notification.data.gravatar_url}\" alt=\"Avatar\" onerror=\"this.style.display='none'; this.nextElementSibling.style.display='flex';\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"><path d=\"M12 2L2 7L12 12L22 7L12 2Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M2 17L12 22L22 17\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M2 12L12 17L22 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>`;\r\n                } else if (notification.data.author_email) {\r\n                    // Fallback to frontend MD5 generation\r\n                    const avatarUrl = this.getGravatarUrl(\r\n                        notification.data.author_email\r\n                    );\r\n                    avatarHtml = `<img src=\"${avatarUrl}\" alt=\"Avatar\" onerror=\"this.style.display='none'; this.nextElementSibling.style.display='flex';\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" style=\"display: none;\"><path d=\"M12 2L2 7L12 12L22 7L12 2Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M2 17L12 22L22 17\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/><path d=\"M2 12L12 17L22 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>`;\r\n                } else {\r\n                    avatarHtml = `\r\n                        <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M12 2L2 7L12 12L22 7L12 2Z\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                            <path d=\"M2 17L12 22L22 17\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                            <path d=\"M2 12L12 17L22 12\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                        </svg>\r\n                    `;\r\n                }\r\n            }\r\n\r\n            // Format message for better display\r\n            let formattedMessage = notification.message;\r\n            if (\r\n                notification.data.isStatusNotification &&\r\n                notification.data.latest_commit\r\n            ) {\r\n                // Split message into main message and commit info\r\n                const lines = notification.message.split(\"\\n\");\r\n                if (lines.length > 1) {\r\n                    const mainMessage = lines[0];\r\n                    const commitInfo = lines.slice(1).join(\"\\n\");\r\n                    formattedMessage = `\r\n                        <div class=\"repo-manager-notification-main-message\">${this.escapeHtml(\r\n                            mainMessage\r\n                        )}</div>\r\n                        <div class=\"repo-manager-notification-commit-info\">${this.escapeHtml(\r\n                            commitInfo\r\n                        )}</div>\r\n                    `;\r\n                }\r\n            } else {\r\n                formattedMessage = this.escapeHtml(notification.message);\r\n            }\r\n\r\n            notificationEl.innerHTML = `\r\n                <div class=\"repo-manager-notification-avatar\">\r\n                    ${avatarHtml}\r\n                </div>\r\n                <div class=\"repo-manager-notification-content\">\r\n                    <div class=\"repo-manager-notification-title\">\r\n                        ${this.escapeHtml(\r\n                            notification.data.author ||\r\n                                (notification.data.isStatusNotification\r\n                                    ? __(\"Branch Status\", \"repo-manager\")\r\n                                    : __(\"Git Update\", \"repo-manager\"))\r\n                        )}\r\n                    </div>\r\n                    <div class=\"repo-manager-notification-message\">\r\n                        ${formattedMessage}\r\n                    </div>\r\n                    <div class=\"repo-manager-notification-meta\">\r\n                        ${\r\n                            notification.data.repo_name\r\n                                ? `<span class=\"repo-manager-notification-repo\">${this.escapeHtml(\r\n                                      notification.data.repo_name\r\n                                  )}</span>`\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            notification.data.branch\r\n                                ? `<span class=\"repo-manager-notification-branch\">${this.escapeHtml(\r\n                                      notification.data.branch\r\n                                  )}</span>`\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            notification.data.status\r\n                                ? `<span class=\"repo-manager-notification-status repo-manager-notification-status-${\r\n                                      notification.data.status\r\n                                  }\">${this.escapeHtml(\r\n                                      notification.data.status\r\n                                  )}</span>`\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            notification.data.behind &&\r\n                            notification.data.behind > 0\r\n                                ? `<span class=\"repo-manager-notification-count repo-manager-notification-count-behind\">${\r\n                                      notification.data.behind\r\n                                  } ${\r\n                                      notification.data.behind === 1\r\n                                          ? __(\"commit\", \"repo-manager\")\r\n                                          : __(\"commits\", \"repo-manager\")\r\n                                  } ${__(\"behind\", \"repo-manager\")}</span>`\r\n                                : \"\"\r\n                        }\r\n                        ${\r\n                            notification.data.ahead &&\r\n                            notification.data.ahead > 0\r\n                                ? `<span class=\"repo-manager-notification-count repo-manager-notification-count-ahead\">${\r\n                                      notification.data.ahead\r\n                                  } ${\r\n                                      notification.data.ahead === 1\r\n                                          ? __(\"commit\", \"repo-manager\")\r\n                                          : __(\"commits\", \"repo-manager\")\r\n                                  } ${__(\"ahead\", \"repo-manager\")}</span>`\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                    ${\r\n                        notification.data.isStatusNotification &&\r\n                        notification.data.repo_id\r\n                            ? `<div class=\"repo-manager-notification-actions\">\r\n                                ${\r\n                                    notification.data.status === \"behind\" ||\r\n                                    notification.data.status === \"diverged\"\r\n                                        ? `<button class=\"repo-manager-notification-btn repo-manager-notification-btn-pull\" data-repo-id=\"${\r\n                                              notification.data.repo_id\r\n                                          }\" title=\"${__(\r\n                                              \"Pull changes\",\r\n                                              \"repo-manager\"\r\n                                          )}\">\r\n                                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                <path d=\"M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                                <polyline points=\"7,10 12,15 17,10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                            </svg>\r\n                                            ${__(\"Pull\", \"repo-manager\")}\r\n                                        </button>`\r\n                                        : \"\"\r\n                                }\r\n                                ${\r\n                                    notification.data.status === \"ahead\" ||\r\n                                    notification.data.status === \"diverged\"\r\n                                        ? `<button class=\"repo-manager-notification-btn repo-manager-notification-btn-push\" data-repo-id=\"${\r\n                                              notification.data.repo_id\r\n                                          }\" title=\"${__(\r\n                                              \"Push changes\",\r\n                                              \"repo-manager\"\r\n                                          )}\">\r\n                                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                                <path d=\"M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                                <polyline points=\"17,8 12,3 7,8\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                                <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                            </svg>\r\n                                            ${__(\"Push\", \"repo-manager\")}\r\n                                        </button>`\r\n                                        : \"\"\r\n                                }\r\n                            </div>`\r\n                            : \"\"\r\n                    }\r\n                </div>\r\n                <button class=\"repo-manager-notification-close\" aria-label=\"${__(\r\n                    \"Close notification\",\r\n                    \"repo-manager\"\r\n                )}\">\r\n                    <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                        <path d=\"M18 6L6 18M6 6L18 18\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                    </svg>\r\n                </button>\r\n            `;\r\n\r\n            // Add card stacking functionality\r\n            this.setupCardStacking(notificationEl, container);\r\n\r\n            container.appendChild(notificationEl);\r\n\r\n            // Apply stacking after the element is in the DOM\r\n            this.updateNotificationStacking(container);\r\n\r\n            // Add event listeners for pull/push buttons\r\n            if (\r\n                notification.data.isStatusNotification &&\r\n                notification.data.repo_id\r\n            ) {\r\n                const pullBtn = notificationEl.querySelector(\r\n                    \".repo-manager-notification-btn-pull\"\r\n                );\r\n                const pushBtn = notificationEl.querySelector(\r\n                    \".repo-manager-notification-btn-push\"\r\n                );\r\n\r\n                if (pullBtn) {\r\n                    pullBtn.addEventListener(\"click\", (e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        this.handleNotificationPull(\r\n                            notification.data.repo_id,\r\n                            notificationEl\r\n                        );\r\n                    });\r\n                }\r\n\r\n                if (pushBtn) {\r\n                    pushBtn.addEventListener(\"click\", (e) => {\r\n                        e.preventDefault();\r\n                        e.stopPropagation();\r\n                        this.handleNotificationPush(\r\n                            notification.data.repo_id,\r\n                            notificationEl\r\n                        );\r\n                    });\r\n                }\r\n            }\r\n\r\n            // Auto-remove after 8 seconds (only for non-status notifications)\r\n            if (!notification.data.isStatusNotification) {\r\n                setTimeout(() => {\r\n                    this.removeNotification(notificationEl);\r\n                }, 8000);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Setup card stacking functionality for notifications\r\n         */\r\n        setupCardStacking(notificationEl, container) {\r\n            // Add click handler to bring notification to front\r\n            notificationEl.addEventListener(\"click\", (e) => {\r\n                // Don't trigger if clicking on close button or action buttons\r\n                if (\r\n                    e.target.closest(\".repo-manager-notification-close\") ||\r\n                    e.target.closest(\".repo-manager-notification-btn\")\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                // If this is already the top-most notification, do nothing\r\n                if (\r\n                    container &&\r\n                    container.lastElementChild === notificationEl\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                // Add visual feedback for click\r\n                notificationEl.style.transform = \"scale(0.98)\";\r\n                setTimeout(() => {\r\n                    notificationEl.style.transform = \"\";\r\n                    this.bringNotificationToFront(notificationEl, container);\r\n                }, 100);\r\n            });\r\n\r\n            // Add hover effect to indicate clickability\r\n            notificationEl.style.cursor = \"pointer\";\r\n\r\n            // Initial stacking is applied after append in displayNotification\r\n        }\r\n\r\n        /**\r\n         * Bring a notification to the front of the stack\r\n         */\r\n        bringNotificationToFront(notificationEl, container) {\r\n            // Store current transform for smooth transition\r\n            const currentTransform = notificationEl.style.transform;\r\n            const currentOpacity = notificationEl.style.opacity;\r\n\r\n            // Remove the notification from its current position\r\n            if (notificationEl.parentNode) {\r\n                notificationEl.parentNode.removeChild(notificationEl);\r\n            }\r\n\r\n            // Add it back to the top\r\n            container.appendChild(notificationEl);\r\n\r\n            // Reset to current position for smooth animation\r\n            notificationEl.style.transform = currentTransform;\r\n            notificationEl.style.opacity = currentOpacity;\r\n\r\n            // Force reflow\r\n            notificationEl.offsetHeight;\r\n\r\n            // Add enhanced animation to indicate the card was brought to front\r\n            notificationEl.classList.add(\"processing\");\r\n            notificationEl.style.animation =\r\n                \"cardBringToFront 0.5s cubic-bezier(0.25, 0.46, 0.45, 0.94)\";\r\n\r\n            // Wait for animation to complete before updating stacking\r\n            setTimeout(() => {\r\n                notificationEl.style.animation = \"\";\r\n                notificationEl.classList.remove(\"processing\");\r\n                // Update stacking for all notifications after animation completes\r\n                this.updateNotificationStacking(container);\r\n            }, 500);\r\n        }\r\n\r\n        /**\r\n         * Update the stacking order and visual effects for all notifications\r\n         */\r\n        updateNotificationStacking(container) {\r\n            const notifications = container.querySelectorAll(\r\n                \".repo-manager-notification\"\r\n            );\r\n            const maxStackedNotifications = 5; // Maximum number of notifications to show stacked\r\n            const isRTL = document.documentElement.dir === \"rtl\";\r\n\r\n            notifications.forEach((notification, index) => {\r\n                const isTopCard = index === notifications.length - 1;\r\n                const isStacked =\r\n                    index >= notifications.length - maxStackedNotifications &&\r\n                    !isTopCard;\r\n\r\n                if (isStacked) {\r\n                    // Apply stacking effect with CSS custom properties for smoother animations\r\n                    const stackIndex = notifications.length - index - 1;\r\n                    const offsetY = 0; // 25px offset per stacked card\r\n                    const offsetX = isRTL\r\n                        ? +(stackIndex * 25)\r\n                        : -(stackIndex * 25); // 25px horizontal offset\r\n                    const scale = 0.95; // Slightly smaller scale\r\n                    const opacity = 1 - stackIndex * 0.15; // Gradually more transparent\r\n\r\n                    // Set CSS custom properties for smooth animations\r\n                    notification.style.setProperty(\r\n                        \"--stack-offset-x\",\r\n                        `${offsetX}px`\r\n                    );\r\n                    notification.style.setProperty(\r\n                        \"--stack-offset-y\",\r\n                        `${offsetY}px`\r\n                    );\r\n                    notification.style.setProperty(\r\n                        \"--stack-opacity\",\r\n                        opacity.toString()\r\n                    );\r\n\r\n                    notification.style.transform = `translate(${offsetX}px, ${offsetY}px) scale(${scale})`;\r\n                    notification.style.opacity = opacity;\r\n                    notification.style.zIndex = 10000 - stackIndex;\r\n                    notification.style.pointerEvents = \"auto\";\r\n                    notification.classList.add(\r\n                        \"repo-manager-notification-stacked\"\r\n                    );\r\n                } else if (isTopCard) {\r\n                    // Top card - full visibility with smooth transition\r\n                    notification.style.removeProperty(\"--stack-offset-x\");\r\n                    notification.style.removeProperty(\"--stack-offset-y\");\r\n                    notification.style.removeProperty(\"--stack-opacity\");\r\n\r\n                    notification.style.transform =\r\n                        \"translate(0, 0) scale(0.95)\";\r\n                    notification.style.opacity = \"1\";\r\n                    notification.style.zIndex = 10000 + maxStackedNotifications;\r\n                    notification.style.pointerEvents = \"auto\";\r\n                    notification.classList.remove(\r\n                        \"repo-manager-notification-stacked\"\r\n                    );\r\n                } else {\r\n                    // Hidden cards - move them out of view but keep them in DOM\r\n                    notification.style.removeProperty(\"--stack-offset-x\");\r\n                    notification.style.removeProperty(\"--stack-offset-y\");\r\n                    notification.style.removeProperty(\"--stack-opacity\");\r\n\r\n                    notification.style.transform =\r\n                        \"translate(0, -100px) scale(0.8)\";\r\n                    notification.style.opacity = \"0\";\r\n                    notification.style.zIndex = \"10000\";\r\n                    notification.style.pointerEvents = \"none\";\r\n                    notification.classList.add(\r\n                        \"repo-manager-notification-hidden\"\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        removeNotification(notificationEl) {\r\n            if (notificationEl && notificationEl.parentNode) {\r\n                // Check if this is a status notification and clean up tracking\r\n                const notificationKey = notificationEl.dataset.notificationKey;\r\n                if (\r\n                    notificationKey &&\r\n                    (notificationKey.startsWith(\"status-\") ||\r\n                        notificationKey.startsWith(\"background-status-\"))\r\n                ) {\r\n                    this.shownStatusNotifications.delete(notificationKey);\r\n\r\n                    // Also clean up general branch-status tracking\r\n                    if (notificationKey.includes(\"::\")) {\r\n                        const parts = notificationKey.split(\"::\");\r\n                        if (parts.length === 4) {\r\n                            const branch = parts[2];\r\n                            const status = parts[3];\r\n                            const generalKey = `${branch}:${status}`;\r\n                            this.shownStatusNotifications.delete(generalKey);\r\n                        }\r\n                    } else if (\r\n                        notificationKey.startsWith(\"background-status-\")\r\n                    ) {\r\n                        // Fallback for old format\r\n                        const withoutPrefix = notificationKey.substring(\r\n                            \"background-status-\".length\r\n                        );\r\n                        const lastDashIndex = withoutPrefix.lastIndexOf(\"-\");\r\n                        if (lastDashIndex !== -1) {\r\n                            const status = withoutPrefix.substring(\r\n                                lastDashIndex + 1\r\n                            );\r\n                            const beforeStatus = withoutPrefix.substring(\r\n                                0,\r\n                                lastDashIndex\r\n                            );\r\n                            const firstDashIndex = beforeStatus.indexOf(\"-\");\r\n                            if (firstDashIndex !== -1) {\r\n                                const branch = beforeStatus.substring(\r\n                                    firstDashIndex + 1\r\n                                );\r\n                                const generalKey = `${branch}:${status}`;\r\n                                this.shownStatusNotifications.delete(\r\n                                    generalKey\r\n                                );\r\n                            }\r\n                        }\r\n                    } else if (notificationKey.startsWith(\"status-\")) {\r\n                        // Fallback for oldest format\r\n                        const withoutPrefix = notificationKey.substring(\r\n                            \"status-\".length\r\n                        );\r\n                        const lastDashIndex = withoutPrefix.lastIndexOf(\"-\");\r\n                        if (lastDashIndex !== -1) {\r\n                            const status = withoutPrefix.substring(\r\n                                lastDashIndex + 1\r\n                            );\r\n                            const branchElement = notificationEl.querySelector(\r\n                                \".repo-manager-notification-branch\"\r\n                            );\r\n                            if (branchElement) {\r\n                                const branch = branchElement.textContent;\r\n                                const generalKey = `${branch}:${status}`;\r\n                                this.shownStatusNotifications.delete(\r\n                                    generalKey\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Get the container to update stacking after removal\r\n                const container = notificationEl.parentNode;\r\n\r\n                // Use enhanced slide-out animation\r\n                notificationEl.style.animation =\r\n                    \"notificationSlideOut 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94) forwards\";\r\n                setTimeout(() => {\r\n                    if (notificationEl.parentNode) {\r\n                        notificationEl.parentNode.removeChild(notificationEl);\r\n\r\n                        // Update stacking for remaining notifications\r\n                        if (container) {\r\n                            this.updateNotificationStacking(container);\r\n                        }\r\n                    }\r\n                }, 400);\r\n            }\r\n        }\r\n\r\n        getGravatarUrl(email, size = 32) {\r\n            const hash = this.md5(email.toLowerCase().trim());\r\n            return `https://www.gravatar.com/avatar/${hash}?s=${size}&d=mp`;\r\n        }\r\n\r\n        md5(string) {\r\n            // Simple MD5 implementation for Gravatar\r\n            function md5cycle(x, k) {\r\n                let a = x[0],\r\n                    b = x[1],\r\n                    c = x[2],\r\n                    d = x[3];\r\n\r\n                a = ff(a, b, c, d, k[0], 7, -680876936);\r\n                d = ff(d, a, b, c, k[1], 12, -389564586);\r\n                c = ff(c, d, a, b, k[2], 17, 606105819);\r\n                b = ff(b, c, d, a, k[3], 22, -1044525330);\r\n                a = ff(a, b, c, d, k[4], 7, -176418897);\r\n                d = ff(d, a, b, c, k[5], 12, 1200080426);\r\n                c = ff(c, d, a, b, k[6], 17, -1473231341);\r\n                b = ff(b, c, d, a, k[7], 22, -45705983);\r\n                a = ff(a, b, c, d, k[8], 7, 1770035416);\r\n                d = ff(d, a, b, c, k[9], 12, -1958414417);\r\n                c = ff(c, d, a, b, k[10], 17, -42063);\r\n                b = ff(b, c, d, a, k[11], 22, -1990404162);\r\n                a = ff(a, b, c, d, k[12], 7, 1804603682);\r\n                d = ff(d, a, b, c, k[13], 12, -40341101);\r\n                c = ff(c, d, a, b, k[14], 17, -1502002290);\r\n                b = ff(b, c, d, a, k[15], 22, 1236535329);\r\n\r\n                a = gg(a, b, c, d, k[1], 5, -165796510);\r\n                d = gg(d, a, b, c, k[6], 9, -1069501632);\r\n                c = gg(c, d, a, b, k[11], 14, 643717713);\r\n                b = gg(b, c, d, a, k[0], 20, -373897302);\r\n                a = gg(a, b, c, d, k[5], 5, -701558691);\r\n                d = gg(d, a, b, c, k[10], 9, 38016083);\r\n                c = gg(c, d, a, b, k[15], 14, -660478335);\r\n                b = gg(b, c, d, a, k[4], 20, -405537848);\r\n                a = gg(a, b, c, d, k[9], 5, 568446438);\r\n                d = gg(d, a, b, c, k[14], 9, -1019803690);\r\n                c = gg(c, d, a, b, k[3], 14, -187363961);\r\n                b = gg(b, c, d, a, k[8], 20, 1163531501);\r\n                a = gg(a, b, c, d, k[13], 5, -1444681467);\r\n                d = gg(d, a, b, c, k[2], 9, -51403784);\r\n                c = gg(c, d, a, b, k[7], 14, 1735328473);\r\n                b = gg(b, c, d, a, k[12], 20, -1926607734);\r\n\r\n                a = hh(a, b, c, d, k[5], 4, -378558);\r\n                d = hh(d, a, b, c, k[8], 11, -2022574463);\r\n                c = hh(c, d, a, b, k[11], 16, 1839030562);\r\n                b = hh(b, c, d, a, k[14], 23, -35309556);\r\n                a = hh(a, b, c, d, k[1], 4, -1530992060);\r\n                d = hh(d, a, b, c, k[4], 11, 1272893353);\r\n                c = hh(c, d, a, b, k[7], 16, -155497632);\r\n                b = hh(b, c, d, a, k[10], 23, -1094730640);\r\n                a = hh(a, b, c, d, k[13], 4, 681279174);\r\n                d = hh(d, a, b, c, k[0], 11, -358537222);\r\n                c = hh(c, d, a, b, k[3], 16, -722521979);\r\n                b = hh(b, c, d, a, k[6], 23, 76029189);\r\n                a = hh(a, b, c, d, k[9], 4, -640364487);\r\n                d = hh(d, a, b, c, k[12], 11, -421815835);\r\n                c = hh(c, d, a, b, k[15], 16, 530742520);\r\n                b = hh(b, c, d, a, k[2], 23, -995338651);\r\n\r\n                a = ii(a, b, c, d, k[0], 6, -198630844);\r\n                d = ii(d, a, b, c, k[7], 10, 1126891415);\r\n                c = ii(c, d, a, b, k[14], 15, -1416354905);\r\n                b = ii(b, c, d, a, k[5], 21, -57434055);\r\n                a = ii(a, b, c, d, k[12], 6, 1700485571);\r\n                d = ii(d, a, b, c, k[3], 10, -1894986606);\r\n                c = ii(c, d, a, b, k[10], 15, -1051523);\r\n                b = ii(b, c, d, a, k[1], 21, -2054922799);\r\n                a = ii(a, b, c, d, k[8], 6, 1873313359);\r\n                d = ii(d, a, b, c, k[15], 10, -30611744);\r\n                c = ii(c, d, a, b, k[6], 15, -1560198380);\r\n                b = ii(b, c, d, a, k[13], 21, 1309151649);\r\n                a = ii(a, b, c, d, k[4], 6, -145523070);\r\n                d = ii(d, a, b, c, k[11], 10, -1120210379);\r\n                c = ii(c, d, a, b, k[2], 15, 718787259);\r\n                b = ii(b, c, d, a, k[9], 21, -343485551);\r\n\r\n                x[0] = add32(a, x[0]);\r\n                x[1] = add32(b, x[1]);\r\n                x[2] = add32(c, x[2]);\r\n                x[3] = add32(d, x[3]);\r\n            }\r\n\r\n            function cmn(q, a, b, x, s, t) {\r\n                a = add32(add32(a, q), add32(x, t));\r\n                return add32((a << s) | (a >>> (32 - s)), b);\r\n            }\r\n\r\n            function ff(a, b, c, d, x, s, t) {\r\n                return cmn((b & c) | (~b & d), a, b, x, s, t);\r\n            }\r\n\r\n            function gg(a, b, c, d, x, s, t) {\r\n                return cmn((b & d) | (c & ~d), a, b, x, s, t);\r\n            }\r\n\r\n            function hh(a, b, c, d, x, s, t) {\r\n                return cmn(b ^ c ^ d, a, b, x, s, t);\r\n            }\r\n\r\n            function ii(a, b, c, d, x, s, t) {\r\n                return cmn(c ^ (b | ~d), a, b, x, s, t);\r\n            }\r\n\r\n            function md51(s) {\r\n                const n = s.length;\r\n                const state = [1732584193, -271733879, -1732584194, 271733878];\r\n                let i;\r\n\r\n                for (i = 64; i <= s.length; i += 64) {\r\n                    md5cycle(state, md5blk(s.substring(i - 64, i)));\r\n                }\r\n\r\n                s = s.substring(i - 64);\r\n                const tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n                for (i = 0; i < s.length; i++) {\r\n                    tail[i >> 2] |= s.charCodeAt(i) << (i % 4 << 3);\r\n                }\r\n                tail[i >> 2] |= 0x80 << (i % 4 << 3);\r\n                if (i > 55) {\r\n                    md5cycle(state, tail);\r\n                    for (i = 0; i < 16; i++) tail[i] = 0;\r\n                }\r\n                tail[14] = n * 8;\r\n                md5cycle(state, tail);\r\n                return state;\r\n            }\r\n\r\n            function md5blk(s) {\r\n                const md5blks = [];\r\n                for (let i = 0; i < 64; i += 4) {\r\n                    md5blks[i >> 2] =\r\n                        s.charCodeAt(i) +\r\n                        (s.charCodeAt(i + 1) << 8) +\r\n                        (s.charCodeAt(i + 2) << 16) +\r\n                        (s.charCodeAt(i + 3) << 24);\r\n                }\r\n                return md5blks;\r\n            }\r\n\r\n            function add32(a, b) {\r\n                return (a + b) & 0xffffffff;\r\n            }\r\n\r\n            const hex_chr = \"0123456789abcdef\".split(\"\");\r\n            function rhex(n) {\r\n                let s = \"\",\r\n                    j = 0;\r\n                for (; j < 4; j++) {\r\n                    s +=\r\n                        hex_chr[(n >> (j * 8 + 4)) & 0x0f] +\r\n                        hex_chr[(n >> (j * 8)) & 0x0f];\r\n                }\r\n                return s;\r\n            }\r\n\r\n            function hex(x) {\r\n                let i;\r\n                for (i = 0; i < x.length; i++) {\r\n                    x[i] = rhex(x[i]);\r\n                }\r\n                return x.join(\"\");\r\n            }\r\n\r\n            return hex(md51(string));\r\n        }\r\n\r\n        escapeHtml(text) {\r\n            const div = document.createElement(\"div\");\r\n            div.textContent = text;\r\n            return div.innerHTML;\r\n        }\r\n\r\n        async makeAjaxRequest(action, data = {}) {\r\n            const formData = new FormData();\r\n            formData.append(\"action\", action);\r\n\r\n            const nonce = this.getNonce(action);\r\n            formData.append(\"nonce\", nonce);\r\n\r\n            // Add additional data\r\n            Object.keys(data).forEach((key) => {\r\n                formData.append(key, data[key]);\r\n            });\r\n\r\n            const ajaxUrl =\r\n                typeof WPGitManagerGlobal !== \"undefined\" &&\r\n                WPGitManagerGlobal?.ajaxurl\r\n                    ? WPGitManagerGlobal.ajaxurl\r\n                    : typeof ajaxurl !== \"undefined\"\r\n                    ? ajaxurl\r\n                    : null;\r\n\r\n            if (!ajaxUrl) {\r\n                throw new Error(\r\n                    \"AJAX URL not available. Please ensure the plugin is properly configured.\"\r\n                );\r\n            }\r\n\r\n            const response = await fetch(ajaxUrl, {\r\n                method: \"POST\",\r\n                credentials: \"same-origin\",\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const errorText = await response.text();\r\n                throw new Error(\r\n                    `HTTP error! status: ${response.status} - ${errorText}`\r\n                );\r\n            }\r\n\r\n            return await response.json();\r\n        }\r\n\r\n        getNonce(action) {\r\n            // Use the same pattern as the existing global JavaScript\r\n            return (\r\n                (typeof WPGitManagerGlobal !== \"undefined\" &&\r\n                    WPGitManagerGlobal?.action_nonces?.[action]) ||\r\n                (typeof WPGitManagerGlobal !== \"undefined\" &&\r\n                    WPGitManagerGlobal?.nonce) ||\r\n                (typeof gitManagerAjax !== \"undefined\" &&\r\n                    gitManagerAjax?.action_nonces?.[action]) ||\r\n                (typeof gitManagerAjax !== \"undefined\" &&\r\n                    gitManagerAjax?.nonce) ||\r\n                (typeof window.gitManagerNonce !== \"undefined\" &&\r\n                    window.gitManagerNonce?.nonce) ||\r\n                \"\"\r\n            );\r\n        }\r\n\r\n        startPolling() {\r\n            // Poll for new commits every ~8 hours; skip when page hidden\r\n            setInterval(() => {\r\n                if (document.hidden) return;\r\n                this.checkAllRepositoriesForUpdates();\r\n            }, 28800000);\r\n\r\n            // Clean up expired dismissals every 5 minutes\r\n            setInterval(() => {\r\n                this.cleanupExpiredDismissals();\r\n            }, 5 * 60 * 1000);\r\n\r\n            // Initial check after repositories are loaded\r\n            setTimeout(() => {\r\n                this.isInitializing = false; // Mark initialization as complete\r\n                this.checkAllRepositoriesForUpdates();\r\n            }, 1000); // Check after 1 second instead of waiting\r\n\r\n            // Refresh when tab becomes visible again\r\n            document.addEventListener(\"visibilitychange\", () => {\r\n                if (!document.hidden) {\r\n                    this.checkAllRepositoriesForUpdates();\r\n                }\r\n            });\r\n        }\r\n\r\n        clearAllBackgroundStatusNotifications() {\r\n            // Remove all background status notifications\r\n            const notifications = document.querySelectorAll(\r\n                \".repo-manager-notification\"\r\n            );\r\n            notifications.forEach((notification) => {\r\n                const notificationKey = notification.dataset.notificationKey;\r\n                if (\r\n                    notificationKey &&\r\n                    (notificationKey.startsWith(\"background-status-\") ||\r\n                        notificationKey.startsWith(\"background-status::\"))\r\n                ) {\r\n                    this.removeNotification(notification);\r\n                }\r\n            });\r\n        }\r\n\r\n        async checkAllRepositoriesForUpdates() {\r\n            if (this.repositories.length === 0 || this.isInitializing) return;\r\n\r\n            try {\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_bulk_repo_status\",\r\n                    { use_cache: \"1\" }\r\n                );\r\n\r\n                if (response.success && response.data) {\r\n                    for (const repoId in response.data) {\r\n                        const repoData = response.data[repoId];\r\n                        const repo = this.repositories.find(\r\n                            (r) => r.id === repoId\r\n                        );\r\n\r\n                        if (repo) {\r\n                            if (repoData.status_error) {\r\n                                // Handle status error\r\n                            } else {\r\n                                this.handleRepositoryStatusCheck(\r\n                                    repo,\r\n                                    repoData.status,\r\n                                    repoData.latest_commit\r\n                                );\r\n                            }\r\n\r\n                            if (repoData.commit_error) {\r\n                                // Handle commit error\r\n                            } else {\r\n                                this.handleRepositoryUpdate(\r\n                                    repo,\r\n                                    repoData.latest_commit\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                // Silent error handling\r\n            }\r\n        }\r\n\r\n        async checkRepositoryForUpdates(repo) {\r\n            try {\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_latest_commit\",\r\n                    {\r\n                        id: repo.id,\r\n                    }\r\n                );\r\n\r\n                if (response.success && response.data) {\r\n                    this.handleRepositoryUpdate(repo, response.data);\r\n                }\r\n            } catch (error) {\r\n                // Silent error handling\r\n            }\r\n        }\r\n\r\n        async checkRepositoryStatus(repo) {\r\n            try {\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_bulk_repo_status\",\r\n                    {}\r\n                );\r\n\r\n                if (\r\n                    response.success &&\r\n                    response.data &&\r\n                    response.data[repo.id]\r\n                ) {\r\n                    // The bulk method already includes latest commit information\r\n                    const repoData = response.data[repo.id];\r\n                    const commitData = repoData.latest_commit\r\n                        ? {\r\n                              hash: repoData.latest_commit.split(\"|\")[0],\r\n                              message: repoData.latest_commit.split(\"|\")[1],\r\n                              author: repoData.latest_commit.split(\"|\")[2],\r\n                              time: repoData.latest_commit.split(\"|\")[3],\r\n                          }\r\n                        : null;\r\n\r\n                    this.handleRepositoryStatusCheck(\r\n                        repo,\r\n                        repoData,\r\n                        commitData\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                // Silent error handling\r\n            }\r\n        }\r\n\r\n        handleRepositoryStatusCheck(repo, statusData, commitData = null) {\r\n            if (commitData && typeof commitData === \"string\") {\r\n                const parts = commitData.split(\"|\");\r\n                commitData = {\r\n                    hash: parts[0],\r\n                    message: parts[1],\r\n                    author: parts[2],\r\n                    date: parts[3],\r\n                };\r\n            }\r\n\r\n            // Handle both old string format and new object format\r\n            let behind = 0;\r\n            let ahead = 0;\r\n            let hasChanges = false;\r\n            let currentBranch = \"\";\r\n\r\n            if (typeof statusData === \"string\") {\r\n                // Old format - parse the string\r\n                const lines = statusData.split(\"\\n\");\r\n                lines.forEach((line) => {\r\n                    line = line.trim();\r\n                    if (line.startsWith(\"##\")) {\r\n                        if (line.includes(\"behind\")) {\r\n                            const match = line.match(/behind (\\d+)/);\r\n                            if (match) behind = parseInt(match[1]);\r\n                        }\r\n                        if (line.includes(\"ahead\")) {\r\n                            const match = line.match(/ahead (\\d+)/);\r\n                            if (match) ahead = parseInt(match[1]);\r\n                        }\r\n                        // Extract branch name\r\n                        const branchMatch = line.match(/## ([^.]*)/);\r\n                        if (branchMatch) currentBranch = branchMatch[1];\r\n                    } else if (line) {\r\n                        hasChanges = true;\r\n                    }\r\n                });\r\n            } else if (typeof statusData === \"object\") {\r\n                // New format - use object properties\r\n                behind = statusData.behind || 0;\r\n                ahead = statusData.ahead || 0;\r\n                hasChanges = statusData.hasChanges || false;\r\n                currentBranch = statusData.currentBranch || \"\";\r\n            }\r\n\r\n            // Determine status and show notification if needed\r\n            let status = \"clean\";\r\n            let message = \"\";\r\n            let type = \"info\";\r\n\r\n            if (behind > 0 && ahead > 0) {\r\n                status = \"diverged\";\r\n                message = `${repo.name}: ${__(\r\n                    \"Branch has diverged from remote. Manual merge needed.\",\r\n                    \"repo-manager\"\r\n                )}`;\r\n                type = \"error\";\r\n            } else if (behind > 0) {\r\n                status = \"behind\";\r\n                message = `${repo.name}: ${__(\r\n                    \"Branch is behind remote. Pull needed.\",\r\n                    \"repo-manager\"\r\n                )}`;\r\n                type = \"warning\";\r\n            } else if (ahead > 0) {\r\n                status = \"ahead\";\r\n                message = `${repo.name}: ${__(\r\n                    \"Branch is ahead of remote. Push needed.\",\r\n                    \"repo-manager\"\r\n                )}`;\r\n                type = \"info\";\r\n            }\r\n\r\n            // If repository status is now clean (resolved externally or branch changed),\r\n            // clear any previously shown status notifications for this repository\r\n            if (status === \"clean\") {\r\n                this.clearStatusNotification(repo.id);\r\n            }\r\n\r\n            // Show notification only for behind or diverged; skip ahead (own commits)\r\n            if (\r\n                (status === \"behind\" ||\r\n                    status === \"diverged\" ||\r\n                    status === \"ahead\") &&\r\n                message\r\n            ) {\r\n                // Create unique keys based on branch and status, not just repo and status\r\n                const backgroundNotificationKey = `background-status::${repo.id}::${currentBranch}::${status}`;\r\n                const manualNotificationKey = `status-${repo.id}-${currentBranch}-${status}`;\r\n\r\n                // Also create a general key for this specific branch-status combination\r\n                const generalNotificationKey = `${currentBranch}:${status}`;\r\n\r\n                // Check if we've already shown this background notification\r\n                if (\r\n                    !this.shownStatusNotifications.has(\r\n                        backgroundNotificationKey\r\n                    )\r\n                ) {\r\n                    // Also check if there's already a manual notification for this status\r\n                    // If there is, don't show the background notification to avoid duplicates\r\n                    if (\r\n                        this.shownStatusNotifications.has(manualNotificationKey)\r\n                    ) {\r\n                        return;\r\n                    }\r\n\r\n                    // Check if this notification should be dismissed based on user preferences\r\n                    if (this.shouldDismissNotification(currentBranch, status)) {\r\n                        return;\r\n                    }\r\n\r\n                    // Check if a similar notification is already shown\r\n                    if (\r\n                        this.isSimilarNotificationShown(currentBranch, status)\r\n                    ) {\r\n                        return;\r\n                    }\r\n\r\n                    // Enhance message with commit counts\r\n                    let enhancedMessage = message;\r\n                    if (behind > 0) {\r\n                        enhancedMessage += ` (${behind} ${\r\n                            behind === 1\r\n                                ? __(\"commit\", \"repo-manager\")\r\n                                : __(\"commits\", \"repo-manager\")\r\n                        } ${__(\"behind\", \"repo-manager\")})`;\r\n                    }\r\n                    if (ahead > 0) {\r\n                        enhancedMessage += ` (${ahead} ${\r\n                            ahead === 1\r\n                                ? __(\"commit\", \"repo-manager\")\r\n                                : __(\"commits\", \"repo-manager\")\r\n                        } ${__(\"ahead\", \"repo-manager\")})`;\r\n                    }\r\n\r\n                    // Add latest commit information if available\r\n                    if (\r\n                        commitData &&\r\n                        (commitData.author_name || commitData.author)\r\n                    ) {\r\n                        const authorName =\r\n                            commitData.author_name || commitData.author;\r\n                        enhancedMessage += `\\n${__(\r\n                            \"Latest commit:\",\r\n                            \"repo-manager\"\r\n                        )} ${authorName}: ${commitData.subject}`;\r\n                    }\r\n\r\n                    // Check if notifications are enabled before showing status notification\r\n                    if (!this.areNotificationsEnabled()) {\r\n                        return;\r\n                    }\r\n\r\n                    this.showNotification(enhancedMessage, type, {\r\n                        repo_name: repo.name,\r\n                        repo_id: repo.id,\r\n                        branch: currentBranch,\r\n                        status: status,\r\n                        isStatusNotification: true,\r\n                        notificationKey: backgroundNotificationKey,\r\n                        isBackgroundCheck: true,\r\n                        // Include commit data for avatar\r\n                        author: commitData ? commitData.author_name : null,\r\n                        author_email: commitData\r\n                            ? commitData.author_email\r\n                            : null,\r\n                        gravatar_url: commitData\r\n                            ? commitData.gravatar_url\r\n                            : null,\r\n                        has_avatar: commitData ? commitData.has_avatar : false,\r\n                        behind: behind,\r\n                        ahead: ahead,\r\n                        latest_commit: commitData,\r\n                    });\r\n\r\n                    // Mark this notification as shown\r\n                    this.shownStatusNotifications.add(\r\n                        backgroundNotificationKey\r\n                    );\r\n\r\n                    // Also track the general branch-status combination to prevent duplicates\r\n                    this.shownStatusNotifications.add(generalNotificationKey);\r\n                }\r\n            }\r\n\r\n            // Update status indicator if this is the currently selected repository\r\n            if (this.currentRepo && this.currentRepo.id === repo.id) {\r\n                this.updateStatusIndicator(statusData);\r\n            }\r\n        }\r\n\r\n        handleRepositoryUpdate(repo, commitData) {\r\n            if (!commitData) return;\r\n\r\n            let latestCommitHash = \"\";\r\n            if (typeof commitData === \"string\") {\r\n                latestCommitHash = commitData.split(\" \")[0];\r\n            } else if (typeof commitData === \"object\" && commitData.hash) {\r\n                latestCommitHash = commitData.hash;\r\n            }\r\n\r\n            if (\r\n                this.latestCommits[repo.id] &&\r\n                this.latestCommits[repo.id] !== latestCommitHash\r\n            ) {\r\n                // ... existing code ...\r\n            }\r\n\r\n            this.latestCommits[repo.id] = latestCommitHash;\r\n        }\r\n\r\n        formatUpdateMessage(data) {\r\n            if (data.author_name && data.subject) {\r\n                return `${data.author_name}: ${data.subject}`;\r\n            } else if (data.author && data.subject) {\r\n                return `${data.author}: ${data.subject}`;\r\n            }\r\n            return __(\"New commits detected on remote!\", \"repo-manager\");\r\n        }\r\n\r\n        async handleNotificationPull(repoId, notificationEl) {\r\n            try {\r\n                // Disable the button and show loading state\r\n                const pullBtn = notificationEl.querySelector(\r\n                    \".repo-manager-notification-btn-pull\"\r\n                );\r\n                if (pullBtn) {\r\n                    pullBtn.disabled = true;\r\n                    pullBtn.innerHTML = `\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"animate-spin\"><path d=\"M12 2v4\"/><path d=\"m16.2 7.8 2.9-2.9\"/><path d=\"M18 12h4\"/><path d=\"m16.2 16.2 2.9 2.9\"/><path d=\"M12 18v4\"/><path d=\"m4.9 19.1 2.9-2.9\"/><path d=\"M2 12h4\"/><path d=\"m4.9 4.9 2.9 2.9\"/></svg>\r\n                        ${__(\"Pulling...\", \"repo-manager\")}\r\n                    `;\r\n                }\r\n\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_pull\",\r\n                    {\r\n                        id: repoId,\r\n                    }\r\n                );\r\n\r\n                if (response.success) {\r\n                    this.showSuccess(\r\n                        `${__(\r\n                            \"Repository pulled successfully\",\r\n                            \"repo-manager\"\r\n                        )}`\r\n                    );\r\n                    // Clear status notifications for this repository\r\n                    this.clearStatusNotification(repoId);\r\n                    // Remove the notification\r\n                    this.removeNotification(notificationEl);\r\n                } else {\r\n                    this.showError(\r\n                        `${\r\n                            response.data?.message ||\r\n                            response.data ||\r\n                            __(\"Pull failed\", \"repo-manager\")\r\n                        }`\r\n                    );\r\n                    // Re-enable the button\r\n                    if (pullBtn) {\r\n                        pullBtn.disabled = false;\r\n                        pullBtn.innerHTML = `\r\n                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                <polyline points=\"7,10 12,15 17,10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                            </svg>\r\n                            ${__(\"Pull\", \"repo-manager\")}\r\n                        `;\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                this.showError(__(\"Pull operation failed\", \"repo-manager\"));\r\n                // Re-enable the button\r\n                const pullBtn = notificationEl.querySelector(\r\n                    \".repo-manager-notification-btn-pull\"\r\n                );\r\n                if (pullBtn) {\r\n                    pullBtn.disabled = false;\r\n                    pullBtn.innerHTML = `\r\n                        <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                            <polyline points=\"7,10 12,15 17,10\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                            <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                        </svg>\r\n                        ${__(\"Pull\", \"repo-manager\")}\r\n                    `;\r\n                }\r\n            }\r\n        }\r\n\r\n        async handleNotificationPush(repoId, notificationEl) {\r\n            try {\r\n                // Disable the button and show loading state\r\n                const pushBtn = notificationEl.querySelector(\r\n                    \".repo-manager-notification-btn-push\"\r\n                );\r\n                if (pushBtn) {\r\n                    pushBtn.disabled = true;\r\n                    pushBtn.innerHTML = `\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"animate-spin\"><path d=\"M12 2v4\"/><path d=\"m16.2 7.8 2.9-2.9\"/><path d=\"M18 12h4\"/><path d=\"m16.2 16.2 2.9 2.9\"/><path d=\"M12 18v4\"/><path d=\"m4.9 19.1 2.9-2.9\"/><path d=\"M2 12h4\"/><path d=\"m4.9 4.9 2.9 2.9\"/></svg>\r\n                        ${__(\"Pushing...\", \"repo-manager\")}\r\n                    `;\r\n                }\r\n\r\n                const response = await this.makeAjaxRequest(\r\n                    \"git_manager_repo_push\",\r\n                    {\r\n                        id: repoId,\r\n                    }\r\n                );\r\n\r\n                if (response.success) {\r\n                    this.showSuccess(\r\n                        `${__(\r\n                            \"Repository pushed successfully\",\r\n                            \"repo-manager\"\r\n                        )}`\r\n                    );\r\n                    // Clear status notifications for this repository\r\n                    this.clearStatusNotification(repoId);\r\n                    // Remove the notification\r\n                    this.removeNotification(notificationEl);\r\n                } else {\r\n                    this.showError(\r\n                        `${\r\n                            response.data?.message ||\r\n                            response.data ||\r\n                            __(\"Push failed\", \"repo-manager\")\r\n                        }`\r\n                    );\r\n                    // Re-enable the button\r\n                    if (pushBtn) {\r\n                        pushBtn.disabled = false;\r\n                        pushBtn.innerHTML = `\r\n                            <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                                <path d=\"M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                <polyline points=\"17,8 12,3 7,8\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                                <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                            </svg>\r\n                            ${__(\"Push\", \"repo-manager\")}\r\n                        `;\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                this.showError(__(\"Push operation failed\", \"repo-manager\"));\r\n                // Re-enable the button\r\n                const pushBtn = notificationEl.querySelector(\r\n                    \".repo-manager-notification-btn-push\"\r\n                );\r\n                if (pushBtn) {\r\n                    pushBtn.disabled = false;\r\n                    pushBtn.innerHTML = `\r\n                        <svg width=\"14\" height=\"14\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M21 15V19A2 2 0 0 1 19 21H5A2 2 0 0 1 3 19V15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                            <polyline points=\"17,8 12,3 7,8\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                            <line x1=\"12\" y1=\"3\" x2=\"12\" y2=\"15\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/>\r\n                        </svg>\r\n                        ${__(\"Push\", \"repo-manager\")}\r\n                    `;\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Load notification dismissals from localStorage\r\n         */\r\n        loadNotificationDismissals() {\r\n            try {\r\n                const stored = localStorage.getItem(\r\n                    \"repo-manager-notification-dismissals\"\r\n                );\r\n                const dismissals = stored ? JSON.parse(stored) : {};\r\n                return dismissals;\r\n            } catch (error) {\r\n                return {};\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Save notification dismissals to localStorage\r\n         */\r\n        saveNotificationDismissals() {\r\n            try {\r\n                const dataToSave = JSON.stringify(this.notificationDismissals);\r\n                localStorage.setItem(\r\n                    \"repo-manager-notification-dismissals\",\r\n                    dataToSave\r\n                );\r\n            } catch (error) {\r\n                // Silent error handling\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Check if notification should be dismissed based on user preferences\r\n         */\r\n        shouldDismissNotification(branchName, statusType) {\r\n            // Normalize strings for consistency\r\n            const normalizedBranchName = (branchName || \"\")\r\n                .trim()\r\n                .toLowerCase();\r\n            const normalizedStatusType = (statusType || \"\")\r\n                .trim()\r\n                .toLowerCase();\r\n            const key = `${normalizedBranchName}:${normalizedStatusType}`;\r\n\r\n            // Session (hide just once) dismissals: hide until refresh\r\n            if (this.sessionDismissals.has(key)) {\r\n                return true;\r\n            }\r\n\r\n            const dismissal = this.notificationDismissals[key];\r\n\r\n            if (!dismissal) {\r\n                return false;\r\n            }\r\n\r\n            const now = Math.floor(Date.now() / 1000);\r\n\r\n            if (dismissal.ignoreUntil === Infinity) {\r\n                return true; // Permanent dismissal\r\n            }\r\n\r\n            if (dismissal.ignoreUntil > now) {\r\n                return true; // Still within dismissal period\r\n            }\r\n\r\n            // Dismissal period has expired, remove it\r\n            delete this.notificationDismissals[key];\r\n            this.saveNotificationDismissals();\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Create and show dismissal options popup\r\n         */\r\n        showDismissalOptionsPopup(notificationEl, branchName, statusType) {\r\n            // Create popup overlay\r\n            const overlay = document.createElement(\"div\");\r\n            overlay.className = \"repo-manager-dismissal-overlay\";\r\n            overlay.style.cssText = `\r\n                position: fixed;\r\n                top: 0;\r\n                left: 0;\r\n                width: 100%;\r\n                height: 100%;\r\n                background: rgba(0, 0, 0, 0.5);\r\n                z-index: 9999999;\r\n                display: flex;\r\n                align-items: center;\r\n                justify-content: center;\r\n            `;\r\n\r\n            // Create popup dialog\r\n            const popup = document.createElement(\"div\");\r\n            popup.className = \"repo-manager-dismissal-popup\";\r\n            popup.style.cssText = `\r\n                background: white;\r\n                border-radius: 8px;\r\n                padding: 20px;\r\n                max-width: 400px;\r\n                width: 90%;\r\n                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);\r\n                animation: slideInDown 0.3s ease;\r\n            `;\r\n\r\n            // Add CSS animations\r\n            const style = document.createElement(\"style\");\r\n            style.textContent = `\r\n                @keyframes slideInDown {\r\n                    from {\r\n                        opacity: 0;\r\n                        transform: translateY(-20px);\r\n                    }\r\n                    to {\r\n                        opacity: 1;\r\n                        transform: translateY(0);\r\n                    }\r\n                }\r\n                @keyframes fadeOut {\r\n                    from {\r\n                        opacity: 1;\r\n                    }\r\n                    to {\r\n                        opacity: 0;\r\n                    }\r\n                }\r\n            `;\r\n            document.head.appendChild(style);\r\n\r\n            // Create popup content\r\n            popup.innerHTML = `\r\n                <div style=\"margin-bottom: 15px;\">\r\n                    <h3 style=\"margin: 0 0 10px 0; color: #333; font-size: 16px;\">\r\n                        ${__(\"Notification Dismissal Options\", \"repo-manager\")}\r\n                    </h3>\r\n                    <p style=\"margin: 0; color: #666; font-size: 14px;\">\r\n                        ${__(\r\n                            \"Choose how long to hide this notification:\",\r\n                            \"repo-manager\"\r\n                        )}\r\n                    </p>\r\n                </div>\r\n                <div style=\"display: flex; flex-direction: column; gap: 8px;\">\r\n                    <button class=\"repo-manager-dismissal-option\" data-action=\"once\" style=\"\r\n                        padding: 10px 15px;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 6px;\r\n                        background: white;\r\n                        cursor: pointer;\r\n                        text-align: left;\r\n                        transition: all 0.2s;\r\n                        font-size: 14px;\r\n                    \">\r\n                        <strong>${__(\"Hide just once\", \"repo-manager\")}</strong>\r\n                        <br><span style=\"color: #666; font-size: 12px;\">${__(\r\n                            \"Hide until you refresh the page\",\r\n                            \"repo-manager\"\r\n                        )}</span>\r\n                    </button>\r\n                    <button class=\"repo-manager-dismissal-option\" data-action=\"permanent\" style=\"\r\n                        padding: 10px 15px;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 6px;\r\n                        background: white;\r\n                        cursor: pointer;\r\n                        text-align: left;\r\n                        transition: all 0.2s;\r\n                        font-size: 14px;\r\n                    \">\r\n                        <strong>${__(\r\n                            \"Don't show for this status again\",\r\n                            \"repo-manager\"\r\n                        )}</strong>\r\n                        <br><span style=\"color: #666; font-size: 12px;\">${__(\r\n                            \"Permanently hide notifications for this branch and status\",\r\n                            \"repo-manager\"\r\n                        )}</span>\r\n                    </button>\r\n                    <button class=\"repo-manager-dismissal-option\" data-action=\"10min\" style=\"\r\n                        padding: 10px 15px;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 6px;\r\n                        background: white;\r\n                        cursor: pointer;\r\n                        text-align: left;\r\n                        transition: all 0.2s;\r\n                        font-size: 14px;\r\n                    \">\r\n                        <strong>${__(\r\n                            \"Hide for 10 minutes\",\r\n                            \"repo-manager\"\r\n                        )}</strong>\r\n                        <br><span style=\"color: #666; font-size: 12px;\">${__(\r\n                            \"Notifications will reappear after 10 minutes\",\r\n                            \"repo-manager\"\r\n                        )}</span>\r\n                    </button>\r\n                    <button class=\"repo-manager-dismissal-option\" data-action=\"1day\" style=\"\r\n                        padding: 10px 15px;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 6px;\r\n                        background: white;\r\n                        cursor: pointer;\r\n                        text-align: left;\r\n                        transition: all 0.2s;\r\n                        font-size: 14px;\r\n                    \">\r\n                        <strong>${__(\"Hide for 1 day\", \"repo-manager\")}</strong>\r\n                        <br><span style=\"color: #666; font-size: 12px;\">${__(\r\n                            \"Notifications will reappear after 24 hours\",\r\n                            \"repo-manager\"\r\n                        )}</span>\r\n                    </button>\r\n                    <button class=\"repo-manager-dismissal-cancel\" style=\"\r\n                        padding: 10px 15px;\r\n                        border: 1px solid #ddd;\r\n                        border-radius: 6px;\r\n                        background: #f8f9fa;\r\n                        cursor: pointer;\r\n                        text-align: center;\r\n                        transition: all 0.2s;\r\n                        font-size: 14px;\r\n                        margin-top: 10px;\r\n                    \">\r\n                        ${__(\"Cancel\", \"repo-manager\")}\r\n                    </button>\r\n                </div>\r\n            `;\r\n\r\n            // Add hover effects\r\n            const options = popup.querySelectorAll(\r\n                \".repo-manager-dismissal-option\"\r\n            );\r\n            options.forEach((option) => {\r\n                option.addEventListener(\"mouseenter\", () => {\r\n                    option.style.backgroundColor = \"#f8f9fa\";\r\n                    option.style.borderColor = \"#007cba\";\r\n                });\r\n                option.addEventListener(\"mouseleave\", () => {\r\n                    option.style.backgroundColor = \"white\";\r\n                    option.style.borderColor = \"#ddd\";\r\n                });\r\n            });\r\n\r\n            // Add event listeners\r\n            options.forEach((option) => {\r\n                option.addEventListener(\"click\", () => {\r\n                    const action = option.dataset.action;\r\n                    this.handleDismissalAction(\r\n                        action,\r\n                        branchName,\r\n                        statusType,\r\n                        notificationEl\r\n                    );\r\n                    this.closeDismissalPopup(overlay);\r\n                });\r\n            });\r\n\r\n            const cancelBtn = popup.querySelector(\r\n                \".repo-manager-dismissal-cancel\"\r\n            );\r\n            cancelBtn.addEventListener(\"click\", () => {\r\n                this.closeDismissalPopup(overlay);\r\n            });\r\n\r\n            // Close on overlay click\r\n            overlay.addEventListener(\"click\", (e) => {\r\n                if (e.target === overlay) {\r\n                    this.closeDismissalPopup(overlay);\r\n                }\r\n            });\r\n\r\n            // Close on Escape key\r\n            const handleEscape = (e) => {\r\n                if (e.key === \"Escape\") {\r\n                    this.closeDismissalPopup(overlay);\r\n                    document.removeEventListener(\"keydown\", handleEscape);\r\n                }\r\n            };\r\n            document.addEventListener(\"keydown\", handleEscape);\r\n\r\n            overlay.appendChild(popup);\r\n            document.body.appendChild(overlay);\r\n\r\n            // Focus first option for accessibility\r\n            setTimeout(() => {\r\n                const firstOption = popup.querySelector(\r\n                    \".repo-manager-dismissal-option\"\r\n                );\r\n                if (firstOption) {\r\n                    firstOption.focus();\r\n                }\r\n            }, 100);\r\n        }\r\n\r\n        /**\r\n         * Handle dismissal action selection\r\n         */\r\n        handleDismissalAction(action, branchName, statusType, notificationEl) {\r\n            // Normalize strings for consistency\r\n            const normalizedBranchName = (branchName || \"\")\r\n                .trim()\r\n                .toLowerCase();\r\n            const normalizedStatusType = (statusType || \"\")\r\n                .trim()\r\n                .toLowerCase();\r\n            const key = `${normalizedBranchName}:${normalizedStatusType}`;\r\n            const now = Math.floor(Date.now() / 1000);\r\n\r\n            let ignoreUntil;\r\n\r\n            switch (action) {\r\n                case \"once\":\r\n                    // Session-only: store in memory Set, not persisted\r\n                    this.sessionDismissals.add(key);\r\n                    // Remove just this notification without saving to storage\r\n                    this.removeNotification(notificationEl);\r\n                    // Informational toast\r\n                    this.showNotification(\r\n                        __(\"Notification hidden until refresh\", \"repo-manager\"),\r\n                        \"info\",\r\n                        {\r\n                            repo_name: notificationEl.querySelector(\r\n                                \".repo-manager-notification-repo\"\r\n                            )?.textContent,\r\n                            branch: branchName,\r\n                        }\r\n                    );\r\n                    return;\r\n                case \"permanent\":\r\n                    ignoreUntil = Infinity;\r\n                    break;\r\n                case \"10min\":\r\n                    ignoreUntil = now + 10 * 60; // 10 minutes\r\n                    break;\r\n                case \"1day\":\r\n                    ignoreUntil = now + 24 * 60 * 60; // 24 hours\r\n                    break;\r\n                default:\r\n                    return;\r\n            }\r\n\r\n            // Save dismissal preference\r\n            this.notificationDismissals[key] = {\r\n                ignoreUntil: ignoreUntil,\r\n                dismissedAt: now,\r\n                action: action,\r\n            };\r\n            this.saveNotificationDismissals();\r\n\r\n            // Remove the notification\r\n            this.removeNotification(notificationEl);\r\n\r\n            // Show confirmation message\r\n            let message;\r\n            switch (action) {\r\n                case \"permanent\":\r\n                    message = __(\r\n                        \"Notification dismissed permanently\",\r\n                        \"repo-manager\"\r\n                    );\r\n                    break;\r\n                case \"10min\":\r\n                    message = __(\r\n                        \"Notification hidden for 10 minutes\",\r\n                        \"repo-manager\"\r\n                    );\r\n                    break;\r\n                case \"1day\":\r\n                    message = __(\r\n                        \"Notification hidden for 1 day\",\r\n                        \"repo-manager\"\r\n                    );\r\n                    break;\r\n            }\r\n\r\n            this.showNotification(message, \"info\", {\r\n                repo_name: notificationEl.querySelector(\r\n                    \".repo-manager-notification-repo\"\r\n                )?.textContent,\r\n                branch: branchName,\r\n            });\r\n        }\r\n\r\n        /**\r\n         * Close dismissal popup\r\n         */\r\n        closeDismissalPopup(overlay) {\r\n            if (overlay && overlay.parentNode) {\r\n                overlay.style.animation = \"fadeOut 0.2s ease forwards\";\r\n                setTimeout(() => {\r\n                    if (overlay.parentNode) {\r\n                        overlay.parentNode.removeChild(overlay);\r\n                    }\r\n                }, 200);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Clean up expired dismissals\r\n         */\r\n        cleanupExpiredDismissals() {\r\n            const now = Math.floor(Date.now() / 1000);\r\n            let hasChanges = false;\r\n\r\n            Object.keys(this.notificationDismissals).forEach((key) => {\r\n                const dismissal = this.notificationDismissals[key];\r\n                if (\r\n                    dismissal.ignoreUntil !== Infinity &&\r\n                    dismissal.ignoreUntil <= now\r\n                ) {\r\n                    delete this.notificationDismissals[key];\r\n                    hasChanges = true;\r\n                }\r\n            });\r\n\r\n            if (hasChanges) {\r\n                this.saveNotificationDismissals();\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Get dismissal statistics\r\n         */\r\n        getDismissalStats() {\r\n            const now = Math.floor(Date.now() / 1000);\r\n            const stats = {\r\n                total: Object.keys(this.notificationDismissals).length,\r\n                permanent: 0,\r\n                temporary: 0,\r\n                expired: 0,\r\n            };\r\n\r\n            Object.values(this.notificationDismissals).forEach((dismissal) => {\r\n                if (dismissal.ignoreUntil === Infinity) {\r\n                    stats.permanent++;\r\n                } else if (dismissal.ignoreUntil > now) {\r\n                    stats.temporary++;\r\n                } else {\r\n                    stats.expired++;\r\n                }\r\n            });\r\n\r\n            return stats;\r\n        }\r\n\r\n        /**\r\n         * Check if a similar notification is already shown\r\n         */\r\n        isSimilarNotificationShown(branchName, statusType) {\r\n            // Check for exact branch-status combination\r\n            const generalKey = `${branchName}:${statusType}`;\r\n            if (this.shownStatusNotifications.has(generalKey)) {\r\n                return true;\r\n            }\r\n\r\n            // Check for any notification with the same branch and status\r\n            for (const key of this.shownStatusNotifications) {\r\n                if (key.includes(branchName) && key.includes(statusType)) {\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            return false;\r\n        }\r\n\r\n        /**\r\n         * Get all active notifications\r\n         */\r\n        getActiveNotifications() {\r\n            const notifications = document.querySelectorAll(\r\n                \".repo-manager-notification\"\r\n            );\r\n            const activeNotifications = [];\r\n\r\n            notifications.forEach((notification) => {\r\n                const notificationKey = notification.dataset.notificationKey;\r\n                const branchElement = notification.querySelector(\r\n                    \".repo-manager-notification-branch\"\r\n                );\r\n                const branch = branchElement\r\n                    ? branchElement.textContent\r\n                    : \"unknown\";\r\n\r\n                activeNotifications.push({\r\n                    element: notification,\r\n                    key: notificationKey,\r\n                    branch: branch,\r\n                    isShown: this.shownStatusNotifications.has(notificationKey),\r\n                });\r\n            });\r\n\r\n            return activeNotifications;\r\n        }\r\n\r\n        /**\r\n         * Check if notifications are enabled\r\n         * @returns {boolean}\r\n         */\r\n        createNotificationContainer() {\r\n            // Try to find the floating widget first\r\n            const floatingWidget = document.getElementById(\r\n                \"repo-manager-floating-widget\"\r\n            );\r\n            if (!floatingWidget) {\r\n                return null;\r\n            }\r\n\r\n            // Create notification container\r\n            const container = document.createElement(\"div\");\r\n            container.id = \"repo-manager-notification-container\";\r\n            container.className = \"repo-manager-notification-container\";\r\n            container.style.cssText = `\r\n                position: fixed;\r\n                top: 20px;\r\n                right: 20px;\r\n                z-index: 999999;\r\n                max-width: 400px;\r\n                pointer-events: none;\r\n            `;\r\n\r\n            // Append to body or floating widget\r\n            document.body.appendChild(container);\r\n            return container;\r\n        }\r\n\r\n        areNotificationsEnabled() {\r\n            const floatingWidget = document.getElementById(\r\n                \"repo-manager-floating-widget\"\r\n            );\r\n            // If widget doesn't exist yet, assume notifications are enabled\r\n            // This prevents blocking notifications during initialization\r\n            if (!floatingWidget) {\r\n                return true;\r\n            }\r\n            return floatingWidget.dataset.notificationsEnabled === \"1\";\r\n        }\r\n    }\r\n\r\n    // Initialize the floating widget when DOM is ready\r\n    if (document.readyState === \"loading\") {\r\n        document.addEventListener(\"DOMContentLoaded\", () => {\r\n            new GitManagerFloatingWidget();\r\n        });\r\n    } else {\r\n        new GitManagerFloatingWidget();\r\n    }\r\n})();\r\n"],"names":[],"sourceRoot":""}