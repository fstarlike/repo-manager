!function(){function e(e,t=""){return"undefined"!=typeof WPGitManagerGlobal&&WPGitManagerGlobal.translations&&WPGitManagerGlobal.translations[e]?WPGitManagerGlobal.translations[e]:t}class t{constructor(){this.currentRepo=null,this.detailsRequestSeq=0,this.detailsAbortController=null,this._repoListPoller=null,this._repoDetailsPoller=null,this._lastRepoListSignature=null,this._lastRepoData={},this.modals=new Map,this.notifications=[],this.directorySelectorTarget="#add-repo-path",this.theme=this.getStoredTheme(),this.urlAutofillTimer=null,this.init()}init(){try{if("undefined"==typeof gitManagerAjax)return;this.setupEventListeners(),this.setupTheme(),this.ensureProperDisplayStates(),this.loadRepositories(),this.setupKeyboardShortcuts(),this.setupAnimations(),setTimeout(()=>{this.ensureButtonFunctionality()},100),setInterval(()=>{this.ensureButtonFunctionality()},5e3),this.startLiveUpdates(),setTimeout(()=>{const e=document.getElementById("gm-commands-modal-overlay"),t=document.getElementById("gm-commands-close-btn"),n=document.getElementById("gm-commands-dismiss-btn");if(e){const o=()=>e.remove();t&&(t.onclick=o),n&&(n.onclick=o),e.addEventListener("click",t=>{t.target===e&&o()}),window.addEventListener("keydown",e=>{"Escape"===e.key&&o()},{once:!0})}},50)}catch(e){}}setupEventListeners(){document.addEventListener("click",e=>this.handleGlobalClick(e)),document.addEventListener("keydown",e=>this.handleGlobalKeydown(e)),window.addEventListener("resize",this.debounce(()=>this.handleResize(),250)),document.addEventListener("submit",e=>this.handleFormSubmit(e)),document.addEventListener("click",e=>{e.target.classList.contains("git-modal-overlay")&&this.closeModal(e.target.dataset.modalId)})}handleGlobalClick(e){const t=e.target,n=t.closest(".git-clone-btn, .git-sidebar-add-btn");if(n)return e.preventDefault(),e.stopPropagation(),n.style.transform="scale(0.95)",setTimeout(()=>{n.style.transform=""},150),void this.showAddRepositorySection();if(t.matches(".git-troubleshoot-btn"))return e.preventDefault(),void this.showTroubleshooting();if(t.closest(".git-theme-switcher"))return e.preventDefault(),void this.toggleTheme();const o=t.closest(".git-action-btn");if(o){const t=o.dataset.action;if(t)return e.preventDefault(),void this.handleAction(t,o)}if(t.matches(".git-modal-close")){e.preventDefault();const n=t.closest(".git-modal-overlay");return void(n&&this.closeModal(n.dataset.modalId))}if(t.matches(".git-repo-tab"))return e.preventDefault(),void this.switchTab(t.dataset.tab);if(t.closest(".git-repo-card")&&!t.matches("button")&&!t.closest("button")){const e=t.closest(".git-repo-card").dataset.repoId;return void this.selectRepository(e)}if(t.matches("#browse-path-btn"))return e.preventDefault(),void this.browsePath(this.directorySelectorTarget);if(t.matches("#cancel-clone-btn"))return e.preventDefault(),void this.closeModal("clone");if(t.matches("#back-to-welcome"))return e.preventDefault(),void this.hideAddRepositorySection();if(t.matches("#cancel-add-repo"))return e.preventDefault(),void this.hideAddRepositorySection();if(t.matches("#cancel-directory-selector-btn"))return e.preventDefault(),void this.closeModal("directory-selector");if(t.closest(".directory-item.selectable")){const n=t.closest(".directory-item.selectable").dataset.directoryPath;if(n)return e.preventDefault(),void this.selectDirectory(n)}}handleGlobalKeydown(e){"Escape"===e.key&&this.closeAllModals(),(e.ctrlKey||e.metaKey)&&"n"===e.key&&(e.preventDefault(),this.showCloneModal()),(e.ctrlKey||e.metaKey)&&"k"===e.key&&(e.preventDefault(),this.focusSearch()),(e.ctrlKey||e.metaKey)&&"t"===e.key&&(e.preventDefault(),this.toggleTheme())}handleFormSubmit(e){const t=e.target;"clone-form"===t.id?(e.preventDefault(),this.handleCloneSubmit(t)):"add-repo-form"===t.id&&(e.preventDefault(),this.handleAddRepositorySubmit(t))}handleResize(){this.modals.forEach(e=>{e.isOpen&&this.positionModal(e)})}setupKeyboardShortcuts(){document.querySelectorAll(".git-clone-btn").forEach(e=>{e.title=WPGitManagerGlobal.translations.addRepositoryTooltip}),document.querySelectorAll(".git-theme-switcher").forEach(e=>{e.title=WPGitManagerGlobal.translations.toggleThemeTooltip})}ensureButtonFunctionality(){document.querySelectorAll(".git-clone-btn, .git-sidebar-add-btn").forEach(e=>{e.style.pointerEvents="auto",e.style.cursor="pointer",e.style.position="relative",e.style.zIndex="10";const t=e.cloneNode(!0);e.parentNode.replaceChild(t,e),t.addEventListener("mouseenter",()=>{t.style.transform="translateY(-1px)"}),t.addEventListener("mouseleave",()=>{t.style.transform=""}),t.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),this.showAddRepositorySection()})})}setupAnimations(){const e=new IntersectionObserver(e=>{e.forEach(e=>{e.isIntersecting&&e.target.classList.add("animate-in")})},{threshold:.1});document.querySelectorAll(".git-repo-card, .repo-info-item").forEach(t=>{e.observe(t)})}setupTheme(){document.documentElement.setAttribute("data-theme",this.theme),this.updateThemeUI()}getStoredTheme(){return localStorage.getItem("repo-manager-theme")||"light"}toggleTheme(){this.theme="light"===this.theme?"dark":"light",localStorage.setItem("repo-manager-theme",this.theme),document.documentElement.setAttribute("data-theme",this.theme),this.updateThemeUI(),this.showNotification(WPGitManagerGlobal.translations.themeChanged,"success")}updateThemeUI(){document.querySelectorAll(".git-theme-switcher").forEach(e=>{const t=e.querySelector("svg");t&&(t.innerHTML="light"===this.theme?'<circle cx="12" cy="12" r="4"/><path d="M12 2v2"/><path d="M12 20v2"/><path d="m4.93 4.93 1.41 1.41"/><path d="m17.66 17.66 1.41 1.41"/><path d="M2 12h2"/><path d="M20 12h2"/><path d="m6.34 17.66-1.41 1.41"/><path d="m19.07 4.93-1.41 1.41"/>':'<path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"/>')})}showCloneModal(){const e=this.createCloneModalHTML();this.showModal("clone",e)}showModal(e,t){this.closeModal(e);const n=`\n            <div class="git-modal-overlay" data-modal-id="${e}">\n                ${t}\n            </div>\n        `,o=document.createElement("template");o.innerHTML=n.trim();const s=o.content.firstChild;return document.body.appendChild(s),this.modals.set(e,{element:s,isOpen:!0}),setTimeout(()=>{const e=s.querySelector("input, select, textarea");e&&e.focus()},100),document.body.style.overflow="hidden","clone"===e&&(this.setupUrlAutoFill(s),this.setupCloneFormAuthInteractions()),s}closeModal(e){const t=document.querySelector(`[data-modal-id="${e}"]`);t&&(t.classList.add("closing"),setTimeout(()=>{t.remove(),this.modals.delete(e),0===this.modals.size&&(document.body.style.overflow="")},200))}closeAllModals(){this.modals.forEach((e,t)=>{this.closeModal(t)})}positionModal(e){const t=e.element;t&&(t.style.display="flex")}setupUrlAutoFill(e){const t=e.querySelector("#clone-repo-url"),n=e.querySelector("#clone-repo-path"),o=e.querySelector("#clone-repo-branch");t&&(t.addEventListener("input",e=>{this.handleUrlInput(e.target.value,n,o)}),t.addEventListener("paste",e=>{setTimeout(()=>{this.handleUrlInput(e.target.value,n,o)},10)})),n&&n.addEventListener("input",e=>{e.target.value&&"true"===e.target.dataset.autoFilled&&(e.target.dataset.autoFilled="false",this.removeAutoFilledIndicator(e.target))}),o&&o.addEventListener("input",e=>{e.target.value&&"true"===e.target.dataset.autoFilled&&(e.target.dataset.autoFilled="false",this.removeAutoFilledIndicator(e.target))})}handleUrlInput(e,t,n){if(!e||!e.trim())return;const o=this.parseGitUrl(e.trim());o?(!t||t.value&&"true"!==t.dataset.autoFilled||(t.value=o.suggestedPath,t.dataset.autoFilled="true",this.addAutoFilledIndicator(t)),!n||n.value&&"true"!==n.dataset.autoFilled||(n.value=o.defaultBranch,n.dataset.autoFilled="true",this.addAutoFilledIndicator(n)),(o.suggestedPath||o.defaultBranch)&&this.showAutoFillNotification(o)):this.showUrlParseError(e)}parseGitUrl(e){try{return(e=e.trim()).startsWith("git@")?this.parseSshUrl(e):e.startsWith("http")?this.parseHttpsUrl(e):this.parseGenericUrl(e)}catch(e){return null}}parseSshUrl(e){const t=e.match(/^git@([^:]+):([^/]+)\/([^/]+?)(?:\.git)?$/);if(t){const[,e,n,o]=t,s=o.replace(/\.git$/,"");let i=`wp-content/plugins/${s}`;return e.includes("theme")||s.includes("theme")?i=`wp-content/themes/${s}`:e.includes("mu-plugin")||s.includes("mu-plugin")?i=`wp-content/mu-plugins/${s}`:(s.includes("wordpress")||s.includes("wp-"))&&(i=`wp-content/plugins/${s}`),{host:e,user:n,repo:s,suggestedPath:i,defaultBranch:this.getDefaultBranch(e),type:"ssh"}}return null}parseHttpsUrl(e){try{const t=new URL(e),n=t.pathname.split("/").filter(e=>e);if(n.length>=2){const e=n[0],o=n[1].replace(/\.git$/,"");let s=`wp-content/plugins/${o}`;return t.hostname.includes("theme")||o.includes("theme")?s=`wp-content/themes/${o}`:t.hostname.includes("mu-plugin")||o.includes("mu-plugin")?s=`wp-content/mu-plugins/${o}`:(o.includes("wordpress")||o.includes("wp-"))&&(s=`wp-content/plugins/${o}`),{host:t.hostname,user:e,repo:o,suggestedPath:s,defaultBranch:this.getDefaultBranch(t.hostname),type:"https"}}}catch(e){}return null}parseGenericUrl(e){const t=e.match(/([^/]+?)(?:\.git)?$/);if(t){const e=t[1];let n=`wp-content/plugins/${e}`;return e.includes("theme")?n=`wp-content/themes/${e}`:e.includes("mu-plugin")?n=`wp-content/mu-plugins/${e}`:(e.includes("wordpress")||e.includes("wp-"))&&(n=`wp-content/plugins/${e}`),{repo:e,suggestedPath:n,defaultBranch:"main",type:"generic"}}return null}getDefaultBranch(e){return["github.com","gitlab.com","bitbucket.org"].includes(e)?"main":"master"}showAutoFillNotification(e){const t=[];e.suggestedPath&&t.push(`Path: ${e.suggestedPath}`),e.defaultBranch&&t.push(`Branch: ${e.defaultBranch}`),t.length>0&&this.showNotification(`Auto-filled: ${t.join(", ")}`,"info",{duration:3e3})}showUrlParseError(e){(e.includes("github.com")||e.includes("gitlab.com")||e.includes("bitbucket.org")||e.startsWith("git@"))&&this.showNotification(WPGitManagerGlobal.translations.unableToParseGitURL,"warning",{duration:4e3})}testUrlParsing(){["https://github.com/user/my-plugin.git","git@github.com:user/my-theme.git","https://gitlab.com/user/mu-plugin.git","https://bitbucket.org/user/wordpress-plugin.git","https://github.com/user/wp-custom-plugin.git"].forEach(e=>{this.parseGitUrl(e)})}addAutoFilledIndicator(e){e.classList.add("auto-filled");const t=e.parentElement;if(t&&!t.querySelector(".auto-fill-indicator")){const e=document.createElement("span");e.className="auto-fill-indicator",e.innerHTML='\n                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="12" height="12">\n                    <path d="M20 6 9 17l-5-5"/>\n                </svg>\n            ',e.title="Auto-filled from repository URL",t.appendChild(e)}}removeAutoFilledIndicator(e){e.classList.remove("auto-filled");const t=e.parentElement;if(t){const e=t.querySelector(".auto-fill-indicator");e&&e.remove()}}setupExistingFormUrlAutoFill(){const e=document.getElementById("add-repo-url"),t=document.getElementById("add-repo-path"),n=document.getElementById("add-repo-branch");e&&(e.addEventListener("input",e=>{this.handleUrlInput(e.target.value,t,n)}),e.addEventListener("paste",e=>{setTimeout(()=>{this.handleUrlInput(e.target.value,t,n)},10)})),t&&t.addEventListener("input",e=>{e.target.value&&"true"===e.target.dataset.autoFilled&&(e.target.dataset.autoFilled="false",this.removeAutoFilledIndicator(e.target))}),n&&n.addEventListener("input",e=>{e.target.value&&"true"===e.target.dataset.autoFilled&&(e.target.dataset.autoFilled="false",this.removeAutoFilledIndicator(e.target))})}setupCloneFormAuthInteractions(){const e=document.getElementById("clone-private-repo"),t=document.getElementById("auth-type-section"),n=document.querySelectorAll('input[name="auth_type"]'),o=document.getElementById("ssh-auth-fields"),s=document.getElementById("https-auth-fields"),i=document.getElementById("clone-token"),a=document.getElementById("toggle-token-visibility");e&&e.addEventListener("change",e=>{e.target.checked?(t.style.display="block",this.showAuthFields()):(t.style.display="none",o.style.display="none",s.style.display="none")}),n.forEach(e=>{e.addEventListener("change",e=>{this.showAuthFields()})}),a&&i&&a.addEventListener("click",()=>{const e="password"===i.type?"text":"password";i.type=e;a.querySelector("svg").innerHTML="text"===e?'\n                        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>\n                        <line x1="1" y1="1" x2="23" y2="23"/>\n                    ':'\n                        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>\n                        <circle cx="12" cy="12" r="3"/>\n                    '})}showAuthFields(){const e=document.querySelector('input[name="auth_type"]:checked'),t=document.getElementById("ssh-auth-fields"),n=document.getElementById("https-auth-fields");e&&("ssh"===e.value?(t.style.display="block",n.style.display="none"):"https"===e.value&&(t.style.display="none",n.style.display="block"))}showSSHHelp(){const e=document.createElement("div");e.className="git-modal-overlay",e.id="ssh-help-modal",e.innerHTML='\n            <div class="git-modal-content git-modal-large">\n                <div class="git-modal-header">\n                    <h3>\n                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="position: relative;top: 2px;margin-right: 5px;"><path d="M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z"></path><circle cx="16.5" cy="7.5" r=".5" fill="currentColor"></circle></svg>\n                     SSH Key Generation Guide\n                     </h3>\n                    <button class="git-modal-close" onclick="closeSSHHelp()"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg></button>\n                </div>\n                <div class="git-modal-body">\n                    <div class="help-content">\n                        <div class="help-section">\n                            <h4>Generate SSH Key</h4>\n                            <div class="code-block">\n                                <code>ssh-keygen -t ed25519 -C "your_email@example.com"</code>\n                            </div>\n                            <p>This creates a new SSH key pair. Press Enter to accept the default file location.</p>\n                        </div>\n\n                        <div class="help-section">\n                            <h4>Add SSH Key to SSH Agent</h4>\n                            <div class="code-block">\n                                <code>ssh-add ~/.ssh/id_ed25519</code>\n                            </div>\n                        </div>\n\n                        <div class="help-section">\n                            <h4>Copy Public Key</h4>\n                            <div class="code-block">\n                                <code>cat ~/.ssh/id_ed25519.pub</code>\n                            </div>\n                            <p>Copy the output and add it to your Git hosting service (GitHub, GitLab, etc.)</p>\n                        </div>\n\n                        <div class="help-section">\n                            <h4>Copy Private Key</h4>\n                            <div class="code-block">\n                                <code>cat ~/.ssh/id_ed25519</code>\n                            </div>\n                            <p>Copy the entire private key content (including BEGIN and END lines) and paste it in the SSH Private Key field above.</p>\n                        </div>\n                    </div>\n                </div>\n                <div class="git-modal-footer">\n                    <button class="git-action-btn git-secondary-btn" onclick="closeSSHHelp()">Close</button>\n                </div>\n            </div>\n        ',document.body.appendChild(e)}closeSSHHelp(){const e=document.getElementById("ssh-help-modal");e&&e.remove()}importSSHKey(){const e=document.createElement("input");e.type="file",e.accept=".pem,.key,.txt,text/plain",e.style.display="none",e.addEventListener("change",e=>{const t=e.target.files[0];if(t){const e=new FileReader;e.onload=e=>{let t=document.getElementById("clone-ssh-key");if(t||(t=document.getElementById("add-ssh-key")),t){t.value=e.target.result;const n=new Event("input",{bubbles:!0});t.dispatchEvent(n),this.showNotification(WPGitManagerGlobal.translations.sshKeyImportedSuccessfully,"success")}else this.showNotification(WPGitManagerGlobal.translations.sshKeyInputNotFound,"error")},e.onerror=()=>{this.showNotification(WPGitManagerGlobal.translations.failedToReadSSHKeyFile,"error")},e.readAsText(t)}});const t=document.querySelector('input[type="file"][accept*=".pem"]');t&&t.remove(),document.body.appendChild(e),e.click(),setTimeout(()=>{document.body.contains(e)&&document.body.removeChild(e)},1e3)}showTokenHelp(){const e=document.createElement("div");e.className="git-modal-overlay",e.id="token-help-modal",e.innerHTML='\n            <div class="git-modal-content git-modal-large">\n                <div class="git-modal-header">\n                    <h3><span class="dashicons dashicons-lock"></span> Personal Access Token Guide</h3>\n                    <button class="git-modal-close" onclick="closeTokenHelp()"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg></button>\n                </div>\n                <div class="git-modal-body">\n                    <div class="help-content">\n                        <div class="help-section">\n                            <h4>GitHub</h4>\n                            <ol>\n                                <li>Go to GitHub Settings → Developer settings → Personal access tokens</li>\n                                <li>Click "Generate new token". Select scopes (e.g., `repo`).</li>\n                                <li>Generate the token and copy it.</li>\n                            </ol>\n                        </div>\n\n                        <div class="help-section">\n                            <h4>GitLab</h4>\n                            <ol>\n                                <li>Go to GitLab User Settings → Access Tokens</li>\n                                <li>Create a token with `read_repository` and `write_repository` scopes.</li>\n                                <li>Copy the generated token.</li>\n                            </ol>\n                        </div>\n\n                        <div class="help-section">\n                            <h4>Bitbucket</h4>\n                            <ol>\n                                <li>Go to Bitbucket Settings → App passwords</li>\n                                <li>Create an app password with `Read` and `Write` permissions for repositories.</li>\n                                <li>Copy the generated password.</li>\n                            </ol>\n                        </div>\n                    </div>\n                </div>\n                <div class="git-modal-footer">\n                    <button class="git-action-btn git-secondary-btn" onclick="closeTokenHelp()">Close</button>\n                </div>\n            </div>\n        ',document.body.appendChild(e),e.addEventListener("click",t=>{t.target===e&&this.closeTokenHelp()});const t=e=>{"Escape"===e.key&&(this.closeTokenHelp(),window.removeEventListener("keydown",t))};window.addEventListener("keydown",t)}closeTokenHelp(){const e=document.getElementById("token-help-modal");e&&e.remove()}clearSSHKey(){let e=document.getElementById("clone-ssh-key");if(e||(e=document.getElementById("add-ssh-key")),e){e.value="";const t=new Event("input",{bubbles:!0});e.dispatchEvent(t),this.showNotification(WPGitManagerGlobal.translations.sshKeyCleared,"success")}else this.showNotification(WPGitManagerGlobal.translations.sshKeyInputNotFound,"error")}setupAddRepositoryAuthInteractions(){const e=document.getElementById("add-private-repo"),t=document.getElementById("add-existing-repo"),n=document.getElementById("add-auth-type-section"),o=document.querySelectorAll('input[name="auth_type"]'),s=document.getElementById("add-ssh-auth-fields"),i=document.getElementById("add-https-auth-fields"),a=document.getElementById("add-token"),r=document.getElementById("toggle-add-token-visibility"),l=document.getElementById("add-repo-url");t&&t.addEventListener("change",e=>{if(e.target.checked){const e=document.querySelector('label[for="add-repo-url"]');e&&(e.textContent=WPGitManagerGlobal?.translations?.repositoryName||"Repository Name"),l&&(l.value="",l.setAttribute("required","required"),l.placeholder="my-repository-name");const t=document.querySelector("#add-repo-url")?.parentElement?.querySelector(".form-help");t&&(t.textContent=WPGitManagerGlobal?.translations?.displayNameForRepository||"Enter a display name for this repository")}else{if(l){const e=document.querySelector('label[for="add-repo-url"]');e&&(e.textContent=WPGitManagerGlobal?.translations?.repositoryURL||"Repository URL"),l.setAttribute("required","required"),l.placeholder="https://github.com/user/repo.git"}const e=document.querySelector("#add-repo-url")?.parentElement?.querySelector(".form-help");e&&(e.textContent=WPGitManagerGlobal?.translations?.enterGitRepositoryURL||"Enter the Git repository URL (HTTPS or SSH) - fields will auto-populate")}}),e&&e.addEventListener("change",e=>{e.target.checked?(n.style.display="block",this.showAddAuthFields()):(n.style.display="none",s.style.display="none",i.style.display="none")}),o.forEach(e=>{e.addEventListener("change",e=>{this.showAddAuthFields()})}),r&&a&&r.addEventListener("click",()=>{const e="password"===a.type?"text":"password";a.type=e;r.querySelector("svg").innerHTML="text"===e?'\n                        <path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/>\n                        <line x1="1" y1="1" x2="23" y2="23"/>\n                    ':'\n                        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>\n                        <circle cx="12" cy="12" r="3"/>\n                    '})}showAddAuthFields(){const e=document.querySelector('input[name="auth_type"]:checked'),t=document.getElementById("add-ssh-auth-fields"),n=document.getElementById("add-https-auth-fields");e&&("ssh"===e.value?(t.style.display="block",n.style.display="none"):"https"===e.value&&(t.style.display="none",n.style.display="block"))}createCloneModalHTML(){return'\n            <div class="git-modal-content git-clone-modal">\n                <div class="git-modal-header git-clone-modal-header">\n                    <h3>\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="20" height="20" style="margin-right: 8px;">\n                            <path d="M5 12h14"/>\n                            <path d="M12 5v14"/>\n                        </svg>\n                        Add Repository\n                    </h3>\n                    <button class="git-modal-close" aria-label="Close modal"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg></button>\n                </div>\n\n                <div class="git-modal-body">\n                    <form id="clone-form" class="git-clone-form">\n                        \x3c!-- Repository Information Section --\x3e\n                        <div class="form-section">\n                            <h4 class="form-section-title">\n                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>\n                                    <polyline points="14,2 14,8 20,8"/>\n                                </svg>\n                                Repository Information\n                            </h4>\n\n                            <div class="form-group">\n                                <label for="clone-repo-url">Repository URL</label>\n                                <input\n                                    type="text"\n                                    id="clone-repo-url"\n                                    name="repo_url"\n                                    class="form-control"\n                                    placeholder="https://github.com/user/repo.git or git@github.com:user/repo.git"\n                                    required\n                                    autocomplete="off"\n                                >\n                                <div class="form-help">Enter the Git repository URL (HTTPS or SSH) - fields will auto-populate</div>\n                            </div>\n\n                            <div class="form-group">\n                                <label for="clone-repo-path">Local Path</label>\n                                <div class="input-group">\n                                    <input\n                                        type="text"\n                                        id="clone-repo-path"\n                                        name="repo_path"\n                                        class="form-control"\n                                        placeholder="wp-content/plugins"\n                                        required\n                                    >\n                                    <button type="button" class="git-action-btn git-secondary-btn" id="browse-path-btn">\n                                        <svg viewBox="0 0 24 24" fill="currentColor" width="16" height="16">\n                                            <path d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"/>\n                                        </svg>\n                                        Browse\n                                    </button>\n                                </div>\n                                <div class="form-help">Select the parent directory where the repository will be cloned</div>\n                            </div>\n\n                            <div class="form-group">\n                                <label for="clone-repo-branch">Branch (Optional)</label>\n                                <input\n                                    type="text"\n                                    id="clone-repo-branch"\n                                    name="repo_branch"\n                                    class="form-control"\n                                    placeholder="main"\n                                >\n                                <div class="form-help">Specify a branch to checkout (defaults to main/master)</div>\n                            </div>\n                        </div>\n\n                        \x3c!-- Authentication Section --\x3e\n                        <div class="form-section">\n                            <h4 class="form-section-title">\n                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                                    <path d="M15 7h3a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-3"/>\n                                    <path d="M10 11l4 4-4 4"/>\n                                    <path d="M14 15H9a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h5"/>\n                                </svg>\n                                Authentication\n                            </h4>\n\n                            <div class="form-group">\n                                <label class="switch-label">\n                                    <span class="switch-text">This is a private repository</span>\n                                    <div class="switch-container">\n                                        <input type="checkbox" id="clone-private-repo" name="private_repo" class="switch-input">\n                                        <span class="switch-slider"></span>\n                                    </div>\n                                </label>\n                                <div class="form-help">Enable if the repository requires authentication</div>\n                            </div>\n\n                            \x3c!-- Authentication Type Selection --\x3e\n                            <div id="auth-type-section" class="form-group" style="display: none;">\n                                <label>Authentication Method</label>\n                                <div class="auth-method-selector">\n                                    <label class="auth-method-option">\n                                        <input type="radio" name="auth_type" value="ssh" checked>\n                                        <div class="auth-method-card">\n                                            <div class="auth-method-icon">\n                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z"/><circle cx="16.5" cy="7.5" r=".5" fill="currentColor"/></svg>\n                                            </div>\n                                            <div class="auth-method-content">\n                                                <h5>SSH Key</h5>\n                                                <p>Use SSH private key for authentication</p>\n                                            </div>\n                                        </div>\n                                    </label>\n\n                                    <label class="auth-method-option">\n                                        <input type="radio" name="auth_type" value="https">\n                                        <div class="auth-method-card">\n                                            <div class="auth-method-icon">\n                                                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M7 3.34V5a3 3 0 0 0 3 3"/><path d="M11 21.95V18a2 2 0 0 0-2-2 2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05"/><path d="M21.54 15H17a2 2 0 0 0-2 2v4.54"/><path d="M12 2a10 10 0 1 0 9.54 13"/><path d="M20 6V4a2 2 0 1 0-4 0v2"/><rect width="8" height="5" x="14" y="6" rx="1"/></svg>\n                                            </div>\n                                            <div class="auth-method-content">\n                                                <h5>HTTPS Token</h5>\n                                                <p>Use username and personal access token</p>\n                                            </div>\n                                        </div>\n                                    </label>\n                                </div>\n                            </div>\n\n                            \x3c!-- SSH Authentication Fields --\x3e\n                            <div id="ssh-auth-fields" class="auth-fields" style="display: none;">\n                                <div class="form-group">\n                                    <label for="clone-ssh-key">SSH Private Key</label>\n                                    <div class="ssh-key-input-group">\n                                        <textarea\n                                            id="clone-ssh-key"\n                                            name="private_key"\n                                            class="form-control"\n                                            rows="8"\n                                            placeholder="-----BEGIN OPENSSH PRIVATE KEY-----&#10;Your SSH private key content here...&#10;-----END OPENSSH PRIVATE KEY-----"\n                                        ></textarea>\n                                        <div class="ssh-key-actions">\n                                            <button type="button" class="ssh-key-action-btn" onclick="importSSHKey()" title="Import SSH key from file">\n                                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="12" height="12">\n                                                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>\n                                                    <polyline points="7,10 12,15 17,10"/>\n                                                    <line x1="12" y1="15" x2="12" y2="3"/>\n                                                </svg>\n                                                Import\n                                            </button>\n                                            <button type="button" class="ssh-key-action-btn" onclick="clearSSHKey()" title="Clear SSH key">\n                                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="12" height="12">\n                                                    <path d="M3 6h18"/>\n                                                    <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>\n                                                    <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>\n                                                </svg>\n                                                Clear\n                                            </button>\n                                        </div>\n                                    </div>\n                                    <div class="form-help">\n                                        <div class="help-links">\n                                            <div onclick="showSSHHelp()" class="help-link">\n                                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="14" height="14">\n                                                    <circle cx="12" cy="12" r="10"/>\n                                                    <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/>\n                                                    <path d="M12 17h.01"/>\n                                                </svg>\n                                                How to generate SSH key\n                                            </div>\n                                            <div onclick="importSSHKey()" class="help-link import-link">\n                                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="14" height="14">\n                                                    <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>\n                                                    <polyline points="7,10 12,15 17,10"/>\n                                                    <line x1="12" y1="15" x2="12" y2="3"/>\n                                                </svg>\n                                                Import from file\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n\n                            \x3c!-- HTTPS Authentication Fields --\x3e\n                            <div id="https-auth-fields" class="auth-fields" style="display: none;">\n                                <div class="form-group">\n                                    <label for="clone-username">Username</label>\n                                    <input\n                                        type="text"\n                                        id="clone-username"\n                                        name="username"\n                                        class="form-control"\n                                        placeholder="your-username"\n                                    >\n                                    <div class="form-help">Your Git hosting service username</div>\n                                </div>\n\n                                <div class="form-group">\n                                    <label for="clone-token">Personal Access Token</label>\n                                    <div class="input-group">\n                                        <input\n                                            type="password"\n                                            id="clone-token"\n                                            name="token"\n                                            class="form-control"\n                                            placeholder="ghp_xxxxxxxxxxxxxxxxxxxx"\n                                        >\n                                        <button type="button" class="git-action-btn git-secondary-btn" id="toggle-token-visibility">\n                                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                                                <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>\n                                                <circle cx="12" cy="12" r="3"/>\n                                            </svg>\n                                        </button>\n                                    </div>\n                                    <div class="form-help">\n                                        <div class="help-links">\n                                            <div onclick="showTokenHelp()" class="help-link">\n                                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="14" height="14">\n                                                    <circle cx="12" cy="12" r="10"/>\n                                                    <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"/>\n                                                    <path d="M12 17h.01"/>\n                                                </svg>\n                                                How to create access token\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n\n                        \x3c!-- Repository Type Section --\x3e\n                        <div class="form-section">\n                            <h4 class="form-section-title">\n                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                                    <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"/>\n                                    <polyline points="14,2 14,8 20,8"/>\n                                </svg>\n                                Repository Type\n                            </h4>\n\n                            <div class="form-group">\n                                <label class="switch-label">\n                                    <span class="switch-text">This is an existing Git repository</span>\n                                    <div class="switch-container">\n                                        <input type="checkbox" id="clone-existing-repo" name="existing_repo" class="switch-input">\n                                        <span class="switch-slider"></span>\n                                    </div>\n                                </label>\n                                <div class="form-help">Enable if the directory already contains a Git repository</div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n\n                <div class="git-modal-footer git-clone-form-actions">\n                    <button type="button" class="git-action-btn git-secondary-btn" id="cancel-clone-btn">\n                        Cancel\n                    </button>\n                    <button type="submit" form="clone-form" class="git-action-btn">\n                        <svg viewBox="0 0 24 24" fill="currentColor" width="16" height="16">\n                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>\n                        </svg>\n                        Add Repository\n                    </button>\n                </div>\n            </div>\n        '}showAddRepositorySection(){const e=document.getElementById("git-welcome-screen"),t=document.getElementById("git-repo-details"),n=document.getElementById("git-add-repository");e&&(e.style.display="none"),t&&(t.style.display="none"),n&&(n.style.display="block"),this.directorySelectorTarget="#add-repo-path",this.setupAddRepositoryForm()}ensureProperDisplayStates(){const e=document.getElementById("git-welcome-screen"),t=document.getElementById("git-add-repository"),n=document.getElementById("git-repo-details");e&&(e.style.display="flex",e.style.alignItems="center",e.style.justifyContent="center"),t&&(t.style.display="none"),n&&(n.style.display="none")}setupAddRepositoryForm(){const e=document.getElementById("back-to-welcome");e&&(e.onclick=()=>this.hideAddRepositorySection());const t=document.getElementById("cancel-add-repo");t&&(t.onclick=()=>this.hideAddRepositorySection());const n=document.getElementById("browse-path-btn");n&&(n.onclick=()=>{this.directorySelectorTarget="#add-repo-path",this.browsePath(this.directorySelectorTarget)});const o=document.getElementById("add-repo-form");o&&(o.onsubmit=e=>{e.preventDefault(),this.handleAddRepositorySubmit(o)}),this.setupExistingFormUrlAutoFill(),this.setupAddRepositoryAuthInteractions()}hideAddRepositorySection(){this.ensureProperDisplayStates()}async handleAddRepositorySubmit(e){const t=new FormData(e),n=Object.fromEntries(t.entries()),o="on"===n.existing_repo;if(!n.repo_path)return void this.showNotification("Please fill in the local path field","error");if(!o&&!n.repo_url)return void this.showNotification("Please fill in the repository URL field","error");if("on"===n.private_repo){const e=n.auth_type;if(!e)return void this.showNotification("Please select an authentication method","error");if("ssh"===e){if(!n.private_key||!n.private_key.trim())return void(n.repo_url&&n.repo_url.startsWith("git@")?this.showNotification("SSH URL detected but no SSH key provided. Please either provide an SSH private key or switch to HTTPS authentication.","error"):this.showNotification("SSH private key is required for SSH authentication. Please provide a private key or switch to HTTPS authentication.","error"));if(!/^-----BEGIN (OPENSSH|RSA|DSA|EC) PRIVATE KEY-----/.test(n.private_key.trim()))return void this.showNotification("Please enter a valid SSH private key","error")}else if("https"===e){if(!n.username||!n.username.trim())return void this.showNotification("Username is required for HTTPS authentication","error");if(!n.token||!n.token.trim())return void this.showNotification("Personal access token is required for HTTPS authentication","error");if(![/^ghp_[A-Za-z0-9_]{36}$/,/^gho_[A-Za-z0-9_]{36}$/,/^ghu_[A-Za-z0-9_]{36}$/,/^ghr_[A-Za-z0-9_]{36}$/,/^[A-Za-z0-9]{20,}$/].some(e=>e.test(n.token.trim())))return void this.showNotification("Please enter a valid personal access token","error")}}const s=document.getElementById("submit-add-repo"),i=s.innerHTML;s.innerHTML='\n            <svg class="animate-spin" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                <path d="M21 12a9 9 0 11-6.219-8.56"/>\n            </svg>\n            Adding Repository...\n        ',s.disabled=!0;try{if("on"===n.existing_repo){const e=document.getElementById("add-repo-url"),t=document.getElementById("add-repo-branch"),n=document.getElementById("add-repo-path"),o=(n?.value||"").trim();if(o){const n=o.split(/[\\\/]/).filter(Boolean).pop()||"";!e||e.value&&e.value.trim()||(e.value=n),!t||t.value&&t.value.trim()||(t.value="main")}}let e=n.repo_url;const t="on"===n.existing_repo;let o="";t&&(o=(n.repo_url||"").trim(),e=""),n.repo_url&&n.repo_url.startsWith("git@")&&"https"===n.auth_type&&n.username&&n.token&&(e=n.repo_url.replace(/^git@([^:]+):([^\/]+)\/([^\/]+?)(?:\.git)?$/,"https://$1/$2/$3.git"));const s={action:"git_manager_add_repository",nonce:gitManagerAjax.nonce,repo_url:e,repo_path:n.repo_path,repo_branch:n.repo_branch||"",existing_repo:"on"===n.existing_repo?"1":"0"};if(t&&(s.name=o),"on"===n.private_repo){const e=n.auth_type||"ssh";if(s.authType=e,"ssh"===e){const e=n.private_key;if(!e||!e.trim())throw new Error("SSH private key is required for private repositories");s.private_key=e}else if("https"===e){const e=n.username,t=n.token;if(!e||!t)throw new Error("Username and personal access token are required for HTTPS authentication");s.username=e,s.token=t}}const i=await fetch(gitManagerAjax.ajaxurl,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:new URLSearchParams(s)}),a=await i.json();if(!a.success)throw new Error(a.data||"Failed to add repository");this.showNotification("Repository added successfully!","success"),this.hideAddRepositorySection(),this.loadRepositories()}catch(e){this.showNotification("Failed to add repository: "+e.message,"error")}finally{s.innerHTML=i,s.disabled=!1}}async handleCloneSubmit(e){const t=new FormData(e),n=Object.fromEntries(t.entries());if(!this.validateCloneForm(n))return;const o=e.querySelector('button[type="submit"]'),s=o.innerHTML;o.innerHTML='\n            <div class="progress-spinner" style="width: 16px; height: 16px; border-width: 2px;"></div>\n            Adding Repository...\n        ',o.disabled=!0;try{const e=new FormData;e.append("action",gitManagerAjax.actions.repo_clone),e.append("nonce",gitManagerAjax.nonce);const t=n.repo_url.split("/"),o=t[t.length-1].replace(".git","");e.append("remote",n.repo_url),e.append("target",n.repo_path),e.append("name",o);const s="on"===n.private_repo,i=n.auth_type||"ssh";if(e.append("authType",i),s)if("ssh"===i){const t=n.private_key;if(!t||!t.trim())throw new Error("SSH private key is required for private repositories");e.append("private_key",t)}else if("https"===i){const t=n.username,o=n.token;if(!t||!o)throw new Error("Username and personal access token are required for HTTPS authentication");e.append("username",t),e.append("token",o)}const a=await fetch(ajaxurl,{method:"POST",body:e});if(!a.ok)throw new Error(`HTTP error! status: ${a.status}`);const r=await a.json();if(!r.success)throw new Error(r.data||"Failed to add repository");this.showNotification("Repository added successfully!","success"),this.closeModal("clone"),this.loadRepositories()}catch(e){this.showNotification("Failed to add repository: "+e.message,"error")}finally{o.innerHTML=s,o.disabled=!1}}validateCloneForm(e){if(!e.repo_url)return this.showNotification(WPGitManagerGlobal.translations.repositoryURLRequired,"error"),!1;if(!e.repo_path)return this.showNotification(WPGitManagerGlobal.translations.localPathRequired,"error"),!1;if(!/^(https?:\/\/|git@|ssh:\/\/).+\.git$/.test(e.repo_url))return this.showNotification("Please enter a valid Git repository URL","error"),!1;if("on"===e.private_repo){const t=e.auth_type;if(!t)return this.showNotification("Please select an authentication method","error"),!1;if("ssh"===t){if(!e.private_key||!e.private_key.trim())return this.showNotification("SSH private key is required for private repositories","error"),!1;if(!/^-----BEGIN (OPENSSH|RSA|DSA|EC) PRIVATE KEY-----/.test(e.private_key.trim()))return this.showNotification("Please enter a valid SSH private key","error"),!1}else if("https"===t){if(!e.username||!e.username.trim())return this.showNotification("Username is required for HTTPS authentication","error"),!1;if(!e.token||!e.token.trim())return this.showNotification("Personal access token is required for HTTPS authentication","error"),!1;if(![/^ghp_[A-Za-z0-9_]{36}$/,/^gho_[A-Za-z0-9_]{36}$/,/^ghu_[A-Za-z0-9_]{36}$/,/^ghr_[A-Za-z0-9_]{36}$/,/^[A-Za-z0-9]{20,}$/].some(t=>t.test(e.token.trim())))return this.showNotification("Please enter a valid personal access token","error"),!1}}return!0}async loadRepositories(){try{const e=await this.fetchRepositories(),t=this._computeRepoListSignature(e);if(this._lastRepoListSignature&&t===this._lastRepoListSignature)return;void 0!==n&&n.showRepoSkeleton(),this.renderRepositories(e),void 0!==n&&n.hideRepoSkeleton(),this._lastRepoListSignature=t}catch(e){this.showNotification(WPGitManagerGlobal.translations.failedToLoadRepositories,"error")}}async fetchRepositories(){if("undefined"==typeof gitManagerAjax)return[];const e=new FormData;e.append("action",gitManagerAjax.actions.repo_list),e.append("nonce",gitManagerAjax.nonce);const t=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:e});if(!t.ok)throw new Error(`HTTP error! status: ${t.status}`);const n=await t.json();if(n.success)return n.data||[];throw new Error(n.data||"Failed to fetch repositories")}renderRepositories(e){const t=document.getElementById("git-repo-list");if(!t)return;if(void 0!==n&&n.hideRepoSkeleton(),!e||0===e.length){t.innerHTML='\n                <div class="git-repo-empty">\n                    <p>No repositories found</p>\n                    <button class="git-action-btn git-clone-btn">\n                        <svg viewBox="0 0 24 24" fill="currentColor" width="16" height="16">\n                            <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>\n                        </svg>\n                        Add Your First Repository\n                    </button>\n                </div>\n            ';const e=document.getElementById("git-welcome-screen"),n=document.getElementById("git-add-repository"),o=document.getElementById("git-repo-details");return e&&(e.style.display="flex",e.style.alignItems="center",e.style.justifyContent="center"),n&&(n.style.display="none"),o&&(o.style.display="none"),void setTimeout(()=>{this.ensureButtonFunctionality()},50)}const o=Array.from(t.querySelectorAll(".git-repo-card"));o.length===e.length&&o.every((t,n)=>t.getAttribute("data-repo-id")==String(e[n].id))?e.forEach((e,t)=>this.updateRepoCard(o[t],e)):t.innerHTML=e.map(e=>this.createRepoCardHTML(e)).join(""),this.ensureButtonFunctionality()}updateRepoCard(e,t){if(!e)return;const n=e.querySelector(".git-repo-name");n&&n.textContent!==String(t.name??"")&&(n.textContent=String(t.name??""));const o=e.querySelector(".git-repo-path");o&&o.textContent!==String(t.path??"")&&(o.textContent=String(t.path??""));const s=e.querySelector(".git-repo-branch");s&&s.textContent!==String(t.activeBranch??"")&&(s.textContent=String(t.activeBranch??""));const i=e.querySelector(".repo-status");if(i){let e="clean";const n=parseInt(t.ahead??0,10)||0,o=parseInt(t.behind??0,10)||0;t.hasChanges?e="changes":n>0&&o>0?e="diverged":n>0?e="ahead":o>0&&(e="behind");const s=`repo-status ${e}`;i.className!==s&&(i.className=s,i.setAttribute("data-repo-status",e),i.querySelector(".status-dot")||(i.innerHTML='<span class="status-dot"></span>'))}const a=e.querySelector(".pull-badge");if(a){const e=String(t.behind||0);a.textContent!==e&&(a.textContent=e)}const r=e.querySelector(".push-badge");if(r){const e=String(t.ahead||0);r.textContent!==e&&(r.textContent=e)}}createRepoCardHTML(e){if(!e.folderExists)return this.createMissingFolderCardHTML(e);let t="clean";const n=parseInt(e.ahead??0,10)||0,o=parseInt(e.behind??0,10)||0;e.hasChanges?t="changes":n>0&&o>0?t="diverged":n>0?t="ahead":o>0&&(t="behind"),this.getCardStatusText(e.status);const s="plugin"===e.repoType?"Plugin":"theme"===e.repoType?"Theme":"Other";return`\n            <div class="git-repo-card" data-repo-id="${e.id}">\n                <div class="repo-card-header">\n                    <h4 class="repo-name git-repo-name" data-repo-name="${this.escapeHtml(e.name)}">${this.escapeHtml(e.name)}</h4>\n                    <div class="repo-status ${t}" data-repo-status="${t}">\n                        <span class="status-dot"></span>\n                    </div>\n                </div>\n                <div class="repo-card-body">\n                    <div class="repo-path git-repo-path" data-repo-path="${this.escapeHtml(e.path)}">${this.escapeHtml(e.path)}</div>\n                    <div class="repo-branch git-repo-branch" data-repo-branch="${this.escapeHtml(e.activeBranch)}">${this.escapeHtml(e.activeBranch)}</div>\n                    <span class="repo-hashtag ${e.repoType||"other"}">#${s}</span>\n                </div>\n\n                <div class="repo-card-actions">\n                    <div class="repo-action-group">\n                        <button class="repo-action-btn" data-action="pull" title="Pull changes" onclick="window.safeGitManagerCall('gitOperation', 'pull', '${e.id}')">\n                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 17V3"/><path d="m6 11 6 6 6-6"/><path d="M19 21H5"/></svg>\n                            <span class="commit-count-badge pull-badge">${e.behind||0}</span>\n                        </button>\n                    </div>\n                    <div class="repo-action-group">\n                        <button class="repo-action-btn" data-action="push" title="Push changes" onclick="window.safeGitManagerCall('gitOperation', 'push', '${e.id}')">\n                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" width="16" height="16" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="m18 9-6-6-6 6"/><path d="M12 3v14"/><path d="M5 21h14"/></svg>\n                            <span class="commit-count-badge push-badge">${e.ahead||0}</span>\n                        </button>\n                    </div>\n                    <button class="repo-action-btn repo-delete-btn" data-action="delete" title="Delete repository" onclick="window.safeGitManagerCall('deleteRepository', '${e.id}')">\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                            <path d="M3 6h18"/>\n                            <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>\n                            <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        `}createMissingFolderCardHTML(e){const t="plugin"===e.repoType?"Plugin":"theme"===e.repoType?"Theme":"Other";return`\n            <div class="git-repo-card git-repo-card-missing" data-repo-id="${e.id}">\n                <div class="repo-card-header">\n                    <h4 class="repo-name">${this.escapeHtml(e.name)}</h4>\n                    <div class="repo-status missing">\n                        <span class="status-dot"></span>\n                    </div>\n                </div>\n\n                <div class="repo-card-body">\n                    <div class="repo-path">${this.escapeHtml(e.path)}</div>\n                    <div class="repo-branch missing-folder-warning">\n                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>\n                            <line x1="12" y1="9" x2="12" y2="13"/>\n                            <line x1="12" y1="17" x2="12.01" y2="17"/>\n                        </svg>\n                        Repository folder is missing\n                    </div>\n                    <span class="repo-hashtag ${e.repoType||"other"}">#${t}</span>\n                </div>\n\n                <div class="repo-card-actions">\n                    <button class="repo-action-btn repo-reclone-btn" data-action="reclone" title="Re-clone repository to same path" onclick="window.safeGitManagerCall('reCloneRepository', '${e.id}')">\n                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                            <path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/>\n                            <path d="M21 3v5h-5"/>\n                            <path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/>\n                            <path d="M3 21v-5h5"/>\n                        </svg>\n                        Re-clone\n                    </button>\n                    <button class="repo-action-btn repo-manage-path-btn" data-action="manage-path" title="Manage repository path" onclick="window.safeGitManagerCall('manageRepositoryPath', '${e.id}')">\n                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                            <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>\n                        </svg>\n                        Manage Path\n                    </button>\n                                            <button class="repo-action-btn repo-delete-btn" data-action="delete" title="Delete repository" onclick="window.safeGitManagerCall('deleteRepository', '${e.id}')">\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                            <path d="M3 6h18"/>\n                            <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"/>\n                            <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"/>\n                        </svg>\n                    </button>\n                </div>\n            </div>\n        `}getCardStatusText(e){return{clean:"Clean",modified:"Modified",changes:"Has Changes",ahead:"Ahead",behind:"Behind",diverged:"Diverged",unknown:"Unknown"}[e]||"Unknown"}async selectRepository(e){void 0!==n&&n.hideAllSkeletons(),document.querySelectorAll(".git-repo-card").forEach(e=>{e.classList.remove("active")});const t=document.querySelector(`[data-repo-id="${e}"]`);t&&t.classList.add("active"),t&&t.classList.contains("git-repo-card-missing")?this.showMissingFolderMessage(e):(this.currentRepo=e,setTimeout(()=>{this.showRepositoryDetails(e)},100))}showMissingFolderMessage(e){this.showNotification("This repository folder is missing. Please use the 'Re-clone' button to restore it or 'Delete' to remove the repository entry.","warning",{duration:8e3})}showRepositoryDetails(e){const t=document.getElementById("git-welcome-screen"),n=document.getElementById("git-add-repository");t&&(t.style.display="none"),n&&(n.style.display="none");const o=document.getElementById("git-repo-details");o&&(o.style.display="block",o.style.visibility="visible",o.style.opacity="1",o.style.position="relative",o.style.zIndex="1",o.classList.add("active"),this.loadRepositoryDetails(e),this._lastRepoListSignature=null)}showLoadingState(){const e=document.querySelector("#git-repo-details .repo-info-grid");e&&e.classList.add("is-loading");const t=document.querySelector("#git-repo-details .repo-overview-grid");t&&t.classList.add("is-loading"),void 0!==n&&n.showRepoDetailsSkeleton()}hideLoadingState(){const e=document.querySelector("#git-repo-details .repo-info-grid");e&&e.classList.remove("is-loading");const t=document.querySelector("#git-repo-details .repo-overview-grid");t&&t.classList.remove("is-loading"),void 0!==n&&n.hideRepoDetailsSkeleton()}loadRepositoryDetails(e){if(!e)return;this.detailsRequestSeq+=1;const t=this.detailsRequestSeq;if(this.detailsAbortController)try{this.detailsAbortController.abort()}catch(e){}this.detailsAbortController=new AbortController,this.showLoadingState();const n=new FormData;n.append("action",gitManagerAjax.actions.get_repo_details),n.append("nonce",gitManagerAjax.nonce),n.append("id",e),fetch(gitManagerAjax.ajaxurl,{method:"POST",body:n,signal:this.detailsAbortController.signal}).then(e=>{if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);return e.json()}).then(e=>{if(t===this.detailsRequestSeq){if(!e.success)throw new Error(e.data||"Failed to load repository details");this.populateRepositoryDetails(e.data)}}).catch(e=>{e&&"AbortError"===e.name||t===this.detailsRequestSeq&&this.showNotification("Failed to load repository details: "+e.message,"error")}).finally(()=>{t===this.detailsRequestSeq&&this.hideLoadingState()})}startLiveUpdates(){this._repoListPoller||(this._repoListPoller=setInterval(()=>{this.refreshRepositoriesSilently()},2e4)),this._repoDetailsPoller||(this._repoDetailsPoller=setInterval(()=>{this.currentRepo&&this.loadRepositoryDetails(this.currentRepo)},1e4));const e=document.getElementById("git-live-badge");e&&e.classList.add("is-live"),window.addEventListener("storage",e=>{e&&"git_manager_last_checkout"===e.key&&(this._lastRepoListSignature=null,this.loadRepositories(),this.currentRepo&&this.loadRepositoryDetails(this.currentRepo))})}async refreshRepositoriesSilently(){try{const e=await this.fetchRepositories(),t=this._computeRepoListSignature(e);if(this._lastRepoListSignature&&t===this._lastRepoListSignature)return;this.renderRepositories(e),this._lastRepoListSignature=t}catch(e){}}_computeRepoListSignature(e){try{const t=e=>({id:String(e.id??""),name:e.name??"",path:e.path??"",activeBranch:e.activeBranch??"",hasChanges:!!e.hasChanges,ahead:Number(e.ahead??0)||0,behind:Number(e.behind??0)||0,folderExists:!!e.folderExists,repoType:e.repoType??"",active:!!e.active}),n=e.map(t).sort((e,t)=>e.id>t.id?1:e.id<t.id?-1:0);return JSON.stringify(n)}catch(e){return""}}populateRepositoryDetails(e){const t={"repo-name":e.name||"-","repo-path":e.path||"-","repo-branch":e.activeBranch||"Unknown","repo-status":this.getStatusText(e),"repo-remote":e.remoteUrl||"-"};Object.keys(t).forEach(e=>{const n=document.getElementById(e);n&&(n.textContent=t[e])});const n=document.getElementById("repo-details-name");n&&(n.textContent=e.name||"Repository"),this.updateOverviewSection(e);const o=this.shouldReloadCommits(e),s=this.shouldReloadBranches(e);o&&this.loadCommits(e.id),s&&this.loadBranches(e.id),this._lastRepoData[e.id]={activeBranch:e.activeBranch,ahead:e.ahead,behind:e.behind}}shouldReloadCommits(e){if(!this._lastRepoData||!this._lastRepoData[e.id])return!0;const t=this._lastRepoData[e.id];return t.activeBranch!==e.activeBranch||Math.abs((t.ahead||0)-(e.ahead||0))>0||Math.abs((t.behind||0)-(e.behind||0))>0}shouldReloadBranches(e){return!this._lastRepoData||!this._lastRepoData[e.id]||this._lastRepoData[e.id].activeBranch!==e.activeBranch}forceReloadCommits(e){this.loadCommits(e)}forceReloadBranches(e){this.loadBranches(e)}updateRepositoryDisplay(e){const t={"repo-name":e.name,"repo-path":e.path,"repo-branch":e.activeBranch,"repo-status":e.hasChanges?"Has Changes (Uncommitted)":"Clean","repo-remote":e.remoteUrl};for(const[e,n]of Object.entries(t)){const t=document.getElementById(e);t&&(t.textContent=n)}const n=document.querySelector(".git-repo-header h2");n&&(n.textContent=e.name||"Repository"),document.querySelectorAll("[data-repo-name]").forEach(t=>{t.textContent=e.name||"Repository"}),document.querySelectorAll("[data-repo-path]").forEach(t=>{t.textContent=e.path||""}),document.querySelectorAll("[data-repo-remote]").forEach(t=>{t.textContent=e.remoteUrl||"No remote configured"}),document.querySelectorAll("[data-repo-status]").forEach(t=>{t.textContent=e.hasChanges?"Modified":"Clean",t.className=e.hasChanges?"status-modified":"status-clean"}),document.querySelectorAll("[data-repo-branch]").forEach(t=>{t.textContent=e.activeBranch||"Unknown"});const o=new CustomEvent("repositoryUpdated",{detail:{repository:e}});document.dispatchEvent(o),this.addUpdateVisualFeedback()}addUpdateVisualFeedback(){document.querySelectorAll("[data-repo-name], [data-repo-path], [data-repo-branch], [data-repo-status]").forEach(e=>{e.classList.add("repository-updated"),setTimeout(()=>{e.classList.remove("repository-updated")},500)})}focusSearch(){const e=document.querySelector(".git-search-input");e&&e.focus()}async gitOperation(e,t){if(t){this.showProgress(e);try{(await this.apiCall("git_manager_repo_git",{id:t,op:e})).success?(this.showNotification(`${e} completed successfully`,"success"),this.loadRepositoryDetails(t),this.loadRepositories()):this.showNotification(`Error during ${e}`,"error")}catch(t){this.showNotification(`Error during ${e}`,"error")}this.hideProgress()}else this.showNotification(WPGitManagerGlobal.translations.noRepositorySelected,"warning")}showBranches(){const e=document.querySelector('.git-repo-tab[data-tab="branches"]');e&&e.click()}async troubleshootRepo(){if(this.currentRepo){this.showProgress(WPGitManagerGlobal.translations.runningProfessionalTroubleshooting);try{const e=await this.apiCall("git_manager_repo_troubleshoot",{id:this.currentRepo});e.success?this.showTroubleshootModal(e.data.html):this.showNotification("Troubleshooting failed: "+(e.data||WPGitManagerGlobal.translations.unknownError),"error")}catch(e){this.showNotification("Troubleshooting error: "+e.message,"error")}finally{this.hideProgress()}}else this.showNotification(WPGitManagerGlobal.translations.noRepositorySelected,"warning")}showTroubleshootModal(e){const t=document.createElement("div");t.className="git-modal-overlay",t.id="troubleshoot-modal",t.innerHTML=`\n            <div class="git-modal-content git-modal-large">\n                <div class="git-modal-header">\n                    <h3><span class="dashicons dashicons-hammer"></span> Professional Troubleshooting Results</h3>\n                    <button class="git-modal-close" onclick="GitManager.closeTroubleshootModal()"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg></button>\n                </div>\n                <div class="git-modal-body">\n                    <div class="troubleshoot-results">\n                        ${e}\n                    </div>\n                </div>\n                <div class="git-modal-footer">\n                    <button class="git-action-btn git-secondary-btn" onclick="GitManager.closeTroubleshootModal()">Close</button>\n                    <button class="git-action-btn" onclick="GitManager.fixPermission()">Fix Permissions</button>\n                </div>\n            </div>\n        `,document.body.appendChild(t)}closeTroubleshootModal(){const e=document.getElementById("troubleshoot-modal");e&&e.remove()}async fixPermission(){if(this.currentRepo){this.showNotification(WPGitManagerGlobal.translations.requestingPermissionFix,"info",{duration:4e3}),this.showProgress(WPGitManagerGlobal.translations.fixingRepositoryPermissions);try{const e=await this.apiCall("git_manager_fix_permission",{id:this.currentRepo});if(e.success)this.showNotification(WPGitManagerGlobal.translations.permissionsFixedSuccessfully,"success"),this.loadRepositoryDetails(this.currentRepo);else{const t=this.extractErrorMessage(e);this.showNotification(`${WPGitManagerGlobal.translations.permissionFixFailed}: ${t}`,"error")}}catch(e){this.showNotification(`${WPGitManagerGlobal.translations.permissionFixError}: ${e.message}`,"error")}finally{this.hideProgress()}}else this.showNotification(WPGitManagerGlobal.translations.noRepositorySelected,"warning")}showProgress(e=WPGitManagerGlobal.translations.processing){"pull"===e&&(e=WPGitManagerGlobal.translations.pullingRepository),"push"===e&&(e=WPGitManagerGlobal.translations.pushingRepository),"fetch"===e&&(e=WPGitManagerGlobal.translations.fetchingRepository);try{if(this._progressToast&&document.body.contains(this._progressToast)){const t=this._progressToast.querySelector(".notification-message");return void(t&&(t.textContent=e))}}catch(e){}this._progressToast=this.showNotification(e,"info",{duration:0,showProgress:!1})}hideProgress(){if(this._progressToast){const e=this._progressToast;try{e.classList.add("closing"),setTimeout(()=>e.remove(),200)}catch(t){try{e.remove()}catch(e){}}this._progressToast=null}const e=document.getElementById("git-live-badge");!e||this._repoListPoller||this._repoDetailsPoller||e.classList.remove("is-live")}updateOverviewSection(e){try{this.updateRepositoryStatus(e)}catch(e){}try{this.updateBranchInformation(e)}catch(e){}try{this.updateChangesInformation(e)}catch(e){}try{this.updateRecommendations(e)}catch(e){}}updateRepositoryStatus(e){const t=document.getElementById("repo-status-indicator"),n=document.getElementById("repo-status-content");let o=t?.querySelector(".status-dot");const s=document.getElementById("repo-status-label"),i=document.getElementById("repo-status-body");if(!t||!n)return;o||(o=document.createElement("span"),o.className="status-dot",t.prepend(o));let a="clean",r="Repository is clean and up to date.",l="clean";const c=parseInt(e.ahead??0,10)||0,d=parseInt(e.behind??0,10)||0;e.hasChanges?(a="changes",r="Repository has uncommitted changes.",l="changes"):c>0&&d>0?(a="diverged",r="Repository has diverged from remote. Manual merge needed.",l="diverged"):c>0?(a="ahead",r=("undefined"!=typeof WPGitManagerGlobal&&WPGitManagerGlobal?.translations?.repositoryIsAheadOfRemote||"Repository is ahead of remote by {count} commit(s).").replace("{count}",c),l="ahead"):d>0&&(a="behind",r=("undefined"!=typeof WPGitManagerGlobal&&WPGitManagerGlobal?.translations?.repositoryIsBehindRemote||"Repository is behind remote by {count} commit(s).").replace("{count}",d),l="behind"),o&&(o.className=`status-dot ${l}`),s&&(s.textContent="clean"===a?"Clean":"changes"===a?"Has Changes":"ahead"===a?"Ahead":"behind"===a?"Behind":"Diverged"),i?i.innerHTML=`<p class="value">${r}</p>`:n.innerHTML=`<p class="value">${r}</p>`;try{t.querySelectorAll(".skeleton").forEach(e=>e.remove()),n.querySelectorAll(".skeleton").forEach(e=>e.remove())}catch(e){}}updateBranchInformation(e){const t=document.getElementById("branch-name"),n=document.getElementById("branch-sync-status"),o=document.getElementById("repo-branch-content");if(t&&(t.textContent=e.activeBranch||"Unknown"),n){let t="";t=e.ahead>0&&e.behind>0?`\n                    <div class="sync-indicator ahead">\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16"><path d="m18 9-6-6-6 6"/><path d="M12 3v14"/><path d="M5 21h14"/></svg>\n                        <span>Ahead by ${e.ahead}</span>\n                    </div>\n                    <div class="sync-indicator behind">\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16"><path d="M12 17V3"/><path d="m6 11 6 6 6-6"/><path d="M19 21H5"/></svg>\n                        <span>Behind by ${e.behind}</span>\n                    </div>\n                `:e.ahead>0?`\n                    <div class="sync-indicator ahead">\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16"><path d="m18 9-6-6-6 6"/><path d="M12 3v14"/><path d="M5 21h14"/></svg>\n                        <span>Ahead by ${e.ahead} commit(s)</span>\n                    </div>\n                `:e.behind>0?`\n                    <div class="sync-indicator behind">\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16"><path d="M12 17V3"/><path d="m6 11 6 6 6-6"/><path d="M19 21H5"/></svg>\n                        <span>Behind by ${e.behind} commit(s)</span>\n                    </div>\n                `:'\n                    <div class="sync-indicator synced">\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16"><path d="M20 6 9 17l-5-5"/></svg>\n                        <span>Synchronized with remote</span>\n                    </div>\n                ',n.innerHTML=t}o&&o.querySelectorAll(".skeleton").forEach(e=>e.remove())}updateChangesInformation(e){const t=document.getElementById("changes-list"),o=document.getElementById("repo-changes-content"),s=document.getElementById("changes-count");t&&(n.safeShowSkeleton(t,"list",3),this.loadDetailedStatus(e.id).then(e=>{e?this.populateChangesList(e):(t.innerHTML='<p class="value" style="text-align: center;">No changes found.</p>',this.updateChangesCount(0)),o&&o.querySelectorAll(".skeleton").forEach(e=>e.remove()),s&&s.querySelectorAll(".skeleton").forEach(e=>e.remove())}).catch(e=>{n.hideSkeleton(t,"list"),t.innerHTML='<p class="value" style="text-align: center;">Error loading changes.</p>',this.updateChangesCount(0),o&&o.querySelectorAll(".skeleton").forEach(e=>e.remove()),s&&s.querySelectorAll(".skeleton").forEach(e=>e.remove())}))}updateChangesCount(e){const t=document.getElementById("changes-count");if(t){const n=t.querySelector(".count-badge");n&&(n.textContent=e.toString(),n.className=e>0?"count-badge has-changes":"count-badge")}}async loadDetailedStatus(e){try{if("undefined"==typeof gitManagerAjax)return null;const t=new FormData;t.append("action",gitManagerAjax.actions.status),t.append("nonce",gitManagerAjax.nonce),t.append("id",e);const n=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t});if(n.ok){const e=await n.json();if(e.success)return e.data}else await n.text()}catch(e){}return null}populateChangesList(e){const t=document.getElementById("changes-list");if(!t)return;if(!e)return n.hideSkeleton(t,"list"),void(t.innerHTML="<p>Error loading changes</p>");let o="",s=0;e.stagedFiles&&e.stagedFiles.length>0&&e.stagedFiles.forEach(e=>{o+=`\n                    <div class="change-row change-row--staged">\n                        <div class="change-row__left">\n                            <span class="change-icon staged" aria-hidden="true">●</span>\n                        </div>\n                        <div class="change-row__main">\n                            <div class="change-file">${this.escapeHtml(e)}</div>\n                            <div class="change-meta">Staged</div>\n                        </div>\n                    </div>\n                `,s++}),e.modifiedFiles&&e.modifiedFiles.length>0&&e.modifiedFiles.forEach(e=>{o+=`\n                    <div class="change-row change-row--modified">\n                        <div class="change-row__left"><span class="change-icon modified" aria-hidden="true">●</span></div>\n                        <div class="change-row__main"><div class="change-file">${this.escapeHtml(e)}</div><div class="change-meta">Modified</div></div>\n                    </div>\n                `,s++}),e.untrackedFiles&&e.untrackedFiles.length>0&&e.untrackedFiles.forEach(e=>{o+=`\n                    <div class="change-row change-row--untracked">\n                        <div class="change-row__left"><span class="change-icon untracked" aria-hidden="true">●</span></div>\n                        <div class="change-row__main"><div class="change-file">${this.escapeHtml(e)}</div><div class="change-meta">Untracked</div></div>\n                    </div>\n                `,s++});const i=document.getElementById("changes-count");if(i){const e=i.querySelector(".count-badge");e&&(e.textContent=s,e.className=s>0?"count-badge has-changes":"count-badge")}o?(n.hideSkeleton(t,"list"),t.innerHTML=`<div class="change-rows">${o}</div>`):(n.hideSkeleton(t,"list"),t.innerHTML="<p class='value'>No uncommitted changes</p>")}updateRecommendations(e){const t=document.getElementById("repo-recommendations"),n=document.getElementById("recommendations-list");if(!t||!n)return;const o=[];if(e.hasChanges&&o.push({type:"warning",title:WPGitManagerGlobal.translations.uncommittedChanges,description:WPGitManagerGlobal.translations.youHaveUncommittedChanges,icon:"⚠️"}),e.behind&&e.behind>0&&o.push({type:"warning",title:WPGitManagerGlobal.translations.behindRemote,description:WPGitManagerGlobal.translations.yourLocalBranchIsBehind.replace("{count}",e.behind),icon:"⬇️"}),e.ahead&&e.ahead>0&&o.push({type:"info",title:WPGitManagerGlobal.translations.aheadOfRemote,description:WPGitManagerGlobal.translations.yourLocalBranchIsAhead.replace("{count}",e.ahead),icon:"⬆️"}),e.hasChanges||e.ahead&&0!==e.ahead||e.behind&&0!==e.behind||o.push({type:"success",title:WPGitManagerGlobal.translations.repositoryStatus,description:WPGitManagerGlobal.translations.yourRepositoryIsClean,icon:"✅"}),o.length>0){t.style.display="block";const e=o.map((e,t)=>{const n=(e.type,"");return`\n                        <div class="recommendation-item ${e.type}" data-rec-index="${t}">\n                            <div class="recommendation-icon">${e.icon}</div>\n                            <div class="recommendation-content">\n                                <div class="recommendation-title">${e.title}</div>\n                                <div class="recommendation-description">${e.description}</div>\n                            </div>\n                            <div class="recommendation-actions">${n}</div>\n                        </div>\n                    `}).join("");n.innerHTML=e,n.querySelectorAll("[data-rec-action]")?.forEach(e=>{e.addEventListener("click",t=>{const n=e.getAttribute("data-rec-action"),o=e.closest(".recommendation-item");o?.getAttribute("data-rec-index"),"investigate"===n&&"undefined"!=typeof gitManager&&"function"==typeof gitManager.runTroubleshoot&&gitManager.runTroubleshoot()})})}else t.style.display="none"}showLoadingState(){n.showRepoDetailsSkeleton()}hideLoadingState(){n.hideRepoDetailsSkeleton()}async loadCommits(e,t=10){n.showCommitsSkeleton(),this.showCommitsLoadingFeedback();try{const o=new FormData;o.append("action",gitManagerAjax.actions.log),o.append("nonce",gitManagerAjax.nonce),o.append("id",e),o.append("limit",t);const s=new AbortController,i=setTimeout(()=>{s.abort()},25e3),a=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:o,signal:s.signal});if(clearTimeout(i),a.ok){const e=await a.json();e.success?(n.hideCommitsSkeleton(),this.hideCommitsLoadingFeedback(),this.populateCommits(e.data)):(n.hideCommitsSkeleton(),this.hideCommitsLoadingFeedback(),this.showCommitsError(e.data||"Unknown error"))}else n.hideCommitsSkeleton(),this.hideCommitsLoadingFeedback(),this.showCommitsError(`HTTP ${a.status}: ${a.statusText}`)}catch(e){n.hideCommitsSkeleton(),this.hideCommitsLoadingFeedback(),"AbortError"===e.name?this.showCommitsError("Request timed out. The repository might be slow or have many commits. Try reducing the number of commits to load."):this.showCommitsError(e.message)}}showCommitsLoadingFeedback(){const e=document.querySelector(".commits-list");if(e){const t=document.createElement("div");t.className="commits-loading-feedback",t.innerHTML='\n                <div class="loading-indicator">\n                    <div class="spinner"></div>\n                    <p>Loading commits... This may take a moment for large repositories.</p>\n                </div>\n            ',e.appendChild(t)}}hideCommitsLoadingFeedback(){const e=document.querySelector(".commits-loading-feedback");e&&e.remove()}showCommitsError(e){const t=document.querySelector(".commits-list");t&&(t.innerHTML=`\n                <div class="commits-error">\n                    <p><strong>Error loading commits:</strong> ${e}</p>\n                    <button class="retry-button" onclick="gitManager.retryLoadCommits()">Retry</button>\n                </div>\n            `)}retryLoadCommits(){this.currentRepo&&this.loadCommits(this.currentRepo.id,5)}populateCommits(e){const t=document.querySelector(".commits-list");if(!t)return;if(!e||0===e.length)return void(t.innerHTML="<p>No commits found for this branch.</p>");const n=e.map((e,t)=>`\n                <div class="git-commit-item ${0===t?"latest":""}">\n                    <div class="git-avatar-container">\n                        <img class="commit-avatar" src="${this.escapeHtml(e.gravatar_url||"")}" alt="${this.escapeHtml(e.author_name)}">\n                    </div>\n                    <div class="git-commit-content">\n                        <div class="git-commit-top">\n                            <a class="git-commit-hash" href="#">${this.escapeHtml(e.hash)}</a>\n                            <span class="git-commit-date">${this.escapeHtml(e.date)}</span>\n                        </div>\n                        <div class="git-commit-message">${this.escapeHtml(e.message)}</div>\n                        <div class="git-commit-meta">\n                            <span class="git-commit-author">${this.escapeHtml(e.author_name)}</span>\n                            <a class="git-commit-view" href="#" data-hash="${this.escapeHtml(e.hash)}">View</a>\n                        </div>\n                    </div>\n                </div>\n            `).join("");t.innerHTML=n}async loadBranches(e){const t=document.querySelector(".branches-list");if(t){n.showBranchesSkeleton();try{const o=new FormData;o.append("action",gitManagerAjax.actions.get_branches),o.append("nonce",gitManagerAjax.nonce),o.append("id",e);const s=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:o});if(s.ok){const e=await s.json();e.success?(n.hideBranchesSkeleton(),this.populateBranches(e.data)):(n.hideBranchesSkeleton(),t.innerHTML=`<p>Error loading branches: ${e.data}</p>`)}else n.hideBranchesSkeleton(),t.innerHTML="<p>Error loading branches.</p>"}catch(e){n.hideBranchesSkeleton(),t.innerHTML="<p>Error loading branches.</p>"}}}populateBranches(e){const t=document.querySelector(".branches-list"),n=document.getElementById("branch-search-input");if(!t||!n)return;const{branches:o,activeBranch:s}=e;if(0===o.length)return void(t.innerHTML="<p>No branches found.</p>");const i=(e="")=>{const n=o.filter(t=>t.toLowerCase().includes(e.toLowerCase()));if(0===n.length)return void(t.innerHTML="<p>No matching branches found.</p>");const i=n.map(e=>{const t=e.replace("* ","")===s,n=e.replace("* ","");return`\n                <div class="branch-item ${t?"active":""} ${"main"===n||"master"===n?"branch-item-main":""}">\n                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="branch-icon"><line x1="6" x2="6" y1="3" y2="15"/><circle cx="18" cy="6" r="3"/><circle cx="6" cy="18" r="3"/><path d="M18 9a9 9 0 0 1-9 9"/></svg>\n                    <span class="branch-name">${this.escapeHtml(n)}</span>\n                    <div class="branch-actions">\n                        ${t?'<span class="current-branch-badge">Current</span>':`<button class="git-action-btn checkout-btn" data-branch="${this.escapeHtml(n)}">Checkout</button>`}\n                    </div>\n                </div>\n            `}).join("");t.innerHTML=i,t.querySelectorAll(".checkout-btn").forEach(e=>{e.addEventListener("click",e=>{const t=e.target.dataset.branch;this.checkoutBranch(this.currentRepo,t)})})};i(),n.addEventListener("input",e=>{i(e.target.value)})}async checkoutBranch(e,t){this.showProgress(`Checking out ${t}...`);try{const n=new FormData;n.append("action",gitManagerAjax.actions.checkout_branch),n.append("nonce",gitManagerAjax.nonce),n.append("id",e),n.append("branch",t);const o=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:n}),s=await o.json();if(!s.success)throw new Error(s.data||`Failed to checkout ${t}`);this.showNotification(`Successfully checked out to ${t}`,"success"),await this.loadRepositories(),this.selectRepository(e),this.switchTab("overview")}catch(e){this.showNotification(e.message,"error")}finally{this.hideProgress()}}handleAction(e,t){const n=t.closest(".git-repo-card")?.dataset.repoId||this.currentRepo;switch(e){case"pull":this.pullRepository(n);break;case"push":this.pushRepository(n);break;case"fetch":this.fetchRepository(n);break;case"status":this.checkStatus(n);break;case"troubleshoot":this.showRepositoryTroubleshooting();break;case"fix-permission":this.fixPermission();break;case"delete":this.deleteRepository(n)}}async pullRepository(e){if(e){this.showNotification(WPGitManagerGlobal.translations.pullingChanges,"info");try{const t=new FormData;t.append("action",gitManagerAjax.actions.repo_git),t.append("nonce",gitManagerAjax.nonce),t.append("id",e),t.append("op","pull");const n=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const o=await n.json();if(!o.success)throw new Error(o.data||"Failed to pull changes");this.showNotification("Repository updated successfully","success"),this.loadRepositories(),this.checkStatus(e),this.currentRepo===e&&this.loadRepositoryDetails(e)}catch(e){this.showNotification("Failed to pull changes: "+e.message,"error")}}}async pushRepository(e){if(e){this.showNotification(WPGitManagerGlobal.translations.pushingChanges,"info");try{const t=new FormData;t.append("action",gitManagerAjax.actions.repo_push),t.append("nonce",gitManagerAjax.nonce),t.append("id",e);const n=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const o=await n.json();if(!o.success)throw new Error(o.data||"Failed to push changes");this.showNotification(WPGitManagerGlobal.translations.changesPushedSuccessfully,"success"),this.loadRepositories(),this.checkStatus(e),this.currentRepo===e&&this.loadRepositoryDetails(e)}catch(e){this.showNotification("Failed to push changes: "+e.message,"error")}}}async fetchRepository(e){if(e){this.showNotification(WPGitManagerGlobal.translations.fetchingUpdates,"info");try{const t=new FormData;t.append("action",gitManagerAjax.actions.repo_git),t.append("nonce",gitManagerAjax.nonce),t.append("id",e),t.append("op","fetch");const n=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const o=await n.json();if(!o.success)throw new Error(o.data||"Failed to fetch updates");this.showNotification("Repository fetched successfully","success"),this.loadRepositories(),this.checkStatus(e),this.currentRepo===e&&this.loadRepositoryDetails(e)}catch(e){this.showNotification("Failed to fetch updates: "+e.message,"error")}}}async checkStatus(e){if(e){this.showNotification(WPGitManagerGlobal.translations.checkingStatus,"info");try{const t=new FormData;t.append("action",gitManagerAjax.actions.repo_status),t.append("nonce",gitManagerAjax.nonce),t.append("id",e);const n=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const o=await n.json();if(!o.success)throw new Error(o.data||"Failed to check status");this.showNotification(WPGitManagerGlobal.translations.statusCheckedSuccessfully,"success"),this.loadRepositories(),this.currentRepo===e&&this.loadRepositoryDetails(e)}catch(e){this.showNotification("Failed to check status: "+e.message,"error")}}}async deleteRepository(e){if(e&&confirm("Are you sure you want to delete this repository? This action cannot be undone.")){this.showNotification(WPGitManagerGlobal.translations.deletingRepository,"info");try{const t=new FormData;t.append("action",gitManagerAjax.actions.repo_delete),t.append("id",e),t.append("nonce",gitManagerAjax.nonce);const n=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const o=await n.json();if(!o.success)throw new Error(o.data||"Failed to delete repository");this.showNotification("Repository deleted successfully","success"),this.loadRepositories()}catch(e){this.showNotification("Failed to delete repository: "+e.message,"error")}}}async reCloneRepository(t){if(t&&confirm("Are you sure you want to re-clone this repository? This will download the repository again from the remote source.")){this.showNotification(e("reCloningRepository","Re-cloning repository..."),"info");try{const e=new FormData;e.append("action",gitManagerAjax.actions.repo_reclone),e.append("id",t),e.append("nonce",gitManagerAjax.nonce);const n=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:e});if(!n.ok)throw new Error(`HTTP error! status: ${n.status}`);const o=await n.json();if(!o.success)throw new Error(o.data||"Failed to re-clone repository");this.showNotification("Repository re-cloned successfully","success"),this.loadRepositories()}catch(e){this.showNotification("Failed to re-clone repository: "+e.message,"error")}}}showNotification(e,t="info",n={}){const{duration:o=5e3,showProgress:s=!0}=n;let i=document.getElementById("git-notifications");i||(i=document.createElement("div"),i.id="git-notifications",document.body.appendChild(i));const a={success:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="notification-icon"><path d="M18 6 7 17l-5-5"/><path d="m22 10-7.5 7.5L13 16"/></svg>',error:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="notification-icon"><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"></path><path d="m14.5 9.5-5 5"></path><path d="m9.5 9.5 5 5"></path></svg>',warning:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="notification-icon"><path d="M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z"/><path d="M12 8v4"/><path d="M12 16h.01"/></svg>',info:'<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="currentColor" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="notification-icon"><path d="M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z"/><line x1="12" x2="12" y1="16" y2="12"/><line x1="12" x2="12.01" y1="8" y2="8"/></svg>'},r="error"===t||"warning"===t?"alert":"status",l=document.createElement("div");l.className=`git-notification git-notification-${t}`,l.setAttribute("role",r),l.setAttribute("aria-live","error"===t?"assertive":"polite"),l.innerHTML=`\n            <div class="notification-content">\n                ${a[t]||a.info}\n                <div class="notification-message">${this.escapeHtml(e)}</div>\n                <button class="notification-close" aria-label="Close notification"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg></button>\n            </div>\n            <div class="notification-progress" style="${s&&0!==o?"":"display:none;"}"><div class="notification-progress-fill"></div></div>\n        `,i.appendChild(l);const c=l.querySelector(".notification-progress-fill");let d=Date.now(),h=o,p=null,u=null;const g=()=>{if(o>0&&c){const e=Date.now()-d,t=Math.max(0,1-e/o);if(c.style.width=`${Math.max(0,100*t)}%`,e>=o)return void y()}u=requestAnimationFrame(g)},m=()=>{o>0&&(d=Date.now(),u=requestAnimationFrame(g),p=window.setTimeout(y,h))},v=()=>{u&&cancelAnimationFrame(u),p&&clearTimeout(p),o>0&&(h-=Date.now()-d)},y=()=>{v(),l.classList.add("closing"),setTimeout(()=>l.remove(),200)};return l.addEventListener("mouseenter",v),l.addEventListener("mouseleave",m),l.querySelector(".notification-close").addEventListener("click",y),m(),this.notifications.push(l),l}escapeHtml(e){const t=document.createElement("div");return t.textContent=e,t.innerHTML}debounce(e,t){let n;return function(...o){clearTimeout(n),n=setTimeout(()=>{clearTimeout(n),e(...o)},t)}}switchTab(e){document.querySelectorAll(".git-repo-tab").forEach(e=>{e.classList.remove("active")});const t=document.querySelector(`[data-tab="${e}"]`);t&&t.classList.add("active"),this.showTabContent(e),"commits"===e&&this.currentRepo&&this.forceReloadCommits(this.currentRepo),"branches"===e&&this.currentRepo&&this.forceReloadBranches(this.currentRepo),"troubleshooting"===e&&this.currentRepo&&this.initializeTroubleshootingTab(),"settings"===e&&this.currentRepo&&this.initializeSettingsTab()}initializeTroubleshootingTab(){const e=document.getElementById("repo-manager-output");e&&(window.gitTroubleshooter&&window.gitTroubleshooter.repoId===this.currentRepo||(e.innerHTML="","undefined"!=typeof GitTroubleshooter?(window.gitTroubleshooter=new GitTroubleshooter,window.gitTroubleshooter.init(this.currentRepo)):e.innerHTML='\n                <div class="skeleton-tab-content">\n                    <div class="skeleton-tab-header">\n                        <div class="skeleton skeleton-tab-title"></div>\n                        <div class="skeleton-tab-actions">\n                            <div class="skeleton skeleton-tab-action"></div>\n                            <div class="skeleton skeleton-tab-action"></div>\n                        </div>\n                    </div>\n                    <div class="skeleton-list">\n                        <div class="skeleton-list-item">\n                            <div class="skeleton skeleton-list-icon"></div>\n                            <div class="skeleton-list-content">\n                                <div class="skeleton skeleton-list-title"></div>\n                                <div class="skeleton skeleton-list-subtitle"></div>\n                            </div>\n                        </div>\n                        <div class="skeleton-list-item">\n                            <div class="skeleton skeleton-list-icon"></div>\n                            <div class="skeleton-list-content">\n                                <div class="skeleton skeleton-list-title"></div>\n                                <div class="skeleton skeleton-list-subtitle"></div>\n                            </div>\n                        </div>\n                        <div class="skeleton-list-item">\n                            <div class="skeleton skeleton-list-icon"></div>\n                            <div class="skeleton-list-content">\n                                <div class="skeleton skeleton-list-title"></div>\n                                <div class="skeleton skeleton-list-subtitle"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            '))}showTabContent(e){document.querySelectorAll(".tab-content").forEach(e=>{e.style.display="none"});const t=document.querySelector(`[data-tab-content="${e}"]`);t&&(t.style.display="block")}browsePath(e){this.directorySelectorTarget=e,this.showNewDirectorySelector()}showNewDirectorySelector(){const e=this.showModal("new-directory-selector",'\n            <div class="git-modal-content new-directory-selector-modal">\n                <div class="git-modal-header">\n                    <h3>\n                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z"></path><path d="M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z"></path><path d="M3 5a2 2 0 0 0 2 2h3"></path><path d="M3 3v13a2 2 0 0 0 2 2h3"></path></svg>\n                        Directory Browser for Repository Manager\n                    </h3>\n                    <button class="git-modal-close" aria-label="Close modal"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg></button>\n                </div>\n\n                <div class="git-modal-body">\n                    <div class="new-directory-browser">\n                        \x3c!-- Enhanced Search Bar --\x3e\n                        <div class="new-search-container">\n                            <div class="new-search-wrapper">\n                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="new-search-icon">\n                                    <circle cx="11" cy="11" r="8"></circle>\n                                    <path d="m21 21-4.35-4.35"></path>\n                                </svg>\n                                <input\n                                    type="text"\n                                    class="new-search-input-enhanced"\n                                    placeholder="Search folders by name..."\n                                    id="new-search-enhanced"\n                                    autocomplete="off"\n                                >\n                                <button class="new-search-clear" id="new-search-clear" style="display: none;">\n                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                        <path d="M18 6 6 18"></path>\n                                        <path d="m6 6 12 12"></path>\n                                    </svg>\n                                </button>\n                            </div>\n                            <div class="new-search-status" id="new-search-status"></div>\n                        </div>\n\n                        \x3c!-- Breadcrumb Navigation --\x3e\n                        <div class="new-breadcrumb" id="new-breadcrumb">\n                            <button class="new-breadcrumb-item active" data-path="/">Root</button>\n                        </div>\n\n                        \x3c!-- Toolbar --\x3e\n                        <div class="new-toolbar">\n                            <div class="new-actions">\n                                <button class="new-back-btn" id="new-back-btn" title="Go Back" style="display: none;">\n                                    <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">\n                                        <path d="m15 18-6-6 6-6"/>\n                                    </svg>\n                                    Back\n                                </button>\n                                <button class="new-action-btn" id="new-create-folder" title="Create Folder">\n                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 10v6"/><path d="M9 13h6"/><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"/></svg>\n                                </button>\n                                <button class="new-action-btn" id="new-delete-folder" title="Delete Folder">\n                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6"/><path d="M3 6h18"/><path d="M8 6V4c0-1 1-2 2-2h4a2 2 0 0 1 2 2v2"/></svg>\n                                </button>\n                                <button class="new-action-btn" id="new-rename" title="Rename">\n                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/><path d="m15 5 4 4"/></svg>\n                                </button>\n                                <button class="new-action-btn" id="new-refresh" title="Refresh">\n                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"/><path d="M21 3v5h-5"/><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"/><path d="M8 16H3v5"/></svg>\n                                </button>\n                            </div>\n                        </div>\n\n                        \x3c!-- Directory List --\x3e\n                        <div class="new-directory-list" id="new-directory-list">\n                            \x3c!-- Loading skeleton will be shown here --\x3e\n                        </div>\n                    </div>\n                </div>\n\n                <div class="git-modal-footer">\n                    <div class="new-selected-path" id="new-selected-path" style="display: none;">\n                        <span class="new-selected-label">Selected:</span>\n                        <span class="new-selected-value" id="new-selected-value"></span>\n                    </div>\n                    <div class="new-footer-actions">\n                        <button type="button" class="git-action-btn git-secondary-btn" id="new-cancel-btn">\n                            Cancel\n                        </button>\n                        <button type="button" class="git-action-btn" id="new-select-btn" disabled>\n                            Select Directory\n                        </button>\n                    </div>\n                </div>\n            </div>\n        ');e&&setTimeout(()=>{this.loadNewDirectories("",e),this.setupNewDirectoryEvents(e)},50)}async loadNewDirectories(e,t){if(!t)return;const n=t.querySelector("#new-directory-list"),o=t.querySelector("#new-breadcrumb");if(n&&o){this.showNewDirectorySkeleton(t);try{const n=new FormData;n.append("action",gitManagerAjax.actions.repo_dirs),n.append("nonce",gitManagerAjax.nonce),n.append("relative",e);const o=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:n});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);const s=await o.json();if(!s.success)throw new Error(s.data||"Failed to load directories");this.hideNewDirectorySkeleton(t),this.renderNewDirectories(s.data,e,t),this.updateNewBreadcrumb(e,t)}catch(e){this.hideNewDirectorySkeleton(t),n&&(n.innerHTML=`\n                    <div class="new-error">\n                        <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">\n                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>\n                        </svg>\n                        <span>Failed to load directories: ${e.message}</span>\n                    </div>\n                `)}}}showNewDirectorySkeleton(e){if(!e)return;const t=e.querySelector("#new-directory-list");t&&(t.innerHTML=`\n            <div class="new-skeleton">\n                ${Array(5).fill().map(()=>'\n                    <div class="new-skeleton-item">\n                        <div class="new-skeleton-icon"></div>\n                        <div class="new-skeleton-content">\n                            <div class="new-skeleton-name"></div>\n                            <div class="new-skeleton-info"></div>\n                        </div>\n                    </div>\n                ').join("")}\n            </div>\n        `)}hideNewDirectorySkeleton(e){if(!e)return;const t=e.querySelector(".new-skeleton");t&&t.remove()}renderNewDirectories(e,t,n){if(!n)return;const o=n.querySelector("#new-directory-list");if(!o)return;const s=(Array.isArray(e)?e:e&&Array.isArray(e.dirs)?e.dirs:[]).map(e=>{if(e&&(e.type||e.path))return e;const n=e?.name||"",o=e?.relative||"";if(o)return{type:"directory",writable:!0,path:o,name:n,permissions:e?.permissions||""};const s="/"===t?"":t||"";return{type:"directory",writable:!0,path:`/${s?s.replace(/\/$/,"")+"/":""}${n}`.replace(/\/+/g,"/"),name:n,permissions:e?.permissions||""}});s&&0!==s.length?o.innerHTML=`\n            <div class="new-items">\n                ${s.map(e=>this.createNewDirectoryItemHTML(e)).join("")}\n            </div>\n        `:o.innerHTML='\n                <div class="new-empty">\n                    <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">\n                        <path d="M3 7h5l2 3h11v9a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2Z"/>\n                    </svg>\n                    <span>No folders found</span>\n                </div>\n            '}createNewDirectoryItemHTML(e){return`\n            <div class="new-directory-item" data-path="${e.path}">\n                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"/></svg>\n                <div class="new-directory-info">\n                    <div class="new-directory-name">${this.escapeHtml(e.name)}</div>\n                    <div class="new-directory-path">${e.path}</div>\n                </div>\n                <button class="new-item-action" title="Enter folder">\n                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                        <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>\n                    </svg>\n                </button>\n            </div>\n        `}updateNewBreadcrumb(e,t){if(!t)return;const n=t.querySelector("#new-breadcrumb"),o=t.querySelector("#new-back-btn");if(!n)return;n.classList.add("loading");const s=("string"==typeof e?e.trim():"").replace(/^[/\\]+|[/\\]+$/g,"").split(/[\\/]+/).filter(e=>e&&"."!==e&&".."!==e);if(0===s.length)return n.innerHTML='<button class="new-breadcrumb-item active" data-path="" aria-current="page">Root</button>',o&&(o.style.display="none"),void n.classList.remove("loading");let i='<button class="new-breadcrumb-item" data-path="" aria-label="Go to root directory">Root</button>',a="";s.forEach((e,t)=>{a=a?`${a}/${e}`:e;const n=t===s.length-1,o=this.escapeHtml(e),r=this.escapeHtml(a);i+=`\n                <span class="new-breadcrumb-separator" aria-hidden="true">/</span>\n                <button class="new-breadcrumb-item ${n?"active":""}" data-path="${r}" title="${o}" ${n?'aria-current="page"':`aria-label="Go to ${o} directory"`}>\n                    ${o}\n                </button>\n            `}),n.innerHTML=i,o&&(o.style.display="flex"),setTimeout(()=>{n.scrollLeft=n.scrollWidth,n.classList.remove("loading")},100)}setupNewDirectoryEvents(e){if(!e)return;e.addEventListener("click",t=>{if(t.target.matches(".new-breadcrumb-item")){t.preventDefault(),t.stopPropagation();const n=t.target.dataset.path;if(t.target.classList.contains("active"))return;t.target.style.transform="scale(0.95)",setTimeout(()=>{t.target.style.transform=""},150),this.loadNewDirectories(n,e)}});const t=e.querySelector("#new-back-btn");t&&t.addEventListener("click",t=>{t.preventDefault(),t.stopPropagation();const n=e.querySelector(".new-breadcrumb-item.active");if(!n)return;const o=n.dataset.path;if(!o)return;const s=o.split("/").filter(e=>e);s.pop();const i=s.join("/");this.loadNewDirectories(i,e)});const n=e.querySelector("#new-search-enhanced"),o=e.querySelector("#new-search-clear"),s=e.querySelector("#new-search-status");n&&(n.addEventListener("input",this.debounce(t=>{const n=t.target.value.trim();this.handleSearchInput(n,e,o,s)},300)),n.focus()),o&&o.addEventListener("click",()=>{n.value="",o.style.display="none",s&&(s.textContent="");const t=e.querySelector(".new-breadcrumb-item.active")?.dataset.path||"/";this.loadNewDirectories(t,e)});const i=e.querySelector("#new-refresh");i&&i.addEventListener("click",async t=>{t.preventDefault(),t.stopPropagation();const n=e.querySelector(".new-breadcrumb-item.active")?.dataset.path||"/";i.classList.add("loading"),i.disabled=!0;try{const t="/"===n?"":n.replace(/^\//,"");await this.loadNewDirectories(t,e)}finally{i.classList.remove("loading"),i.disabled=!1}});const a=e.querySelector("#new-create-folder");a&&a.addEventListener("click",async t=>{t.preventDefault(),t.stopPropagation();const n=e.querySelector(".new-breadcrumb-item.active")?.dataset.path||"/",o=prompt("Enter folder name:");if(o)try{const t=new FormData;t.append("action",gitManagerAjax.actions.dir_create),t.append("nonce",gitManagerAjax.nonce),t.append("relative","/"===n?"":n.replace(/^\//,"")),t.append("name",o);const s=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t}),i=await s.json();if(!i.success)throw new Error(i.data||"Create failed");this.loadNewDirectories(n,e),this.showNotification("Folder created successfully","success")}catch(e){this.showNotification(`Failed to create folder: ${e.message}`,"error")}});const r=e.querySelector("#new-delete-folder");r&&r.addEventListener("click",async t=>{t.preventDefault(),t.stopPropagation();const n=e.querySelector("#new-selected-value")?.textContent;if(n){if(confirm(`Are you sure you want to delete "${n}"? It must be empty.`))try{const t=new FormData;t.append("action",gitManagerAjax.actions.dir_delete),t.append("nonce",gitManagerAjax.nonce),t.append("relative","/"===n?"":n);const o=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t}),s=await o.json();if(!s.success)throw new Error(s.data||"Delete failed");const i=e.querySelector(".new-breadcrumb-item.active")?.dataset.path||"/";this.loadNewDirectories(i,e);const a=e.querySelector("#new-selected-path"),r=e.querySelector("#new-select-btn");a&&r&&(a.style.display="none",r.disabled=!0),this.showNotification("Folder deleted successfully","success")}catch(e){this.showNotification(`Failed to delete folder: ${e.message}`,"error")}}else this.showNotification("Please select a folder to delete","warning")});const l=e.querySelector("#new-rename");l&&l.addEventListener("click",async t=>{t.preventDefault(),t.stopPropagation();const n=e.querySelector("#new-selected-value")?.textContent;if(!n)return void this.showNotification("Please select a folder to rename","warning");const o=n.split("/").pop(),s=prompt("Enter new folder name:",o);if(s&&s!==o)try{const t=new FormData;t.append("action",gitManagerAjax.actions.dir_rename),t.append("nonce",gitManagerAjax.nonce),t.append("relative","/"===n?"":n),t.append("new_name",s);const o=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:t}),i=await o.json();if(!i.success)throw new Error(i.data||"Rename failed");const a=e.querySelector(".new-breadcrumb-item.active")?.dataset.path||"/";this.loadNewDirectories(a,e);const r=e.querySelector("#new-selected-path"),l=e.querySelector("#new-select-btn");r&&l&&(r.style.display="none",l.disabled=!0),this.showNotification("Folder renamed successfully","success")}catch(e){this.showNotification(`Failed to rename folder: ${e.message}`,"error")}}),e.addEventListener("click",t=>{const n=t.target.closest(".new-directory-item");if(!n)return;const o=n.dataset.path;if(!o)return;const s=n.classList.contains("new-search-item"),i=e.querySelector("#new-search-enhanced"),a=i&&i.value.trim();if(t.target.closest(".new-item-action"))if(t.preventDefault(),t.stopPropagation(),s||a){if(this.selectNewDirectory(o,e),i){i.value="";const t=e.querySelector("#new-search-clear"),n=e.querySelector("#new-search-status");t&&(t.style.display="none"),n&&(n.textContent="")}const t=o.split("/");t.pop();const n=t.length>0?t.join("/"):"";this.loadNewDirectories(n,e)}else this.loadNewDirectories(o,e);else e.querySelectorAll(".new-directory-item").forEach(e=>{e.classList.remove("selected")}),n.classList.add("selected"),this.selectNewDirectory(o,e)}),e.addEventListener("dblclick",t=>{const n=t.target.closest(".new-directory-item");if(n){t.preventDefault(),t.stopPropagation();const o=n.dataset.path;o&&this.loadNewDirectories(o,e)}});const c=e.querySelector("#new-select-btn");if(c){const t=this;c.addEventListener("click",n=>{n.preventDefault(),n.stopPropagation();const o=e.querySelector("#new-selected-value"),s=o?.textContent;if(s&&s.trim()){if(t.directorySelectorTarget){const e=document.querySelector(t.directorySelectorTarget);if(e){const t=s.replace(/\\/g,"/");e.value=t,e.dispatchEvent(new Event("input",{bubbles:!0}))}}setTimeout(()=>{t.closeModal("new-directory-selector")},100)}})}const d=e.querySelector("#new-cancel-btn");d&&d.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),this.closeModal("new-directory-selector")}),e.addEventListener("click",t=>{t.target===e&&this.closeModal("new-directory-selector")});const h=e.querySelector(".git-modal-close");h&&h.addEventListener("click",e=>{e.preventDefault(),e.stopPropagation(),this.closeModal("new-directory-selector")})}selectNewDirectory(e,t){if(!t)return;const n=t.querySelector("#new-selected-path"),o=t.querySelector("#new-selected-value"),s=t.querySelector("#new-select-btn");n&&o&&s&&(o.textContent=e,n.style.display="flex",s.disabled=!1)}handleSearchInput(e,t,n,o){if(!t)return;if(n&&(n.style.display=e?"flex":"none"),!e){o&&(o.textContent="");const e=t.querySelector(".new-breadcrumb-item.active")?.dataset.path||"/";this.loadNewDirectories(e,t);const n=t.querySelector(".new-search-wrapper");return void(n&&n.classList.remove("searching"))}const s=t.querySelector(".new-search-wrapper");s&&s.classList.add("searching"),o&&(o.textContent=`Searching for "${e}"...`),this.searchNewDirectories(e,t,o)}async searchNewDirectories(e,t,n){if(t){if(!e.trim()){const e=t.querySelector(".new-breadcrumb-item.active")?.dataset.path||"/";return void this.loadNewDirectories(e,t)}try{this.showNewDirectorySkeleton(t);const o=new FormData;o.append("action",gitManagerAjax.actions.repo_dirs),o.append("nonce",gitManagerAjax.nonce),o.append("query",e);const s=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:o});if(!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const i=await s.json();if(!i.success)throw new Error(i.data||"Failed to search directories");{this.hideNewDirectorySkeleton(t),this.renderSearchResults(i.data,e,t,n);const o=t.querySelector(".new-search-wrapper");o&&o.classList.remove("searching")}}catch(e){this.hideNewDirectorySkeleton(t);const o=t.querySelector(".new-search-wrapper");if(o&&o.classList.remove("searching"),n&&(n.textContent=`Search failed: ${e.message}`),t){const n=t.querySelector("#new-directory-list");n&&(n.innerHTML=`\n                        <div class="new-error">\n                            <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">\n                                <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"/>\n                            </svg>\n                            <span>Search failed: ${e.message}</span>\n                        </div>\n                    `)}}}}renderSearchResults(e,t,n,o){if(!n)return;const s=n.querySelector("#new-directory-list");if(!s)return;const i=Array.isArray(e)?e:e&&Array.isArray(e.dirs)?e.dirs:[];if(o&&(0===i.length?o.textContent=`No folders found matching "${t}"`:o.textContent=`Found ${i.length} folder${1===i.length?"":"s"} matching "${t}"`),!i||0===i.length)return void(s.innerHTML=`\n                <div class="new-empty">\n                    <svg viewBox="0 0 24 24" fill="currentColor" width="24" height="24">\n                        <path d="M3 7h5l2 3h11v9a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2Z"/>\n                    </svg>\n                    <span>No folders found matching "${t}"</span>\n                </div>\n            `);const a=i.map(e=>{const t=e?.name||"",n=e?.relative||"";return{type:"directory",writable:!0,path:n,name:t,fullPath:n,permissions:e?.permissions||""}});s.innerHTML=`\n            <div class="new-items new-search-results">\n                ${a.map(e=>this.createSearchResultItemHTML(e,t)).join("")}\n            </div>\n        `}createSearchResultItemHTML(e,t){const n=this.highlightSearchMatch(e.name,t);return`\n            <div class="new-directory-item new-search-item" data-path="${e.path}">\n                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z"/></svg>\n                <div class="new-directory-info">\n                    <div class="new-directory-name">${n}</div>\n                    <div class="new-directory-path">${e.fullPath}</div>\n                </div>\n                <button class="new-item-action" title="Select folder">\n                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                        <path d="M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"/>\n                    </svg>\n                </button>\n            </div>\n        `}highlightSearchMatch(e,t){if(!t)return this.escapeHtml(e);const n=new RegExp(`(${this.escapeRegex(t)})`,"gi");return this.escapeHtml(e).replace(n,'<mark class="search-highlight">$1</mark>')}escapeRegex(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}testDirectorySelectorButtons(){const e=document.querySelector('[data-modal-id="new-directory-selector"]');if(!e)return;const t={refresh:e.querySelector("#new-refresh"),create:e.querySelector("#new-create-folder"),delete:e.querySelector("#new-delete-folder"),select:e.querySelector("#new-select-btn"),cancel:e.querySelector("#new-cancel-btn")};Object.entries(t).forEach(([e,t])=>{})}showTroubleshooting(){"undefined"!=typeof GitTroubleshooter?this.showEnhancedTroubleshooting():this.showNotification("Enhanced troubleshooting system is loading...","info")}showEnhancedTroubleshooting(){this.currentRepo&&this.showRepositoryTroubleshooting()}showRepositoryTroubleshooting(){this.switchTab("troubleshooting")}async troubleshootRepo(){if(this.currentRepo){this.showProgress(WPGitManagerGlobal.translations.runningProfessionalTroubleshooting);try{const e=await this.apiCall("git_manager_repo_troubleshoot",{id:this.currentRepo});e.success?this.showTroubleshootModal(e.data.html):this.showNotification("Troubleshooting failed: "+(e.data||WPGitManagerGlobal.translations.unknownError),"error")}catch(e){this.showNotification("Troubleshooting error: "+e.message,"error")}finally{this.hideProgress()}}else this.showNotification(WPGitManagerGlobal.translations.noRepositorySelected,"warning")}async fixPermission(){if(this.currentRepo){this.showNotification(WPGitManagerGlobal.translations.requestingPermissionFix,"info",{duration:4e3}),this.showProgress(WPGitManagerGlobal.translations.fixingRepositoryPermissions);try{const e=await this.apiCall("git_manager_fix_permission",{id:this.currentRepo});if(e.success)this.showNotification(WPGitManagerGlobal.translations.permissionsFixedSuccessfully,"success"),this.loadRepositoryDetails(this.currentRepo);else{const t=this.extractErrorMessage(e);this.showNotification(`${WPGitManagerGlobal.translations.permissionFixFailed}: ${t}`,"error")}}catch(e){this.showNotification(`${WPGitManagerGlobal.translations.permissionFixError}: ${e.message}`,"error")}finally{this.hideProgress()}}else this.showNotification(WPGitManagerGlobal.translations.noRepositorySelected,"warning")}showTroubleshootModal(e){const t=document.createElement("div");t.className="git-modal-overlay",t.id="troubleshoot-modal",t.innerHTML=`\n            <div class="git-modal-content git-modal-large">\n                <div class="git-modal-header">\n                    <h3><span class="dashicons dashicons-hammer"></span> Professional Troubleshooting Results</h3>\n                    <button class="git-modal-close" onclick="GitManager.closeTroubleshootModal()"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg></button>\n                </div>\n                <div class="git-modal-body">\n                    <div class="troubleshoot-results">\n                        ${e}\n                    </div>\n                </div>\n                <div class="git-modal-footer">\n                    <button class="git-action-btn git-secondary-btn" onclick="GitManager.closeTroubleshootModal()">Close</button>\n                    <button class="git-action-btn" onclick="GitManager.fixPermission()">Fix Permissions</button>\n                </div>\n            </div>\n        `,document.body.appendChild(t)}async apiCall(e,t={}){const n=new FormData;n.append("action",e),n.append("nonce",gitManagerAjax.nonce);for(const[e,o]of Object.entries(t))n.append(e,o);const o=await fetch(gitManagerAjax.ajaxurl,{method:"POST",body:n});if(!o.ok)throw new Error(`HTTP error! status: ${o.status}`);return await o.json()}extractErrorMessage(e){try{const t="undefined"!=typeof WPGitManagerGlobal&&WPGitManagerGlobal.translations&&WPGitManagerGlobal.translations.unknownError||"Unknown error";if(!e)return t;const n=Object.prototype.hasOwnProperty.call(e,"data")?e.data:e;return"string"==typeof n?n:n&&"string"==typeof n.message&&n.message.trim()?n.message:n&&"string"==typeof n.error&&n.error.trim()?n.error:n&&n.test_result&&"string"==typeof n.test_result.output&&n.test_result.output.trim()?n.test_result.output:Array.isArray(n)?n.filter(Boolean).join("; "):JSON.stringify(n)}catch(e){return"Unknown error"}}getStatusText(e){return e.hasChanges?"Modified":e.ahead&&e.ahead>0?`Ahead by ${e.ahead}`:e.behind&&e.behind>0?`Behind by ${e.behind}`:"Clean"}initializeSettingsTab(){this.currentRepo?(this.loadRepositorySettings(),this.setupSettingsFormListeners()):this.showNotification(WPGitManagerGlobal.translations.noRepositorySelected,"warning")}async loadRepositorySettings(){try{const t=await this.apiCall("git_manager_repo_details",{id:this.currentRepo});if(t.success){const n=t.data,o=document.getElementById("repo-name-setting"),s=document.getElementById("repo-path-setting"),i=document.getElementById("repo-remote-setting");o&&(o.value=n.name||""),s&&(s.value=n.path||""),i&&(i.value=n.remoteUrl||""),this.showNotification(e("repositorySettingsLoaded","Repository settings loaded successfully"),"success",{duration:2e3})}else this.showNotification("Failed to load repository settings","error")}catch(t){this.showNotification(e("errorLoadingRepositorySettings","Error loading repository settings"),"error")}}setupSettingsFormListeners(){const e=document.getElementById("save-settings-btn");e&&(e.onclick=e=>{e.preventDefault(),this.saveRepositorySettings()}),document.querySelectorAll(".settings-form input, .settings-form textarea, .settings-form select").forEach(e=>{e.addEventListener("input",()=>{this.markSettingsAsModified(),"repo-path-setting"===e.id&&this.validatePathInput(e)})}),document.querySelectorAll(".settings-section .maintenance-buttons .git-action-btn").forEach(e=>{e.addEventListener("click",t=>{t.preventDefault();const n=e.dataset.action;this.handleMaintenanceAction(n)})});const t=document.getElementById("refresh-repo-list-btn");t&&t.addEventListener("click",e=>{e.preventDefault(),this.refreshRepositoryList()})}handleMaintenanceAction(e){if(this.currentRepo)switch(e){case"troubleshoot":this.switchTab("troubleshooting");break;case"fix-permission":this.fixPermission();break;default:this.showNotification(`Unknown maintenance action: ${e}`,"error")}else this.showNotification(WPGitManagerGlobal.translations.noRepositorySelected,"warning")}markSettingsAsModified(){const e=document.getElementById("save-settings-btn");e&&(e.classList.add("modified"),e.innerHTML='\n                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                    <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>\n                    <polyline points="17,21 17,13 7,13 7,21"/>\n                    <polyline points="7,3 7,8 15,8"/>\n                </svg>\n                Save Settings (Modified)\n            ')}async saveRepositorySettings(){if(!this.currentRepo)return void this.showNotification(WPGitManagerGlobal.translations.noRepositorySelected,"warning");const e=document.getElementById("repo-name-setting"),t=document.getElementById("repo-path-setting"),n=document.getElementById("repo-remote-setting");if(!e||!t)return void this.showNotification(WPGitManagerGlobal.translations.settingsFormNotFound,"error");const o={id:this.currentRepo,name:e.value.trim(),path:t.value.trim(),remoteUrl:n?n.value.trim():""};if(!o.name)return this.showNotification(WPGitManagerGlobal.translations.repositoryNameRequired,"error"),void e.focus();if(!o.path)return this.showNotification(WPGitManagerGlobal.translations.repositoryPathRequired,"error"),void t.focus();if(o.path.includes("..")||o.path.includes("//"))return this.showNotification(WPGitManagerGlobal.translations.invalidRepositoryPath,"error"),void t.focus();this.showProgress("Saving repository settings...");try{const e=await this.apiCall("git_manager_repo_update",o);if(e.success){this.showNotification("Repository settings saved successfully","success"),this.updateRepositoryDisplay(e.data),this.updateRepositoryList(),this.updateRepositoryCard(e.data),setTimeout(()=>{this.verifyRepositoryExists(e.data.id)},1e3),e.data.path&&this.checkPathExistenceAndNotify(e.data.path,e.data.name);const t=document.getElementById("save-settings-btn");t&&(t.classList.remove("modified"),t.innerHTML='\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                            <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"/>\n                            <polyline points="17,21 17,13 7,13 7,21"/>\n                            <polyline points="7,3 7,8 15,8"/>\n                        </svg>\n                        Save Settings\n                    ')}else{const t=e.data||WPGitManagerGlobal.translations.unknownError;this.showNotification("Failed to save repository settings: "+t,"error")}}catch(e){this.showNotification("Error saving repository settings: "+e.message,"error")}this.hideProgress()}updateRepositoryCard(e){const t=document.querySelector(`[data-repo-id="${e.id}"]`);if(t){const n=t.querySelector(".git-repo-name");n&&(n.textContent=e.name);const o=t.querySelector(".git-repo-path");o&&(o.textContent=e.path);const s=t.querySelector(".git-repo-status");s&&(s.textContent=e.hasChanges?"Modified":"Clean")}}async updateRepositoryList(){try{const e=await this.apiCall("git_manager_repo_list");e.success&&this.renderRepositories(e.data)}catch(e){}}async verifyRepositoryExists(e){try{const t=await this.apiCall("git_manager_repo_list");t.success&&(t.data.some(t=>t.id===e)||this.showNotification("Warning: Repository may not be visible due to path changes. Please refresh the page.","warning"))}catch(e){}}validatePathInput(e){const t=e.value.trim(),n=e.parentNode.querySelector(".form-help");t?t.includes("..")||t.includes("//")?this.showPathValidationError(e,n,"Invalid path format"):this.checkPathExists(t,e,n):this.clearPathValidation(e,n)}async checkPathExists(e,t,n){try{this.showPathValidationLoading(t,n),setTimeout(()=>{e.startsWith("/")||e.includes("wp-content")||e.includes("wp-admin")?this.showPathValidationSuccess(t,n,"Path format looks valid"):this.showPathValidationWarning(t,n,"Path may not exist on server")},500)}catch(e){this.showPathValidationError(t,n,"Error checking path")}}showPathValidationLoading(e,t){t&&(t.innerHTML='<span style="color: var(--gm-info);">Checking path...</span>'),e.style.borderColor="var(--gm-info)"}showPathValidationSuccess(e,t,n){this.clearPathValidation(e,t),e.classList.add("is-valid"),t.innerHTML=`<span style="color: var(--gm-success);">✓ ${n}</span>`}showPathValidationWarning(e,t,n){this.clearPathValidation(e,t),e.classList.add("is-warning"),t.innerHTML=`<span style="color: var(--gm-warning);">⚠ ${n}</span>`}showPathValidationError(e,t,n){this.clearPathValidation(e,t),e.classList.add("is-invalid"),t.innerHTML=`<span style="color: var(--gm-error);">✕ ${n}</span>`}clearPathValidation(e,t){t&&(t.innerHTML="The local path where the repository is located"),e.style.borderColor="var(--gm-border)"}async checkPathExistenceAndNotify(e,t){try{const n=await this.apiCall("git_manager_repo_dirs",{path:e});n.success&&(n.data.exists||this.showNotification(`Repository "${t}" updated successfully, but the new path "${e}" does not exist on the server. The repository will appear with a "missing folder" warning.`,"warning",{duration:8e3}))}catch(e){}}showMissingRepositoryHelp(){this.showModal("missing-repo-help",'\n            <div style="padding: 20px; background: var(--gm-bg-secondary); border-radius: var(--gm-radius); border: 1px solid var(--gm-border);">\n                <h4 style="margin-top: 0; color: var(--gm-warning);">Repository Not Found?</h4>\n                <p>If you recently changed a repository\'s path and can\'t find it:</p>\n                <ul style="margin: 10px 0; padding-left: 20px;">\n                    <li>The repository may appear with a "missing folder" warning</li>\n                    <li>Check the repository list for repositories with warning icons</li>\n                    <li>If the path doesn\'t exist, you can re-clone the repository</li>\n                    <li>Or update the path to point to the correct location</li>\n                </ul>\n                                        <button class="git-action-btn git-secondary-btn" onclick="window.safeGitManagerCall(\'refreshRepositoryList\')">\n                    Refresh Repository List\n                </button>\n            </div>\n        ')}async refreshRepositoryList(){try{const e=await this.apiCall("git_manager_repo_list");if(e.success){this.renderRepositories(e.data);const t=e.data.filter(e=>!e.folderExists);t.length>0&&this.showNotification(`Found ${t.length} repository(ies) with missing folders. Check the list for warning icons.`,{duration:5e3})}}catch(e){this.showNotification(WPGitManagerGlobal.translations.errorRefreshingRepositoryList,"error")}}async manageRepositoryPath(e){try{const t=await this.apiCall("git_manager_repo_details",{id:e});if(!t.success)return void this.showNotification("Failed to get repository details: "+(t.data||WPGitManagerGlobal.translations.unknownError),"error");const n=t.data;this.directorySelectorTarget="#repo-path-input",this.showManagePathModal(n)}catch(e){this.showNotification("Error getting repository details: "+e.message,"error")}}showManagePathModal(e){const t=!e.folderExists,n=`\n            <div class="git-modal-content git-manage-path-modal">\n                <div class="git-modal-header">\n                    <h3>\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="20" height="20" style="margin-right: 8px;">\n                            <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>\n                        </svg>\n                        Manage Repository Path\n                    </h3>\n                    <button class="git-modal-close" aria-label="Close modal"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 6 6 18"/><path d="m6 6 12 12"/></svg></button>\n                </div>\n\n                <div class="git-modal-body">\n                    <div class="manage-path-info">\n                        <h4>Repository: ${this.escapeHtml(e.name)}</h4>\n                        <p><strong>Current Path:</strong> <span style="color: ${t?"var(--gm-error)":"var(--gm-text)"}">${this.escapeHtml(e.path.replace(/\\/g,"/"))} ${t?"(Missing)":""}</span></p>\n                        <p><strong>Remote URL:</strong> ${this.escapeHtml(e.remoteUrl||"Not configured")}</p>\n                        <p><strong>Status:</strong> <span style="color: ${t?"var(--gm-warning)":"var(--gm-success)"}">${t?"Folder Missing":"Valid Repository"}</span></p>\n                    </div>\n\n                    <form id="manage-path-form" class="git-manage-path-form">\n                        <div class="form-section">\n                            <h4 class="form-section-title">\n                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                                    <path d="M3 7V5a2 2 0 0 1 2-2h2"/>\n                                    <path d="M17 3h2a2 2 0 0 1 2 2v2"/>\n                                    <path d="M21 17v2a2 2 0 0 1-2 2h-2"/>\n                                    <path d="M7 21H5a2 2 0 0 1-2-2v-2"/>\n                                </svg>\n                                Repository Path\n                            </h4>\n\n                            <div class="form-group">\n                                <label for="repo-path-input">Repository Path</label>\n                                <div class="input-group">\n                                    <input\n                                        type="text"\n                                        id="repo-path-input"\n                                        name="repo_path"\n                                        class="form-control"\n                                        placeholder="wp-content/plugins/my-plugin"\n                                        value="${this.escapeHtml(e.path.replace(/\\/g,"/"))}"\n                                        required\n                                    >\n                                    <button type="button" class="git-action-btn git-secondary-btn" id="browse-path-btn">\n                                        <svg viewBox="0 0 24 24" fill="currentColor" width="16" height="16">\n                                            <path d="M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z"/>\n                                        </svg>\n                                        Browse\n                                    </button>\n                                </div>\n                                <div class="form-help">Enter the path where the repository is or should be located</div>\n                            </div>\n                        </div>\n\n                        <div class="form-section">\n                            <h4 class="form-section-title">\n                                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                                    <path d="M15 7h3a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-3"/>\n                                    <path d="M10 11l4 4-4 4"/>\n                                    <path d="M14 15H9a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h5"/>\n                                </svg>\n                                Action Options\n                            </h4>\n\n                            <div class="form-group">\n                                <label class="switch-label">\n                                    <span class="switch-text">Update Path Only</span>\n                                    <div class="switch-container">\n                                        <input type="checkbox" id="update-path-only" name="action_type" value="update_path" class="switch-input" ${t?"":"checked"}>\n                                        <span class="switch-slider"></span>\n                                    </div>\n                                </label>\n                                <div class="form-help">Update the path in Repo Manager(use if files already exist at new location)</div>\n                            </div>\n\n                            <div class="form-group">\n                                <label class="switch-label">\n                                    <span class="switch-text">Re-clone Repository</span>\n                                    <div class="switch-container">\n                                        <input type="checkbox" id="reclone-repo" name="action_type" value="reclone" class="switch-input" ${t?"checked":""}>\n                                        <span class="switch-slider"></span>\n                                    </div>\n                                </label>\n                                <div class="form-help">Clone the repository fresh to the new path (creates new files)</div>\n                            </div>\n\n                            <div class="form-group" id="branch-group" style="display: none;">\n                                <label for="repo-branch">Branch (Optional)</label>\n                                <input\n                                    type="text"\n                                    id="repo-branch"\n                                    name="branch"\n                                    class="form-control"\n                                    placeholder="main"\n                                >\n                                <div class="form-help">Specify a branch to checkout (defaults to main/master)</div>\n                            </div>\n\n                            <div class="form-group" id="delete-old-group" style="display: none;">\n                                <label class="switch-label">\n                                    <span class="switch-text">Delete old repository entry</span>\n                                    <div class="switch-container">\n                                        <input type="checkbox" id="delete-old-entry" name="delete_old" class="switch-input" checked>\n                                        <span class="switch-slider"></span>\n                                    </div>\n                                </label>\n                                <div class="form-help">Remove the old repository entry after successful re-clone</div>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n\n                <div class="git-modal-footer">\n                    <button type="button" class="git-action-btn git-secondary-btn" id="cancel-manage-path-btn">\n                        Cancel\n                    </button>\n                    <button type="submit" form="manage-path-form" class="git-action-btn">\n                        <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" width="16" height="16">\n                            <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>\n                        </svg>\n                        Apply Changes\n                    </button>\n                </div>\n            </div>\n        `;this.showModal("manage-path",n)&&this.setupManagePathEventListeners(e)}setupManagePathEventListeners(e){const t=document.getElementById("browse-path-btn");t&&(t.onclick=()=>{this.directorySelectorTarget="#repo-path-input",this.browsePath(this.directorySelectorTarget)});const n=document.getElementById("cancel-manage-path-btn");n&&(n.onclick=()=>{this.closeModal("manage-path")});const o=document.getElementById("update-path-only"),s=document.getElementById("reclone-repo");o&&o.addEventListener("change",()=>{o.checked&&s&&(s.checked=!1),this.toggleManagePathOptions()}),s&&s.addEventListener("change",()=>{s.checked&&o&&(o.checked=!1),this.toggleManagePathOptions()});const i=document.getElementById("manage-path-form");i&&(i.onsubmit=t=>{t.preventDefault(),this.handleManagePathSubmit(e)}),this.toggleManagePathOptions()}toggleManagePathOptions(){const e=document.getElementById("reclone-repo"),t=!!e&&e.checked,n=document.getElementById("branch-group"),o=document.getElementById("delete-old-group");t?(n&&(n.style.display="block"),o&&(o.style.display="block")):(n&&(n.style.display="none"),o&&(o.style.display="none"))}async handleManagePathSubmit(e){const t=document.getElementById("repo-path-input").value.trim(),n=document.getElementById("reclone-repo"),o=n&&n.checked?"reclone":"update_path",s=document.getElementById("repo-branch"),i=s&&s.value?s.value.trim():"main",a=document.getElementById("delete-old-entry"),r=!!a&&a.checked;if(t)if(o){this.showProgress("reclone"===o?"Re-cloning repository...":"Updating repository path...");try{if("update_path"===o){const n=await this.apiCall("git_manager_repo_update",{id:e.id,name:e.name,path:t,remoteUrl:e.remoteUrl,authType:e.authType,meta:e.meta});n.success?(this.showNotification(`Repository path updated successfully to: ${t}`,"success"),this.closeModal("manage-path"),this.refreshRepositoryList(),setTimeout(()=>{this.selectRepository(e.id)},1e3)):this.showNotification("Failed to update repository path: "+(n.data||WPGitManagerGlobal.translations.unknownError),"error")}else if("reclone"===o){const n=await this.apiCall("git_manager_repo_add",{name:e.name,repo_path:t,repo_url:e.remoteUrl,repo_branch:i,authType:e.authType,existing_repo:!1});if(n.success){const o=n.data.id;r&&await this.apiCall("git_manager_repo_delete",{id:e.id,delete_files:!1}),this.showNotification(`Repository "${e.name}" successfully re-cloned to new path: ${t}`,"success"),this.closeModal("manage-path"),this.refreshRepositoryList(),setTimeout(()=>{this.selectRepository(o)},1e3)}else this.showNotification("Failed to re-clone repository: "+(n.data||WPGitManagerGlobal.translations.unknownError),"error")}}catch(e){this.showNotification("Error managing repository path: "+e.message,"error")}this.hideProgress()}else this.showNotification(WPGitManagerGlobal.translations.pleaseSelectActionType,"error");else this.showNotification(WPGitManagerGlobal.translations.repositoryPathRequired,"error")}updateRepoCard(e){const t=document.querySelector(`.git-repo-card[data-repo-id="${e.id}"]`);if(!t)return;const n=t.querySelector(".repo-status");if(!n)return;const o=parseInt(e.ahead||0,10),s=parseInt(e.behind||0,10);let i="clean";e.hasChanges?i="changes":o>0&&s>0?i="diverged":o>0?i="ahead":s>0&&(i="behind"),n.className=`repo-status ${i}`,n.setAttribute("data-repo-status",i),n.querySelector(".status-dot")&&(n.innerHTML='<span class="status-dot"></span>');const a=t.querySelector(".repo-type-badge");if(a&&e.repoType){const t="plugin"===e.repoType?"#Plugin":"theme"===e.repoType?"#Theme":"#Other";a.className=`repo-hashtag ${e.repoType}`,a.textContent=t}}setupUrlAutoFill(){const e=document.getElementById("add-repo-url");e&&e.addEventListener("input",e=>{clearTimeout(this.urlAutofillTimer),this.urlAutofillTimer=setTimeout(()=>this.parseAndFillRepoUrl(e.target.value),300)})}parseAndFillRepoUrl(e){if(!e||""===e.trim())return;const t=[/^(?:https?:\/\/)(?:[^\/]+@)?([^\/]+)\/([^\/]+)\/([^\/]+)(?:\.git)?$/,/^(?:git@)([^:]+):([^\/]+)\/([^\/]+)(?:\.git)?$/];let n=null;for(const o of t)if(n=e.match(o),n)break;if(n){let e=!1,t=!1;const o=n[3].replace(/\.git$/,""),s=document.getElementById("add-repo-path"),i=document.getElementById("add-repo-branch"),a=document.getElementById("add-repo-name");if(s&&(!s.value||""===s.value.trim())){const t=`wp-content/plugins/${o}`;s.value=t,e=!0}!a||a.value&&""!==a.value.trim()||(a.value=o),!i||i.value&&""!==i.value.trim()||(i.value="main",t=!0),(e||t)&&this.showNotification(`Auto-filled: Path: ${s.value}, Branch: ${i.value}`,"info",3e3)}}}document.addEventListener("DOMContentLoaded",()=>{try{"undefined"!=typeof gitManagerAjax&&(window.GitManager=new t,window.safeGitManagerCall=(e,...t)=>window.GitManager&&"function"==typeof window.GitManager[e]?window.GitManager[e](...t):Promise.resolve(),window.importSSHKey=()=>{window.GitManager&&window.GitManager.importSSHKey&&window.GitManager.importSSHKey()},window.clearSSHKey=()=>{window.GitManager&&window.GitManager.clearSSHKey&&window.GitManager.clearSSHKey()},window.showSSHHelp=()=>{window.GitManager&&window.GitManager.showSSHHelp&&window.GitManager.showSSHHelp()},window.closeSSHHelp=()=>{window.GitManager&&window.GitManager.closeSSHHelp&&window.GitManager.closeSSHHelp()},window.showTokenHelp=()=>{window.GitManager&&window.GitManager.showTokenHelp&&window.GitManager.showTokenHelp()},window.closeTokenHelp=()=>{window.GitManager&&window.GitManager.closeTokenHelp&&window.GitManager.closeTokenHelp()},window.loadRepositories=()=>{window.GitManager&&window.GitManager.loadRepositories()},window.selectRepo=e=>{window.GitManager&&window.GitManager.selectRepository(e)})}catch(e){}});const n=new class{constructor(){this.skeletonTemplates={repoCard:'\n                <div class="skeleton-repo-card">\n                    <div class="skeleton-repo-header">\n                        <div class="skeleton skeleton-repo-name"></div>\n                        <div class="skeleton skeleton-repo-status"></div>\n                    </div>\n                    <div class="skeleton skeleton-repo-path"></div>\n                    <div class="skeleton skeleton-repo-branch"></div>\n                </div>\n            ',commitItem:'\n                <div class="skeleton-commit-item">\n                    <div class="skeleton skeleton-commit-avatar"></div>\n                    <div class="skeleton-commit-content">\n                        <div class="skeleton skeleton-commit-author"></div>\n                        <div class="skeleton skeleton-commit-message"></div>\n                    </div>\n                </div>\n            ',branchItem:'\n                <div class="skeleton-branch-item">\n                    <div class="skeleton skeleton-branch-icon"></div>\n                    <div class="skeleton skeleton-branch-name"></div>\n                </div>\n            ',infoGrid:'\n                <div class="skeleton-info-grid">\n                    <div class="skeleton-info-item">\n                        <div class="skeleton skeleton-info-label"></div>\n                        <div class="skeleton skeleton-info-value"></div>\n                    </div>\n                    <div class="skeleton-info-item">\n                        <div class="skeleton skeleton-info-label"></div>\n                        <div class="skeleton skeleton-info-value"></div>\n                    </div>\n                    <div class="skeleton-info-item">\n                        <div class="skeleton skeleton-info-label"></div>\n                        <div class="skeleton skeleton-info-value"></div>\n                    </div>\n                    <div class="skeleton-info-item">\n                        <div class="skeleton skeleton-info-label"></div>\n                        <div class="skeleton skeleton-info-value"></div>\n                    </div>\n                </div>\n            ',overviewGrid:'\n                <div class="skeleton-overview-grid">\n                    <div class="skeleton-overview-card">\n                        <div class="skeleton-overview-header">\n                            <div class="skeleton skeleton-overview-title"></div>\n                            <div class="skeleton skeleton-overview-indicator"></div>\n                        </div>\n                        <div class="skeleton-overview-content">\n                            <div class="skeleton skeleton-text"></div>\n                            <div class="skeleton skeleton-text"></div>\n                        </div>\n                    </div>\n                    <div class="skeleton-overview-card">\n                        <div class="skeleton-overview-header">\n                            <div class="skeleton skeleton-overview-title"></div>\n                            <div class="skeleton skeleton-overview-indicator"></div>\n                        </div>\n                        <div class="skeleton-overview-content">\n                            <div class="skeleton skeleton-text"></div>\n                            <div class="skeleton skeleton-text"></div>\n                        </div>\n                    </div>\n                    <div class="skeleton-overview-card">\n                        <div class="skeleton-overview-header">\n                            <div class="skeleton skeleton-overview-title"></div>\n                            <div class="skeleton skeleton-overview-indicator"></div>\n                        </div>\n                        <div class="skeleton-overview-content">\n                            <div class="skeleton skeleton-text"></div>\n                            <div class="skeleton skeleton-text"></div>\n                        </div>\n                    </div>\n                    <div class="skeleton-overview-card">\n                        <div class="skeleton-overview-header">\n                            <div class="skeleton skeleton-overview-title"></div>\n                            <div class="skeleton skeleton-overview-indicator"></div>\n                        </div>\n                        <div class="skeleton-overview-content">\n                            <div class="skeleton skeleton-text"></div>\n                            <div class="skeleton skeleton-text"></div>\n                        </div>\n                    </div>\n                </div>\n            ',directoryItem:'\n                <div class="skeleton-directory-item">\n                    <div class="skeleton skeleton-directory-icon"></div>\n                    <div class="skeleton-directory-info">\n                        <div class="skeleton skeleton-directory-name"></div>\n                        <div class="skeleton skeleton-directory-permissions"></div>\n                    </div>\n                </div>\n            ',welcome:'\n                <div class="skeleton-welcome">\n                    <div class="skeleton-welcome-content">\n                        <div class="skeleton skeleton-welcome-icon"></div>\n                        <div class="skeleton skeleton-welcome-title"></div>\n                        <div class="skeleton skeleton-welcome-description"></div>\n                        <div class="skeleton-welcome-actions">\n                            <div class="skeleton skeleton-welcome-button"></div>\n                            <div class="skeleton skeleton-welcome-button"></div>\n                        </div>\n                    </div>\n                </div>\n            ',tabContent:'\n                <div class="skeleton-tab-content">\n                    <div class="skeleton-tab-header">\n                        <div class="skeleton skeleton-tab-title"></div>\n                        <div class="skeleton-tab-actions">\n                            <div class="skeleton skeleton-tab-action"></div>\n                            <div class="skeleton skeleton-tab-action"></div>\n                        </div>\n                    </div>\n                    <div class="skeleton-list">\n                        <div class="skeleton-list-item">\n                            <div class="skeleton skeleton-list-icon"></div>\n                            <div class="skeleton-list-content">\n                                <div class="skeleton skeleton-list-title"></div>\n                                <div class="skeleton skeleton-list-subtitle"></div>\n                            </div>\n                        </div>\n                        <div class="skeleton-list-item">\n                            <div class="skeleton skeleton-list-icon"></div>\n                            <div class="skeleton-list-content">\n                                <div class="skeleton skeleton-list-title"></div>\n                                <div class="skeleton skeleton-list-subtitle"></div>\n                            </div>\n                        </div>\n                        <div class="skeleton-list-item">\n                            <div class="skeleton skeleton-list-icon"></div>\n                            <div class="skeleton-list-content">\n                                <div class="skeleton skeleton-list-title"></div>\n                                <div class="skeleton skeleton-list-subtitle"></div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            ',progressOverlay:'\n                <div class="skeleton-progress-overlay">\n                    <div class="skeleton-progress-content">\n                        <div class="skeleton skeleton-progress-spinner"></div>\n                        <div class="skeleton skeleton-progress-text"></div>\n                    </div>\n                </div>\n            '}}showRepoSkeleton(){const e=document.querySelector(".git-repo-list");if(e){e.classList.add("skeleton-loading-repos");const t=this.skeletonTemplates.repoCard.repeat(5);e.innerHTML=t}}hideRepoSkeleton(){const e=document.querySelector(".git-repo-list");e&&e.classList.remove("skeleton-loading-repos")}showCommitsSkeleton(){const e=document.querySelector(".commits-list");if(e){e.classList.add("skeleton-loading-commits");const t=this.skeletonTemplates.commitItem.repeat(3);e.innerHTML=t}}hideCommitsSkeleton(){const e=document.querySelector(".commits-list");e&&e.classList.remove("skeleton-loading-commits")}showBranchesSkeleton(){const e=document.querySelector(".branches-list");if(e){e.classList.add("skeleton-loading-branches");const t=this.skeletonTemplates.branchItem.repeat(4);e.innerHTML=t}}hideBranchesSkeleton(){const e=document.querySelector(".branches-list");e&&e.classList.remove("skeleton-loading-branches")}showRepoDetailsSkeleton(){const e=document.querySelector(".git-repo-details");if(!e)return;const t=e.querySelector(".repo-info-grid");t&&t.classList.add("skeleton-loading-info-grid");const n=e.querySelector(".repo-overview-grid");n&&n.classList.add("skeleton-loading-overview-grid")}hideRepoDetailsSkeleton(){const e=document.querySelector(".git-repo-details");if(!e)return;const t=e.querySelector(".repo-info-grid");t&&t.classList.remove("skeleton-loading-info-grid");const n=e.querySelector(".repo-overview-grid");n&&n.classList.remove("skeleton-loading-overview-grid")}showDirectorySkeleton(){const e=document.querySelector(".directory-list");if(e){e.classList.add("skeleton-loading-directories");const t=this.skeletonTemplates.directoryItem.repeat(6);e.innerHTML=t}}hideDirectorySkeleton(){const e=document.querySelector(".directory-list");e&&e.classList.remove("skeleton-loading-directories")}showWelcomeSkeleton(){const e=document.querySelector(".git-repo-welcome");e&&(e.innerHTML=this.skeletonTemplates.welcome)}showTabSkeleton(){const e=document.querySelector(".git-repo-content");e&&(e.innerHTML=this.skeletonTemplates.tabContent)}showProgressSkeleton(e=WPGitManagerGlobal.translations.processing){let t=document.getElementById("git-progress-overlay");t||(t=document.createElement("div"),t.id="git-progress-overlay",document.body.appendChild(t)),t.innerHTML='\n            <div class="skeleton-progress-content">\n                <div class="skeleton skeleton-progress-spinner"></div>\n                <div class="skeleton skeleton-progress-text"></div>\n            </div>\n        ',t.style.display="flex";const n=t.querySelector(".skeleton-progress-text");n&&(n.textContent=e)}hideProgressSkeleton(){const e=document.getElementById("git-progress-overlay");e&&(e.style.display="none")}showSkeleton(e,t,n=1){if(!e)return;const o=this.skeletonTemplates[t];o&&(e.innerHTML=o.repeat(n),e.classList.add(`skeleton-loading-${t}`))}hideSkeleton(e,t){e&&(e.classList.remove(`skeleton-loading-${t}`),e.querySelectorAll(".skeleton").forEach(e=>e.remove()))}hideAllSkeletons(){this.hideRepoSkeleton(),this.hideCommitsSkeleton(),this.hideBranchesSkeleton(),this.hideRepoDetailsSkeleton(),this.hideDirectorySkeleton(),this.hideProgressSkeleton(),document.querySelectorAll(".skeleton").forEach(e=>{!e.classList.contains("skeleton")||e.closest(".repo-info-item")||e.closest(".repo-status-content")||e.closest(".repo-branch-content")||e.closest(".repo-changes-content")||e.closest(".repo-commit-content")||e.remove()})}createSkeletonElement(e,t="100%",n="1em"){const o=document.createElement("div");return o.className=`skeleton ${e}`,o.style.width=t,o.style.height=n,o}checkRequiredElements(){const e=[];return[".git-repo-list",".commits-list",".branches-list",".git-repo-details","#changes-list"].forEach(t=>{document.querySelector(t)||e.push(t)}),!(e.length>0)}safeShowSkeleton(e,t,n=1){return!!e&&!!this.checkRequiredElements()&&(this.showSkeleton(e,t,n),!0)}};window.addEventListener("beforeunload",()=>{n.hideAllSkeletons()}),document.addEventListener("DOMContentLoaded",()=>{n.hideAllSkeletons()})}();