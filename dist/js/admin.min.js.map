{"version":3,"file":"admin.min.js","mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,mCAAmC;AACnC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,yBAAyB;AACzB,0BAA0B;AAC1B;AACA;AACA,aAAa;AACb;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbyCAAyC,yBAAyB;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,GAAG;AAC/D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,8BAA8B;AAC5D;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,GAAG;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA,qDAAqD,SAAS;AAC9D,cAAc;AACd;AACA;AACA;AACA,yDAAyD,SAAS;AAClE,cAAc;AACd;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,KAAK;AAC/D;AACA;AACA;AACA;AACA,yDAAyD,KAAK;AAC9D,kBAAkB;AAClB;AACA;AACA;AACA,6DAA6D,KAAK;AAClE,kBAAkB;AAClB;AACA,0DAA0D,KAAK;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA,qDAAqD,SAAS;AAC9D,cAAc;AACd,yDAAyD,SAAS;AAClE,cAAc;AACd;AACA;AACA;AACA;AACA,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,yBAAyB;AAC5D;AACA;AACA;AACA,qCAAqC,yBAAyB;AAC9D;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mOAAmO,SAAS,kBAAkB;AAC9P;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DAA2D,eAAe;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACteAAe;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mMAAmM;AACnM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG,yCAAyC;AAC1I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iGAAiG;AACjkBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA,6CAA6C,cAAc;AAC3D;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,cAAc,kBAAkB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,GAAG;AAC1C,uCAAuC,GAAG;AAC1C,uCAAuC,GAAG;AAC1C,uCAAuC,GAAG;AAC1C,kCAAkC,IAAI;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,YAAY;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,QAAQ;AAC/D;AACA,0EAA0E;AAC1E;AACA,sBAAsB,IAAI,2BAA2B;AACrD,8CAA8C,YAAY,sBAAsB,YAAY;AAC5F;AACA;AACA;AACA;AACA,2EAA2E;AAC3E;AACA,sBAAsB,IAAI,2BAA2B;AACrD,iFAAiF;AACjF;AACA,sBAAsB,IAAI,mCAAmC;AAC7D;AACA;AACA,qBAAqB,KAAK,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,sDAAsD,aAAa,kBAAkB;AACrF;AACA,UAAU;AACV;AACA,4CAA4C,2BAA2B;AACvE,8CAA8C,aAAa;AAC3D;AACA;AACA;AACA;AACA;AACA,6CAA6C,2BAA2B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,qBAAqB,KAAK,UAAU;AACpC;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB,kBAAkB;AACxC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,uBAAuB,WAAW;AAClC;AACA;AACA;AACA;AACA;AACA,cAAc;AACd,sDAAsD,UAAU;AAChE;AACA,UAAU;AACV,kDAAkD,UAAU;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,uBAAuB,oDAAoD,IAAI,OAAO;AACtF;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,mDAAmD,IAAI,cAAc;AACxF;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,mDAAmD,OAAO;AAC1D,+CAA+C,MAAM;AACrD;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA,iDAAiD,OAAO;AACxD,gDAAgD,MAAM;AACtD;AACA;AACA;AACA;AACA;AACA,gDAAgD,YAAY;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,cAAc;AACrE,UAAU;AACV;AACA,0DAA0D,cAAc;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,WAAW;AACpD;AACA;AACA;AACA,0CAA0C,YAAY;AACtD;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,yCAAyC,YAAY;AACrD;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,0CAA0C,aAAa;AACvD;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,wFAAwF;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD;AACvD;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF;AACjF;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,YAAY;AAC5E,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,MAAM;AAChC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,SAAS,oBAAoB,IAAI;AAC3F,+DAA+D,SAAS;AACxE;AACA,oEAAoE,UAAU;AAC9E,0EAA0E,gBAAgB;AAC1F;AACA,kEAAkE,OAAO;AACzE;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,4BAA4B,gBAAgB,IAAI,oBAAoB;AACpE;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,QAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,yBAAyB;AACvE;AACA,0DAA0D;AAC1D;AACA,0BAA0B,SAAS,oCAAoC;AACvE;AACA;AACA;AACA,kEAAkE;AAClE;AACA,8BAA8B;AAC9B,4DAA4D;AAC5D;AACA,8BAA8B;AAC9B;AACA,0DAA0D;AAC1D;AACA,0BAA0B;AAC1B;AACA,8DAA8D;AAC9D;AACA,8BAA8B;AAC9B,6EAA6E;AAC7E;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,2EAA2E,YAAY;AACvF;AACA,cAAc;AACd;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,yBAAyB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA,qBAAqB;AACrB;AACA,gDAAgD;AAChD;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA,8FAA8F;AAC9F;AACA,oCAAoC;AACpC;AACA;AACA;AACA,mGAAmG;AACnG;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,WAAW;AACrD;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,mDAAmD,WAAW;AAC9D;AACA;AACA,iDAAiD;AACjD,cAAc;AACd;AACA,yDAAyD,WAAW;AACpE;AACA;AACA,UAAU;AACV;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,WAAW;AAC1E;AACA;AACA;AACA;AACA;AACA,6CAA6C,WAAW;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA,2CAA2C;AAC3C,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA,0CAA0C,cAAc;AACxD;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,2DAA2D,gBAAgB;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,gBAAgB,uCAAuC;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,KAAK;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB,oDAAoD;AACpD;AACA,kBAAkB;AAClB;AACA;AACA;AACA,gEAAgE;AAChE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,yBAAyB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iEAAiE,QAAQ;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,QAAQ;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4GAA4G;AAC5G;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oHAAoH;AACpH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,cAAc;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,EAAE,KAAK;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,SAAS;AAClE;AACA;AACA,sDAAsD;AACtD;AACA,sBAAsB;AACtB,sDAAsD,SAAS;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,YAAY,GAAG,KAAK;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,eAAe,YAAY,WAAW,YAAY;AACnE;AACA;AACA,2CAA2C,aAAa;AACxD,aAAa;AACb,sBAAsB;AACtB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,oDAAoD,YAAY;AAChE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D,aAAa;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,oDAAoD,YAAY;AAChE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA,oDAAoD,YAAY;AAChE;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD,eAAe;AACpE;AACA,0BAA0B;AAC1B;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,kBAAkB;AAClB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD,MAAM;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uDAAuD,gBAAgB;AACvE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6DAA6D,cAAc;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,cAAc;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,MAAM;AAC/E,cAAc;AACd,oDAAoD,iBAAiB;AACrE;AACA,kBAAkB,YAAY,MAAM;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE,SAAS;AAClF;AACA;AACA,sDAAsD,gBAAgB;AACtE,sDAAsD,aAAa;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,uBAAuB,oDAAoD,IAAI,OAAO;AACtF;AACA;AACA;AACA,UAAU;AACV;AACA,mBAAmB,mDAAmD,IAAI,cAAc;AACxF;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mDAAmD,gBAAgB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C;AACA;AACA,gCAAgC,YAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,YAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oDAAoD;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,MAAM,QAAQ;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE,MAAM,QAAQ;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,MAAM,QAAQ;AACnF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,uCAAuC,SAAS,4CAA4C,KAAK;AACjG;AACA,0BAA0B;AAC1B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oCAAoC,iCAAiC,mCAAmC;AAC/I,0CAA0C,yBAAyB;AACnE;AACA,2CAA2C,mBAAmB;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,uBAAuB;AACxD,0BAA0B;AAC1B;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,OAAO;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mMAAmM;AACnM;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,2BAA2B;AACrE;AACA;AACA,yBAAyB,IAAI,gDAAgD;AAC7E;AACA,SAAS;AACT,0DAA0D;AAC1D;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA,2FAA2F;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+FAA+F;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,oEAAoE,QAAQ;AAC5E;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,mCAAmC,yBAAyB;AAC5D;AACA;AACA;AACA,qCAAqC,yBAAyB;AAC9D;AACA;AACA;AACA;AACA,gCAAgC,oBAAoB;AACpD;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,MAAM;AACN,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD,KAAK;AAC7D,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,KAAK;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,UAAU;AAClD;AACA;AACA;AACA","sources":["webpack://repo-manager/./src/Assets/js/admin.js"],"sourcesContent":["/**\r\n * Repo Manager- Modern JavaScript Framework\r\n * A comprehensive, modern JavaScript implementation for the Repo Manager Plugin\r\n */\r\n\r\n// Note: Removed global error handlers to allow WordPress to handle errors properly\r\n// WordPress has its own error handling and debug system that should not be interfered with\r\n\r\n/**\r\n * Helper function to safely access WPGitManagerGlobal translations\r\n * @param {string} key - The translation key\r\n * @param {string} fallback - Fallback text if translation is not available\r\n * @returns {string} The translation or fallback\r\n */\r\nfunction getTranslation(key, fallback = \"\") {\r\n    if (\r\n        typeof WPGitManagerGlobal !== \"undefined\" &&\r\n        WPGitManagerGlobal.translations &&\r\n        WPGitManagerGlobal.translations[key]\r\n    ) {\r\n        return WPGitManagerGlobal.translations[key];\r\n    }\r\n    return fallback;\r\n}\r\n\r\nclass GitManager {\r\n    constructor() {\r\n        // Debounce utility\r\n        this.debounce = (func, delay) => {\r\n            let timeout;\r\n            return function (...args) {\r\n                const context = this;\r\n                clearTimeout(timeout);\r\n                timeout = setTimeout(() => func.apply(context, args), delay);\r\n            };\r\n        };\r\n\r\n        this.repositories = [];\r\n        this.currentRepo = null;\r\n        this.activeTab = \"overview\";\r\n        this.detailsRequestSeq = 0;\r\n        this.detailsAbortController = null;\r\n        this._repoListPoller = null;\r\n        this._repoDetailsPoller = null;\r\n        this._lastRepoListSignature = null;\r\n        this._lastRepoData = {}; // Store last repository data for comparison\r\n        this.modals = new Map();\r\n        this.notifications = [];\r\n        this.directorySelectorTarget = \"#add-repo-path\";\r\n        // Initialize theme from storage (defaults handled in getStoredTheme)\r\n        this.theme = this.getStoredTheme();\r\n        this.urlAutofillTimer = null; // Debounce timer for URL autofill\r\n        this._initialized = false; // Ensure init runs only once\r\n        this._ajaxWaitAttempts = 0; // Retry counter for waiting gitManagerAjax\r\n\r\n        // Bind handlers BEFORE initialization so event listeners use bound methods\r\n        this.handleGlobalClick = this.handleGlobalClick.bind(this);\r\n        this.handleGlobalKeydown = this.handleGlobalKeydown.bind(this);\r\n        this.handleFormSubmit = this.handleFormSubmit.bind(this);\r\n\r\n        this.selectRepository = this.selectRepository.bind(this);\r\n\r\n        // Initialize when DOM is ready; if already ready, run now\r\n        console.log(document.readyState);\r\n\r\n        if (document.readyState === \"loading\") {\r\n            document.addEventListener(\"DOMContentLoaded\", () => this.init());\r\n        } else {\r\n            this.init();\r\n        }\r\n    }\r\n\r\n    init() {\r\n        try {\r\n            // Avoid double initialization\r\n            if (this._initialized) return;\r\n\r\n            // Ensure AJAX data is available; retry briefly if not yet defined\r\n            if (typeof gitManagerAjax === \"undefined\") {\r\n                if (this._ajaxWaitAttempts < 30) {\r\n                    this._ajaxWaitAttempts++;\r\n                    setTimeout(() => this.init(), 100);\r\n                } else {\r\n                    console.warn(\r\n                        \"GitManager: gitManagerAjax not found; initialization skipped after retries.\"\r\n                    );\r\n                }\r\n                return;\r\n            }\r\n\r\n            this.setupEventListeners();\r\n            this.setupTheme();\r\n            this.ensureProperDisplayStates();\r\n            this.loadRepositories();\r\n            this.setupKeyboardShortcuts();\r\n            this.setupAnimations();\r\n\r\n            // Ensure buttons are properly functional\r\n            setTimeout(() => {\r\n                this.ensureButtonFunctionality();\r\n            }, 100);\r\n\r\n            // Set up periodic button functionality check\r\n            setInterval(() => {\r\n                this.ensureButtonFunctionality();\r\n            }, 5000); // Check every 5 seconds\r\n\r\n            // Mark as initialized before starting background updates\r\n            this._initialized = true;\r\n\r\n            // Start lightweight polling to keep UI live on slow hosts\r\n            this.startLiveUpdates();\r\n\r\n            // Wire commands-disabled modal controls if present\r\n            setTimeout(() => {\r\n                const overlay = document.getElementById(\r\n                    \"gm-commands-modal-overlay\"\r\n                );\r\n                const closeBtn = document.getElementById(\r\n                    \"gm-commands-close-btn\"\r\n                );\r\n                const dismissBtn = document.getElementById(\r\n                    \"gm-commands-dismiss-btn\"\r\n                );\r\n                if (overlay) {\r\n                    const closeModal = () => overlay.remove();\r\n                    if (closeBtn) closeBtn.onclick = closeModal;\r\n                    if (dismissBtn) dismissBtn.onclick = closeModal;\r\n                    overlay.addEventListener(\"click\", (e) => {\r\n                        if (e.target === overlay) closeModal();\r\n                    });\r\n                    window.addEventListener(\r\n                        \"keydown\",\r\n                        (e) => {\r\n                            if (e.key === \"Escape\") closeModal();\r\n                        },\r\n                        { once: true }\r\n                    );\r\n                }\r\n            }, 50);\r\n            this.handleModalBackdropClick =\r\n                this.handleModalBackdropClick.bind(this);\r\n        } catch (error) {}\r\n    }\r\n\r\n    /**\r\n     * Setup all event listeners\r\n     */\r\n    setupEventListeners() {\r\n        // Global event delegation\r\n        document.addEventListener(\"click\", this.handleGlobalClick);\r\n        document.addEventListener(\"keydown\", this.handleGlobalKeydown);\r\n\r\n        // Window events\r\n        window.addEventListener(\r\n            \"resize\",\r\n            this.debounce(() => this.handleResize(), 250)\r\n        );\r\n\r\n        // Form submissions\r\n        document.addEventListener(\"submit\", this.handleFormSubmit);\r\n\r\n        // Modal backdrop clicks\r\n        document.addEventListener(\"click\", this.handleModalBackdropClick);\r\n\r\n        // Add repository form - toggle branch field visibility\r\n        const addRepoForm = document.getElementById(\"add-repo-form\");\r\n        if (addRepoForm) {\r\n            const isExistingCheckbox = addRepoForm.querySelector(\r\n                'input[name=\"existing_repo\"]'\r\n            );\r\n            const branchInput = addRepoForm.querySelector(\r\n                'input[name=\"repo_branch\"]'\r\n            );\r\n\r\n            if (isExistingCheckbox && branchInput) {\r\n                const branchInputContainer = branchInput.closest(\".form-group\");\r\n\r\n                if (branchInputContainer) {\r\n                    isExistingCheckbox.addEventListener(\"change\", (e) => {\r\n                        branchInputContainer.style.display = e.target.checked\r\n                            ? \"none\"\r\n                            : \"\";\r\n                    });\r\n\r\n                    // Set initial state\r\n                    branchInputContainer.style.display =\r\n                        isExistingCheckbox.checked ? \"none\" : \"\";\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle global click events with delegation\r\n     */\r\n    handleGlobalClick(e) {\r\n        const target = e.target;\r\n\r\n        // Clone repository button - improved detection\r\n        const cloneBtn = target.closest(\".git-clone-btn, .git-sidebar-add-btn\");\r\n        if (cloneBtn) {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n\r\n            // Add visual feedback\r\n            cloneBtn.style.transform = \"scale(0.95)\";\r\n            setTimeout(() => {\r\n                cloneBtn.style.transform = \"\";\r\n            }, 150);\r\n\r\n            this.showAddRepositorySection();\r\n            return;\r\n        }\r\n\r\n        // Troubleshoot button\r\n        if (target.matches(\".git-troubleshoot-btn\")) {\r\n            e.preventDefault();\r\n            this.showTroubleshooting();\r\n            return;\r\n        }\r\n\r\n        // Theme switcher (support clicks on icon/svg inside the button)\r\n        const themeSwitcher = target.closest(\".git-theme-switcher\");\r\n        if (themeSwitcher) {\r\n            e.preventDefault();\r\n            this.toggleTheme();\r\n            return;\r\n        }\r\n\r\n        // Action buttons - must come before repository card clicks\r\n        const actionBtn = target.closest(\".git-action-btn\");\r\n        if (actionBtn) {\r\n            const action = actionBtn.dataset.action;\r\n            if (action) {\r\n                e.preventDefault();\r\n                this.handleAction(action, actionBtn);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Modal close buttons\r\n        if (target.matches(\".git-modal-close\")) {\r\n            e.preventDefault();\r\n            const modal = target.closest(\".git-modal-overlay\");\r\n            if (modal) {\r\n                this.closeModal(modal.dataset.modalId);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Tab navigation\r\n        if (target.matches(\".git-repo-tab\")) {\r\n            e.preventDefault();\r\n            this.switchTab(target.dataset.tab);\r\n            return;\r\n        }\r\n\r\n        // Repository card clicks - must come after action buttons\r\n        if (target.closest(\".git-repo-card\")) {\r\n            // Only select repository if clicking on the card itself, not on buttons\r\n            if (!target.matches(\"button\") && !target.closest(\"button\")) {\r\n                const card = target.closest(\".git-repo-card\");\r\n                const repoId = card.dataset.repoId;\r\n\r\n                this.selectRepository(repoId);\r\n                return;\r\n            }\r\n        }\r\n\r\n        // Browse path button\r\n        if (target.matches(\"#browse-path-btn\")) {\r\n            e.preventDefault();\r\n            this.browsePath(this.directorySelectorTarget);\r\n            return;\r\n        }\r\n\r\n        // Cancel clone button\r\n        if (target.matches(\"#cancel-clone-btn\")) {\r\n            e.preventDefault();\r\n            this.closeModal(\"clone\");\r\n            return;\r\n        }\r\n\r\n        // Back to welcome button\r\n        if (target.matches(\"#back-to-welcome\")) {\r\n            e.preventDefault();\r\n            this.hideAddRepositorySection();\r\n            return;\r\n        }\r\n\r\n        // Cancel add repository button\r\n        if (target.matches(\"#cancel-add-repo\")) {\r\n            e.preventDefault();\r\n            this.hideAddRepositorySection();\r\n            return;\r\n        }\r\n\r\n        // Cancel directory selector button\r\n        if (target.matches(\"#cancel-directory-selector-btn\")) {\r\n            e.preventDefault();\r\n            this.closeModal(\"directory-selector\");\r\n            return;\r\n        }\r\n\r\n        // Directory item clicks\r\n        if (target.closest(\".directory-item.selectable\")) {\r\n            const directoryItem = target.closest(\".directory-item.selectable\");\r\n            const path = directoryItem.dataset.directoryPath;\r\n            if (path) {\r\n                e.preventDefault();\r\n                this.selectDirectory(path);\r\n                return;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle global keyboard shortcuts\r\n     */\r\n    handleGlobalKeydown(e) {\r\n        // Escape key closes modals\r\n        if (e.key === \"Escape\") {\r\n            this.closeAllModals();\r\n        }\r\n\r\n        // Ctrl/Cmd + N for new repository\r\n        if ((e.ctrlKey || e.metaKey) && e.key === \"n\") {\r\n            e.preventDefault();\r\n            this.showCloneModal();\r\n        }\r\n\r\n        // Ctrl/Cmd + K for search (future feature)\r\n        if ((e.ctrlKey || e.metaKey) && e.key === \"k\") {\r\n            e.preventDefault();\r\n            this.focusSearch();\r\n        }\r\n\r\n        // Ctrl/Cmd + T for theme toggle\r\n        if ((e.ctrlKey || e.metaKey) && e.key === \"t\") {\r\n            e.preventDefault();\r\n            this.toggleTheme();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle form submissions\r\n     */\r\n    handleFormSubmit(e) {\r\n        const form = e.target;\r\n\r\n        if (form.id === \"clone-form\") {\r\n            e.preventDefault();\r\n            this.handleCloneSubmit(form);\r\n        } else if (form.id === \"add-repo-form\") {\r\n            e.preventDefault();\r\n            this.handleAddRepositorySubmit(form);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle window resize\r\n     */\r\n    handleResize() {\r\n        // Adjust modal positions and sizes\r\n        this.modals.forEach((modal) => {\r\n            if (modal.isOpen) {\r\n                this.positionModal(modal);\r\n            }\r\n        });\r\n\r\n        this.updateFileBrowserHeight();\r\n    }\r\n\r\n    updateFileBrowserHeight() {\r\n        const fileBrowser = document.querySelector(\r\n            \"#directory-selector-modal .file-browser\"\r\n        );\r\n        if (!fileBrowser) return;\r\n\r\n        const modalBody = fileBrowser.closest(\".git-modal-body\");\r\n        if (!modalBody) return;\r\n\r\n        const modalRect = modalBody.getBoundingClientRect();\r\n        const fileBrowserRect = fileBrowser.getBoundingClientRect();\r\n\r\n        const newHeight =\r\n            window.innerHeight -\r\n            modalRect.top -\r\n            (modalRect.height - fileBrowserRect.height) -\r\n            100;\r\n\r\n        fileBrowser.style.maxHeight = `${Math.max(200, newHeight)}px`;\r\n    }\r\n\r\n    /**\r\n     * Setup keyboard shortcuts\r\n     */\r\n    setupKeyboardShortcuts() {\r\n        // Add keyboard shortcut hints to buttons\r\n        document.querySelectorAll(\".git-clone-btn\").forEach((btn) => {\r\n            btn.title = WPGitManagerGlobal.translations.addRepositoryTooltip;\r\n        });\r\n\r\n        document.querySelectorAll(\".git-theme-switcher\").forEach((btn) => {\r\n            btn.title = WPGitManagerGlobal.translations.toggleThemeTooltip;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ensure buttons are properly initialized and clickable\r\n     */\r\n    ensureButtonFunctionality() {\r\n        // Ensure clone and add buttons are properly set up\r\n        const cloneButtons = document.querySelectorAll(\r\n            \".git-clone-btn, .git-sidebar-add-btn\"\r\n        );\r\n        cloneButtons.forEach((btn) => {\r\n            // Ensure proper styling\r\n            btn.style.pointerEvents = \"auto\";\r\n            btn.style.cursor = \"pointer\";\r\n            btn.style.position = \"relative\";\r\n            btn.style.zIndex = \"10\";\r\n\r\n            // Remove any conflicting event listeners\r\n            const newBtn = btn.cloneNode(true);\r\n            btn.parentNode.replaceChild(newBtn, btn);\r\n\r\n            // Add visual feedback on hover\r\n            newBtn.addEventListener(\"mouseenter\", () => {\r\n                newBtn.style.transform = \"translateY(-1px)\";\r\n            });\r\n\r\n            newBtn.addEventListener(\"mouseleave\", () => {\r\n                newBtn.style.transform = \"\";\r\n            });\r\n\r\n            // Add fallback click handler\r\n            newBtn.addEventListener(\"click\", (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.showAddRepositorySection();\r\n            });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Setup animations and transitions\r\n     */\r\n    setupAnimations() {\r\n        // Add intersection observer for fade-in animations\r\n        const observer = new IntersectionObserver(\r\n            (entries) => {\r\n                entries.forEach((entry) => {\r\n                    if (entry.isIntersecting) {\r\n                        entry.target.classList.add(\"animate-in\");\r\n                    }\r\n                });\r\n            },\r\n            { threshold: 0.1 }\r\n        );\r\n\r\n        // Observe elements for animation\r\n        document\r\n            .querySelectorAll(\".git-repo-card, .repo-info-item\")\r\n            .forEach((el) => {\r\n                observer.observe(el);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Theme Management\r\n     */\r\n    setupTheme() {\r\n        document.documentElement.setAttribute(\"data-theme\", this.theme);\r\n        this.updateThemeUI();\r\n    }\r\n\r\n    getStoredTheme() {\r\n        return localStorage.getItem(\"repo-manager-theme\") || \"light\";\r\n    }\r\n\r\n    toggleTheme() {\r\n        this.theme = this.theme === \"light\" ? \"dark\" : \"light\";\r\n        localStorage.setItem(\"repo-manager-theme\", this.theme);\r\n        document.documentElement.setAttribute(\"data-theme\", this.theme);\r\n        this.updateThemeUI();\r\n        this.showNotification(\r\n            WPGitManagerGlobal.translations.themeChanged,\r\n            \"success\"\r\n        );\r\n    }\r\n\r\n    updateThemeUI() {\r\n        const themeSwitchers = document.querySelectorAll(\".git-theme-switcher\");\r\n        themeSwitchers.forEach((switcher) => {\r\n            const icon = switcher.querySelector(\"svg\");\r\n            if (icon) {\r\n                icon.innerHTML =\r\n                    this.theme === \"light\"\r\n                        ? '<circle cx=\"12\" cy=\"12\" r=\"4\"/><path d=\"M12 2v2\"/><path d=\"M12 20v2\"/><path d=\"m4.93 4.93 1.41 1.41\"/><path d=\"m17.66 17.66 1.41 1.41\"/><path d=\"M2 12h2\"/><path d=\"M20 12h2\"/><path d=\"m6.34 17.66-1.41 1.41\"/><path d=\"m19.07 4.93-1.41 1.41\"/>'\r\n                        : '<path d=\"M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z\"/>';\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Modal Management\r\n     */\r\n    showCloneModal() {\r\n        const modalHTML = this.createCloneModalHTML();\r\n        this.showModal(\"clone\", modalHTML);\r\n    }\r\n\r\n    showModal(id, content) {\r\n        // Remove existing modal if present\r\n        this.closeModal(id);\r\n\r\n        const modalHTML = `\r\n            <div class=\"git-modal-overlay\" data-modal-id=\"${id}\">\r\n                ${content}\r\n            </div>\r\n        `;\r\n\r\n        const modalTemplate = document.createElement(\"template\");\r\n        modalTemplate.innerHTML = modalHTML.trim();\r\n        const modal = modalTemplate.content.firstChild;\r\n\r\n        document.body.appendChild(modal);\r\n        this.modals.set(id, { element: modal, isOpen: true });\r\n\r\n        // Focus first input\r\n        setTimeout(() => {\r\n            const firstInput = modal.querySelector(\"input, select, textarea\");\r\n            if (firstInput) firstInput.focus();\r\n        }, 100);\r\n\r\n        // Prevent body scroll\r\n        document.body.style.overflow = \"hidden\";\r\n\r\n        // Setup URL auto-fill for clone modal\r\n        if (id === \"clone\") {\r\n            this.setupUrlAutoFill(modal);\r\n            this.setupCloneFormAuthInteractions();\r\n        }\r\n\r\n        return modal;\r\n    }\r\n\r\n    closeModal(id) {\r\n        const modal = document.querySelector(`[data-modal-id=\"${id}\"]`);\r\n        if (modal) {\r\n            modal.classList.add(\"closing\");\r\n            setTimeout(() => {\r\n                modal.remove();\r\n                this.modals.delete(id);\r\n\r\n                // Re-enable body scroll if no modals are open\r\n                if (this.modals.size === 0) {\r\n                    document.body.style.overflow = \"\";\r\n                }\r\n            }, 200);\r\n        }\r\n    }\r\n\r\n    closeAllModals() {\r\n        this.modals.forEach((modal, id) => {\r\n            this.closeModal(id);\r\n        });\r\n    }\r\n\r\n    positionModal(modal) {\r\n        // Ensure modal is properly positioned\r\n        const modalElement = modal.element;\r\n        if (modalElement) {\r\n            modalElement.style.display = \"flex\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup URL auto-fill functionality for clone modal\r\n     */\r\n    setupUrlAutoFill(modal) {\r\n        const urlInput = modal.querySelector(\"#clone-repo-url\");\r\n        const pathInput = modal.querySelector(\"#clone-repo-path\");\r\n        const branchInput = modal.querySelector(\"#clone-repo-branch\");\r\n\r\n        if (urlInput) {\r\n            // Add event listener for URL input changes\r\n            urlInput.addEventListener(\"input\", (e) => {\r\n                this.handleUrlInput(e.target.value, pathInput, branchInput);\r\n            });\r\n\r\n            // Also handle paste events\r\n            urlInput.addEventListener(\"paste\", (e) => {\r\n                setTimeout(() => {\r\n                    this.handleUrlInput(e.target.value, pathInput, branchInput);\r\n                }, 10);\r\n            });\r\n        }\r\n\r\n        // Track manual edits to prevent overwriting user input\r\n        if (pathInput) {\r\n            pathInput.addEventListener(\"input\", (e) => {\r\n                if (e.target.value && e.target.dataset.autoFilled === \"true\") {\r\n                    e.target.dataset.autoFilled = \"false\";\r\n                    this.removeAutoFilledIndicator(e.target);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (branchInput) {\r\n            branchInput.addEventListener(\"input\", (e) => {\r\n                if (e.target.value && e.target.dataset.autoFilled === \"true\") {\r\n                    e.target.dataset.autoFilled = \"false\";\r\n                    this.removeAutoFilledIndicator(e.target);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle URL input and auto-populate other fields\r\n     */\r\n    handleUrlInput(url, pathInput, branchInput) {\r\n        if (!url || !url.trim()) {\r\n            return;\r\n        }\r\n\r\n        const parsedData = this.parseGitUrl(url.trim());\r\n\r\n        // Do not autofill if there's no valid data or if user has already manually edited the path/branch\r\n        if (!parsedData.name) {\r\n            return;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse Git repository URL and extract useful information\r\n     */\r\n    parseGitUrl(url) {\r\n        try {\r\n            // Clean the URL first\r\n            url = url.trim();\r\n\r\n            // Handle SSH URLs (git@github.com:user/repo.git)\r\n            if (url.startsWith(\"git@\")) {\r\n                return this.parseSshUrl(url);\r\n            }\r\n\r\n            // Handle HTTPS URLs (https://github.com/user/repo.git)\r\n            if (url.startsWith(\"http\")) {\r\n                return this.parseHttpsUrl(url);\r\n            }\r\n\r\n            // Handle other formats\r\n            return this.parseGenericUrl(url);\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parse SSH URL format: git@github.com:user/repo.git\r\n     */\r\n    parseSshUrl(url) {\r\n        const sshPattern = /^git@([^:]+):([^/]+)\\/([^/]+?)(?:\\.git)?$/;\r\n        const match = url.match(sshPattern);\r\n\r\n        if (match) {\r\n            const [, host, user, repo] = match;\r\n            const repoName = repo.replace(/\\.git$/, \"\");\r\n\r\n            // Determine suggested path based on host and repo name\r\n            let suggestedPath = `wp-content/plugins/${repoName}`;\r\n            if (host.includes(\"theme\") || repoName.includes(\"theme\")) {\r\n                suggestedPath = `wp-content/themes/${repoName}`;\r\n            } else if (\r\n                host.includes(\"mu-plugin\") ||\r\n                repoName.includes(\"mu-plugin\")\r\n            ) {\r\n                suggestedPath = `wp-content/mu-plugins/${repoName}`;\r\n            } else if (\r\n                repoName.includes(\"wordpress\") ||\r\n                repoName.includes(\"wp-\")\r\n            ) {\r\n                // WordPress core or related repositories\r\n                suggestedPath = `wp-content/plugins/${repoName}`;\r\n            }\r\n\r\n            return {\r\n                host: host,\r\n                user: user,\r\n                repo: repoName,\r\n                suggestedPath: suggestedPath,\r\n                defaultBranch: this.getDefaultBranch(host),\r\n                type: \"ssh\",\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parse HTTPS URL format: https://github.com/user/repo.git\r\n     */\r\n    parseHttpsUrl(url) {\r\n        try {\r\n            const urlObj = new URL(url);\r\n            const pathParts = urlObj.pathname.split(\"/\").filter((part) => part);\r\n\r\n            if (pathParts.length >= 2) {\r\n                const user = pathParts[0];\r\n                const repo = pathParts[1].replace(/\\.git$/, \"\");\r\n\r\n                // Determine suggested path based on host and repo name\r\n                let suggestedPath = `wp-content/plugins/${repo}`;\r\n                if (\r\n                    urlObj.hostname.includes(\"theme\") ||\r\n                    repo.includes(\"theme\")\r\n                ) {\r\n                    suggestedPath = `wp-content/themes/${repo}`;\r\n                } else if (\r\n                    urlObj.hostname.includes(\"mu-plugin\") ||\r\n                    repo.includes(\"mu-plugin\")\r\n                ) {\r\n                    suggestedPath = `wp-content/mu-plugins/${repo}`;\r\n                } else if (repo.includes(\"wordpress\") || repo.includes(\"wp-\")) {\r\n                    // WordPress core or related repositories\r\n                    suggestedPath = `wp-content/plugins/${repo}`;\r\n                }\r\n\r\n                return {\r\n                    host: urlObj.hostname,\r\n                    user: user,\r\n                    repo: repo,\r\n                    suggestedPath: suggestedPath,\r\n                    defaultBranch: this.getDefaultBranch(urlObj.hostname),\r\n                    type: \"https\",\r\n                };\r\n            }\r\n        } catch (error) {}\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Parse generic URL formats\r\n     */\r\n    parseGenericUrl(url) {\r\n        // Try to extract repository name from various formats\r\n        const repoNameMatch = url.match(/([^/]+?)(?:\\.git)?$/);\r\n        if (repoNameMatch) {\r\n            const repoName = repoNameMatch[1];\r\n\r\n            // Determine suggested path based on repo name\r\n            let suggestedPath = `wp-content/plugins/${repoName}`;\r\n            if (repoName.includes(\"theme\")) {\r\n                suggestedPath = `wp-content/themes/${repoName}`;\r\n            } else if (repoName.includes(\"mu-plugin\")) {\r\n                suggestedPath = `wp-content/mu-plugins/${repoName}`;\r\n            } else if (\r\n                repoName.includes(\"wordpress\") ||\r\n                repoName.includes(\"wp-\")\r\n            ) {\r\n                // WordPress core or related repositories\r\n                suggestedPath = `wp-content/plugins/${repoName}`;\r\n            }\r\n\r\n            return {\r\n                repo: repoName,\r\n                suggestedPath: suggestedPath,\r\n                defaultBranch: \"main\",\r\n                type: \"generic\",\r\n            };\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get default branch based on host\r\n     */\r\n    getDefaultBranch(host) {\r\n        // GitHub, GitLab, Bitbucket typically use 'main' as default now\r\n        const modernHosts = [\"github.com\", \"gitlab.com\", \"bitbucket.org\"];\r\n        return modernHosts.includes(host) ? \"main\" : \"master\";\r\n    }\r\n\r\n    /**\r\n     * Show notification when fields are auto-filled\r\n     */\r\n    showAutoFillNotification(parsedData) {\r\n        const messages = [];\r\n\r\n        if (parsedData.suggestedPath) {\r\n            messages.push(`Path: ${parsedData.suggestedPath}`);\r\n        }\r\n\r\n        if (parsedData.defaultBranch) {\r\n            messages.push(`Branch: ${parsedData.defaultBranch}`);\r\n        }\r\n\r\n        if (messages.length > 0) {\r\n            this.showNotification(\r\n                `Auto-filled: ${messages.join(\", \")}`,\r\n                \"info\",\r\n                { duration: 3000 }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show error when URL cannot be parsed\r\n     */\r\n    showUrlParseError(url) {\r\n        // Only show error for URLs that look like they might be Git URLs\r\n        if (\r\n            url.includes(\"github.com\") ||\r\n            url.includes(\"gitlab.com\") ||\r\n            url.includes(\"bitbucket.org\") ||\r\n            url.startsWith(\"git@\")\r\n        ) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.unableToParseGitURL,\r\n                \"warning\",\r\n                { duration: 4000 }\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Test URL parsing functionality (debugging removed)\r\n     */\r\n    testUrlParsing() {\r\n        const testUrls = [\r\n            \"https://github.com/user/my-plugin.git\",\r\n            \"git@github.com:user/my-theme.git\",\r\n            \"https://gitlab.com/user/mu-plugin.git\",\r\n            \"https://bitbucket.org/user/wordpress-plugin.git\",\r\n            \"https://github.com/user/wp-custom-plugin.git\",\r\n        ];\r\n\r\n        testUrls.forEach((url) => {\r\n            const result = this.parseGitUrl(url);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add visual indicator for auto-filled fields\r\n     */\r\n    addAutoFilledIndicator(input) {\r\n        // Add a subtle visual indicator\r\n        input.classList.add(\"auto-filled\");\r\n\r\n        // Add a small icon or indicator\r\n        const parent = input.parentElement;\r\n        if (parent && !parent.querySelector(\".auto-fill-indicator\")) {\r\n            const indicator = document.createElement(\"span\");\r\n            indicator.className = \"auto-fill-indicator\";\r\n            indicator.innerHTML = `\r\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"12\" height=\"12\">\r\n                    <path d=\"M20 6 9 17l-5-5\"/>\r\n                </svg>\r\n            `;\r\n            indicator.title = \"Auto-filled from repository URL\";\r\n            parent.appendChild(indicator);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove auto-filled indicator when user manually edits\r\n     */\r\n    removeAutoFilledIndicator(input) {\r\n        input.classList.remove(\"auto-filled\");\r\n        const parent = input.parentElement;\r\n        if (parent) {\r\n            const indicator = parent.querySelector(\".auto-fill-indicator\");\r\n            if (indicator) {\r\n                indicator.remove();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup URL auto-fill for the existing repository form\r\n     */\r\n    setupExistingFormUrlAutoFill() {\r\n        const urlInput = document.getElementById(\"add-repo-url\");\r\n        const pathInput = document.getElementById(\"add-repo-path\");\r\n        const branchInput = document.getElementById(\"add-repo-branch\");\r\n\r\n        if (urlInput) {\r\n            // Add event listener for URL input changes\r\n            urlInput.addEventListener(\"input\", (e) => {\r\n                this.handleUrlInput(e.target.value, pathInput, branchInput);\r\n            });\r\n\r\n            // Also handle paste events\r\n            urlInput.addEventListener(\"paste\", (e) => {\r\n                setTimeout(() => {\r\n                    this.handleUrlInput(e.target.value, pathInput, branchInput);\r\n                }, 10);\r\n            });\r\n        }\r\n\r\n        // Track manual edits to prevent overwriting user input\r\n        if (pathInput) {\r\n            pathInput.addEventListener(\"input\", (e) => {\r\n                if (e.target.value && e.target.dataset.autoFilled === \"true\") {\r\n                    e.target.dataset.autoFilled = \"false\";\r\n                    this.removeAutoFilledIndicator(e.target);\r\n                }\r\n            });\r\n        }\r\n\r\n        if (branchInput) {\r\n            branchInput.addEventListener(\"input\", (e) => {\r\n                if (e.target.value && e.target.dataset.autoFilled === \"true\") {\r\n                    e.target.dataset.autoFilled = \"false\";\r\n                    this.removeAutoFilledIndicator(e.target);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup clone form authentication interactions\r\n     */\r\n    setupCloneFormAuthInteractions() {\r\n        const privateRepoCheckbox =\r\n            document.getElementById(\"clone-private-repo\");\r\n        const authTypeSection = document.getElementById(\"auth-type-section\");\r\n        const authTypeRadios = document.querySelectorAll(\r\n            'input[name=\"auth_type\"]'\r\n        );\r\n        const sshAuthFields = document.getElementById(\"ssh-auth-fields\");\r\n        const httpsAuthFields = document.getElementById(\"https-auth-fields\");\r\n        const tokenInput = document.getElementById(\"clone-token\");\r\n        const toggleTokenBtn = document.getElementById(\r\n            \"toggle-token-visibility\"\r\n        );\r\n\r\n        // Private repository toggle\r\n        if (privateRepoCheckbox) {\r\n            privateRepoCheckbox.addEventListener(\"change\", (e) => {\r\n                if (e.target.checked) {\r\n                    authTypeSection.style.display = \"block\";\r\n                    this.showAuthFields();\r\n                } else {\r\n                    authTypeSection.style.display = \"none\";\r\n                    sshAuthFields.style.display = \"none\";\r\n                    httpsAuthFields.style.display = \"none\";\r\n                }\r\n            });\r\n        }\r\n\r\n        // Authentication type selection\r\n        authTypeRadios.forEach((radio) => {\r\n            radio.addEventListener(\"change\", (e) => {\r\n                this.showAuthFields();\r\n            });\r\n        });\r\n\r\n        // Token visibility toggle\r\n        if (toggleTokenBtn && tokenInput) {\r\n            toggleTokenBtn.addEventListener(\"click\", () => {\r\n                const type =\r\n                    tokenInput.type === \"password\" ? \"text\" : \"password\";\r\n                tokenInput.type = type;\r\n\r\n                const icon = toggleTokenBtn.querySelector(\"svg\");\r\n                if (type === \"text\") {\r\n                    icon.innerHTML = `\r\n                        <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"/>\r\n                        <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"/>\r\n                    `;\r\n                } else {\r\n                    icon.innerHTML = `\r\n                        <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/>\r\n                        <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n                    `;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show appropriate authentication fields based on selected method\r\n     */\r\n    showAuthFields() {\r\n        const selectedAuthType = document.querySelector(\r\n            'input[name=\"auth_type\"]:checked'\r\n        );\r\n        const sshAuthFields = document.getElementById(\"ssh-auth-fields\");\r\n        const httpsAuthFields = document.getElementById(\"https-auth-fields\");\r\n\r\n        if (!selectedAuthType) return;\r\n\r\n        if (selectedAuthType.value === \"ssh\") {\r\n            sshAuthFields.style.display = \"block\";\r\n            httpsAuthFields.style.display = \"none\";\r\n        } else if (selectedAuthType.value === \"https\") {\r\n            sshAuthFields.style.display = \"none\";\r\n            httpsAuthFields.style.display = \"block\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show SSH key generation help modal\r\n     */\r\n    showSSHHelp() {\r\n        const modal = document.createElement(\"div\");\r\n        modal.className = \"git-modal-overlay\";\r\n        modal.id = \"ssh-help-modal\";\r\n        modal.innerHTML = `\r\n            <div class=\"git-modal-content git-modal-large\">\r\n                <div class=\"git-modal-header\">\r\n                    <h3>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" style=\"position: relative;top: 2px;margin-right: 5px;\"><path d=\"M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z\"></path><circle cx=\"16.5\" cy=\"7.5\" r=\".5\" fill=\"currentColor\"></circle></svg>\r\n                     SSH Key Generation Guide\r\n                     </h3>\r\n                    <button class=\"git-modal-close\" onclick=\"closeSSHHelp()\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/></svg></button>\r\n                </div>\r\n                <div class=\"git-modal-body\">\r\n                    <div class=\"help-content\">\r\n                        <div class=\"help-section\">\r\n                            <h4>Generate SSH Key</h4>\r\n                            <div class=\"code-block\">\r\n                                <code>ssh-keygen -t ed25519 -C \"your_email@example.com\"</code>\r\n                            </div>\r\n                            <p>This creates a new SSH key pair. Press Enter to accept the default file location.</p>\r\n                        </div>\r\n\r\n                        <div class=\"help-section\">\r\n                            <h4>Add SSH Key to SSH Agent</h4>\r\n                            <div class=\"code-block\">\r\n                                <code>ssh-add ~/.ssh/id_ed25519</code>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"help-section\">\r\n                            <h4>Copy Public Key</h4>\r\n                            <div class=\"code-block\">\r\n                                <code>cat ~/.ssh/id_ed25519.pub</code>\r\n                            </div>\r\n                            <p>Copy the output and add it to your Git hosting service (GitHub, GitLab, etc.)</p>\r\n                        </div>\r\n\r\n                        <div class=\"help-section\">\r\n                            <h4>Copy Private Key</h4>\r\n                            <div class=\"code-block\">\r\n                                <code>cat ~/.ssh/id_ed25519</code>\r\n                            </div>\r\n                            <p>Copy the entire private key content (including BEGIN and END lines) and paste it in the SSH Private Key field above.</p>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"git-modal-footer\">\r\n                    <button class=\"git-action-btn git-secondary-btn\" onclick=\"closeSSHHelp()\">Close</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    /**\r\n     * Close SSH help modal\r\n     */\r\n    closeSSHHelp() {\r\n        const modal = document.getElementById(\"ssh-help-modal\");\r\n        if (modal) {\r\n            modal.remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Import SSH key from file\r\n     */\r\n    importSSHKey() {\r\n        const input = document.createElement(\"input\");\r\n        input.type = \"file\";\r\n        input.accept = \".pem,.key,.txt,text/plain\";\r\n        input.style.display = \"none\";\r\n\r\n        input.addEventListener(\"change\", (e) => {\r\n            const file = e.target.files[0];\r\n            if (file) {\r\n                const reader = new FileReader();\r\n                reader.onload = (e) => {\r\n                    // Try to find SSH key input in both clone modal and add repository form\r\n                    let sshKeyInput = document.getElementById(\"clone-ssh-key\");\r\n                    if (!sshKeyInput) {\r\n                        sshKeyInput = document.getElementById(\"add-ssh-key\");\r\n                    }\r\n\r\n                    if (sshKeyInput) {\r\n                        sshKeyInput.value = e.target.result;\r\n\r\n                        // Trigger change event to update any validation\r\n                        const event = new Event(\"input\", { bubbles: true });\r\n                        sshKeyInput.dispatchEvent(event);\r\n\r\n                        // Show success notification\r\n                        this.showNotification(\r\n                            WPGitManagerGlobal.translations\r\n                                .sshKeyImportedSuccessfully,\r\n                            \"success\"\r\n                        );\r\n                    } else {\r\n                        this.showNotification(\r\n                            WPGitManagerGlobal.translations.sshKeyInputNotFound,\r\n                            \"error\"\r\n                        );\r\n                    }\r\n                };\r\n\r\n                reader.onerror = () => {\r\n                    this.showNotification(\r\n                        WPGitManagerGlobal.translations.failedToReadSSHKeyFile,\r\n                        \"error\"\r\n                    );\r\n                };\r\n\r\n                reader.readAsText(file);\r\n            }\r\n        });\r\n\r\n        // Clean up any existing file input\r\n        const existingInput = document.querySelector(\r\n            'input[type=\"file\"][accept*=\".pem\"]'\r\n        );\r\n        if (existingInput) {\r\n            existingInput.remove();\r\n        }\r\n\r\n        document.body.appendChild(input);\r\n        input.click();\r\n\r\n        // Clean up after a delay to ensure the file dialog has opened\r\n        setTimeout(() => {\r\n            if (document.body.contains(input)) {\r\n                document.body.removeChild(input);\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    /**\r\n     * Show token creation help modal\r\n     */\r\n    showTokenHelp() {\r\n        const modal = document.createElement(\"div\");\r\n        modal.className = \"git-modal-overlay\";\r\n        modal.id = \"token-help-modal\";\r\n        modal.innerHTML = `\r\n            <div class=\"git-modal-content git-modal-large\">\r\n                <div class=\"git-modal-header\">\r\n                    <h3><span class=\"dashicons dashicons-lock\"></span> Personal Access Token Guide</h3>\r\n                    <button class=\"git-modal-close\" onclick=\"closeTokenHelp()\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/></svg></button>\r\n                </div>\r\n                <div class=\"git-modal-body\">\r\n                    <div class=\"help-content\">\r\n                        <div class=\"help-section\">\r\n                            <h4>GitHub</h4>\r\n                            <ol>\r\n                                <li>Go to GitHub Settings → Developer settings → Personal access tokens</li>\r\n                                <li>Click \"Generate new token\". Select scopes (e.g., \\`repo\\`).</li>\r\n                                <li>Generate the token and copy it.</li>\r\n                            </ol>\r\n                        </div>\r\n\r\n                        <div class=\"help-section\">\r\n                            <h4>GitLab</h4>\r\n                            <ol>\r\n                                <li>Go to GitLab User Settings → Access Tokens</li>\r\n                                <li>Create a token with \\`read_repository\\` and \\`write_repository\\` scopes.</li>\r\n                                <li>Copy the generated token.</li>\r\n                            </ol>\r\n                        </div>\r\n\r\n                        <div class=\"help-section\">\r\n                            <h4>Bitbucket</h4>\r\n                            <ol>\r\n                                <li>Go to Bitbucket Settings → App passwords</li>\r\n                                <li>Create an app password with \\`Read\\` and \\`Write\\` permissions for repositories.</li>\r\n                                <li>Copy the generated password.</li>\r\n                            </ol>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"git-modal-footer\">\r\n                    <button class=\"git-action-btn git-secondary-btn\" onclick=\"closeTokenHelp()\">Close</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        document.body.appendChild(modal);\r\n\r\n        // Click on overlay to close\r\n        modal.addEventListener(\"click\", (e) => {\r\n            if (e.target === modal) {\r\n                this.closeTokenHelp();\r\n            }\r\n        });\r\n\r\n        // ESC to close\r\n        const escHandler = (e) => {\r\n            if (e.key === \"Escape\") {\r\n                this.closeTokenHelp();\r\n                window.removeEventListener(\"keydown\", escHandler);\r\n            }\r\n        };\r\n        window.addEventListener(\"keydown\", escHandler);\r\n    }\r\n\r\n    /**\r\n     * Close token help modal\r\n     */\r\n    closeTokenHelp() {\r\n        const modal = document.getElementById(\"token-help-modal\");\r\n        if (modal) {\r\n            modal.remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Clear SSH key from input fields\r\n     */\r\n    clearSSHKey() {\r\n        // Try to find SSH key input in both clone modal and add repository form\r\n        let sshKeyInput = document.getElementById(\"clone-ssh-key\");\r\n        if (!sshKeyInput) {\r\n            sshKeyInput = document.getElementById(\"add-ssh-key\");\r\n        }\r\n\r\n        if (sshKeyInput) {\r\n            sshKeyInput.value = \"\";\r\n\r\n            // Trigger change event to update any validation\r\n            const event = new Event(\"input\", { bubbles: true });\r\n            sshKeyInput.dispatchEvent(event);\r\n\r\n            // Show success notification\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.sshKeyCleared,\r\n                \"success\"\r\n            );\r\n        } else {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.sshKeyInputNotFound,\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup add repository form authentication interactions\r\n     */\r\n    setupAddRepositoryAuthInteractions() {\r\n        const privateRepoCheckbox = document.getElementById(\"add-private-repo\");\r\n        const existingRepoCheckbox =\r\n            document.getElementById(\"add-existing-repo\");\r\n        const authTypeSection = document.getElementById(\r\n            \"add-auth-type-section\"\r\n        );\r\n        const authTypeRadios = document.querySelectorAll(\r\n            'input[name=\"auth_type\"]'\r\n        );\r\n        const sshAuthFields = document.getElementById(\"add-ssh-auth-fields\");\r\n        const httpsAuthFields = document.getElementById(\r\n            \"add-https-auth-fields\"\r\n        );\r\n        const tokenInput = document.getElementById(\"add-token\");\r\n        const toggleTokenBtn = document.getElementById(\r\n            \"toggle-add-token-visibility\"\r\n        );\r\n        const urlInput = document.getElementById(\"add-repo-url\");\r\n\r\n        // Existing repository toggle\r\n        if (existingRepoCheckbox) {\r\n            existingRepoCheckbox.addEventListener(\"change\", (e) => {\r\n                if (e.target.checked) {\r\n                    // Convert URL field into Name field and make it required\r\n                    const urlLabel = document.querySelector(\r\n                        'label[for=\"add-repo-url\"]'\r\n                    );\r\n                    if (urlLabel)\r\n                        urlLabel.textContent =\r\n                            WPGitManagerGlobal?.translations?.repositoryName ||\r\n                            \"Repository Name\";\r\n                    if (urlInput) {\r\n                        urlInput.value = \"\";\r\n                        urlInput.setAttribute(\"required\", \"required\");\r\n                        urlInput.placeholder = \"my-repository-name\";\r\n                    }\r\n                    // Update description/help under the field\r\n                    const urlHelp = document\r\n                        .querySelector(\"#add-repo-url\")\r\n                        ?.parentElement?.querySelector(\".form-help\");\r\n                    if (urlHelp) {\r\n                        urlHelp.textContent =\r\n                            WPGitManagerGlobal?.translations\r\n                                ?.displayNameForRepository ||\r\n                            \"Enter a display name for this repository\";\r\n                    }\r\n                } else {\r\n                    // Make URL field required for new repositories\r\n                    if (urlInput) {\r\n                        const urlLabel = document.querySelector(\r\n                            'label[for=\"add-repo-url\"]'\r\n                        );\r\n                        if (urlLabel)\r\n                            urlLabel.textContent =\r\n                                WPGitManagerGlobal?.translations\r\n                                    ?.repositoryURL || \"Repository URL\";\r\n                        urlInput.setAttribute(\"required\", \"required\");\r\n                        urlInput.placeholder =\r\n                            \"https://github.com/user/repo.git\";\r\n                    }\r\n                    const urlHelp = document\r\n                        .querySelector(\"#add-repo-url\")\r\n                        ?.parentElement?.querySelector(\".form-help\");\r\n                    if (urlHelp) {\r\n                        urlHelp.textContent =\r\n                            WPGitManagerGlobal?.translations\r\n                                ?.enterGitRepositoryURL ||\r\n                            \"Enter the Git repository URL (HTTPS or SSH) - fields will auto-populate\";\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        // Private repository toggle\r\n        if (privateRepoCheckbox) {\r\n            privateRepoCheckbox.addEventListener(\"change\", (e) => {\r\n                if (e.target.checked) {\r\n                    authTypeSection.style.display = \"block\";\r\n                    this.showAddAuthFields();\r\n                } else {\r\n                    authTypeSection.style.display = \"none\";\r\n                    sshAuthFields.style.display = \"none\";\r\n                    httpsAuthFields.style.display = \"none\";\r\n                }\r\n            });\r\n        }\r\n\r\n        // Authentication type selection\r\n        authTypeRadios.forEach((radio) => {\r\n            radio.addEventListener(\"change\", (e) => {\r\n                this.showAddAuthFields();\r\n            });\r\n        });\r\n\r\n        // Token visibility toggle\r\n        if (toggleTokenBtn && tokenInput) {\r\n            toggleTokenBtn.addEventListener(\"click\", () => {\r\n                const type =\r\n                    tokenInput.type === \"password\" ? \"text\" : \"password\";\r\n                tokenInput.type = type;\r\n\r\n                const icon = toggleTokenBtn.querySelector(\"svg\");\r\n                if (type === \"text\") {\r\n                    icon.innerHTML = `\r\n                        <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\"/>\r\n                        <line x1=\"1\" y1=\"1\" x2=\"23\" y2=\"23\"/>\r\n                    `;\r\n                } else {\r\n                    icon.innerHTML = `\r\n                        <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/>\r\n                        <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n                    `;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show appropriate authentication fields for add repository form\r\n     */\r\n    showAddAuthFields() {\r\n        const selectedAuthType = document.querySelector(\r\n            'input[name=\"auth_type\"]:checked'\r\n        );\r\n        const sshAuthFields = document.getElementById(\"add-ssh-auth-fields\");\r\n        const httpsAuthFields = document.getElementById(\r\n            \"add-https-auth-fields\"\r\n        );\r\n\r\n        if (!selectedAuthType) return;\r\n\r\n        if (selectedAuthType.value === \"ssh\") {\r\n            sshAuthFields.style.display = \"block\";\r\n            httpsAuthFields.style.display = \"none\";\r\n        } else if (selectedAuthType.value === \"https\") {\r\n            sshAuthFields.style.display = \"none\";\r\n            httpsAuthFields.style.display = \"block\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create Clone Modal HTML\r\n     */\r\n    createCloneModalHTML() {\r\n        return `\r\n            <div class=\"git-modal-content git-clone-modal\">\r\n                <div class=\"git-modal-header git-clone-modal-header\">\r\n                    <h3>\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"20\" height=\"20\" style=\"margin-right: 8px;\">\r\n                            <path d=\"M5 12h14\"/>\r\n                            <path d=\"M12 5v14\"/>\r\n                        </svg>\r\n                        Add Repository\r\n                    </h3>\r\n                    <button class=\"git-modal-close\" aria-label=\"Close modal\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/></svg></button>\r\n                </div>\r\n\r\n                <div class=\"git-modal-body\">\r\n                    <form id=\"clone-form\" class=\"git-clone-form\">\r\n                        <!-- Repository Information Section -->\r\n                        <div class=\"form-section\">\r\n                            <h4 class=\"form-section-title\">\r\n                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                                    <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"/>\r\n                                    <polyline points=\"14,2 14,8 20,8\"/>\r\n                                </svg>\r\n                                Repository Information\r\n                            </h4>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"clone-repo-url\">Repository URL</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id=\"clone-repo-url\"\r\n                                    name=\"repo_url\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"https://github.com/user/repo.git or git@github.com:user/repo.git\"\r\n                                    required\r\n                                    autocomplete=\"off\"\r\n                                >\r\n                                <div class=\"form-help\">Enter the Git repository URL (HTTPS or SSH) - fields will auto-populate</div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"clone-repo-path\">Local Path</label>\r\n                                <div class=\"input-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"clone-repo-path\"\r\n                                        name=\"repo_path\"\r\n                                        class=\"form-control\"\r\n                                        placeholder=\"wp-content/plugins\"\r\n                                        required\r\n                                    >\r\n                                    <button type=\"button\" class=\"git-action-btn git-secondary-btn\" id=\"browse-path-btn\">\r\n                                        <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"16\" height=\"16\">\r\n                                            <path d=\"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z\"/>\r\n                                        </svg>\r\n                                        Browse\r\n                                    </button>\r\n                                </div>\r\n                                <div class=\"form-help\">Select the parent directory where the repository will be cloned</div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"clone-repo-branch\">Branch (Optional)</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id=\"clone-repo-branch\"\r\n                                    name=\"repo_branch\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"main\"\r\n                                >\r\n                                <div class=\"form-help\">Specify a branch to checkout (defaults to main/master)</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Authentication Section -->\r\n                        <div class=\"form-section\">\r\n                            <h4 class=\"form-section-title\">\r\n                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                                    <path d=\"M15 7h3a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-3\"/>\r\n                                    <path d=\"M10 11l4 4-4 4\"/>\r\n                                    <path d=\"M14 15H9a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h5\"/>\r\n                                </svg>\r\n                                Authentication\r\n                            </h4>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label class=\"switch-label\">\r\n                                    <span class=\"switch-text\">This is a private repository</span>\r\n                                    <div class=\"switch-container\">\r\n                                        <input type=\"checkbox\" id=\"clone-private-repo\" name=\"private_repo\" class=\"switch-input\">\r\n                                        <span class=\"switch-slider\"></span>\r\n                                    </div>\r\n                                </label>\r\n                                <div class=\"form-help\">Enable if the repository requires authentication</div>\r\n                            </div>\r\n\r\n                            <!-- Authentication Type Selection -->\r\n                            <div id=\"auth-type-section\" class=\"form-group\" style=\"display: none;\">\r\n                                <label>Authentication Method</label>\r\n                                <div class=\"auth-method-selector\">\r\n                                    <label class=\"auth-method-option\">\r\n                                        <input type=\"radio\" name=\"auth_type\" value=\"ssh\" checked>\r\n                                        <div class=\"auth-method-card\">\r\n                                            <div class=\"auth-method-icon\">\r\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M2.586 17.414A2 2 0 0 0 2 18.828V21a1 1 0 0 0 1 1h3a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h1a1 1 0 0 0 1-1v-1a1 1 0 0 1 1-1h.172a2 2 0 0 0 1.414-.586l.814-.814a6.5 6.5 0 1 0-4-4z\"/><circle cx=\"16.5\" cy=\"7.5\" r=\".5\" fill=\"currentColor\"/></svg>\r\n                                            </div>\r\n                                            <div class=\"auth-method-content\">\r\n                                                <h5>SSH Key</h5>\r\n                                                <p>Use SSH private key for authentication</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </label>\r\n\r\n                                    <label class=\"auth-method-option\">\r\n                                        <input type=\"radio\" name=\"auth_type\" value=\"https\">\r\n                                        <div class=\"auth-method-card\">\r\n                                            <div class=\"auth-method-icon\">\r\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M7 3.34V5a3 3 0 0 0 3 3\"/><path d=\"M11 21.95V18a2 2 0 0 0-2-2 2 2 0 0 1-2-2v-1a2 2 0 0 0-2-2H2.05\"/><path d=\"M21.54 15H17a2 2 0 0 0-2 2v4.54\"/><path d=\"M12 2a10 10 0 1 0 9.54 13\"/><path d=\"M20 6V4a2 2 0 1 0-4 0v2\"/><rect width=\"8\" height=\"5\" x=\"14\" y=\"6\" rx=\"1\"/></svg>\r\n                                            </div>\r\n                                            <div class=\"auth-method-content\">\r\n                                                <h5>HTTPS Token</h5>\r\n                                                <p>Use username and personal access token</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- SSH Authentication Fields -->\r\n                            <div id=\"ssh-auth-fields\" class=\"auth-fields\" style=\"display: none;\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"clone-ssh-key\">SSH Private Key</label>\r\n                                    <div class=\"ssh-key-input-group\">\r\n                                        <textarea\r\n                                            id=\"clone-ssh-key\"\r\n                                            name=\"private_key\"\r\n                                            class=\"form-control\"\r\n                                            rows=\"8\"\r\n                                            placeholder=\"-----BEGIN OPENSSH PRIVATE KEY-----&#10;Your SSH private key content here...&#10;-----END OPENSSH PRIVATE KEY-----\"\r\n                                        ></textarea>\r\n                                        <div class=\"ssh-key-actions\">\r\n                                            <button type=\"button\" class=\"ssh-key-action-btn\" onclick=\"importSSHKey()\" title=\"Import SSH key from file\">\r\n                                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"12\" height=\"12\">\r\n                                                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/>\r\n                                                    <polyline points=\"7,10 12,15 17,10\"/>\r\n                                                    <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"/>\r\n                                                </svg>\r\n                                                Import\r\n                                            </button>\r\n                                            <button type=\"button\" class=\"ssh-key-action-btn\" onclick=\"clearSSHKey()\" title=\"Clear SSH key\">\r\n                                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"12\" height=\"12\">\r\n                                                    <path d=\"M3 6h18\"/>\r\n                                                    <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"/>\r\n                                                    <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/>\r\n                                                </svg>\r\n                                                Clear\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"form-help\">\r\n                                        <div class=\"help-links\">\r\n                                            <div onclick=\"showSSHHelp()\" class=\"help-link\">\r\n                                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"14\" height=\"14\">\r\n                                                    <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n                                                    <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"/>\r\n                                                    <path d=\"M12 17h.01\"/>\r\n                                                </svg>\r\n                                                How to generate SSH key\r\n                                            </div>\r\n                                            <div onclick=\"importSSHKey()\" class=\"help-link import-link\">\r\n                                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"14\" height=\"14\">\r\n                                                    <path d=\"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"/>\r\n                                                    <polyline points=\"7,10 12,15 17,10\"/>\r\n                                                    <line x1=\"12\" y1=\"15\" x2=\"12\" y2=\"3\"/>\r\n                                                </svg>\r\n                                                Import from file\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <!-- HTTPS Authentication Fields -->\r\n                            <div id=\"https-auth-fields\" class=\"auth-fields\" style=\"display: none;\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"clone-username\">Username</label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"clone-username\"\r\n                                        name=\"username\"\r\n                                        class=\"form-control\"\r\n                                        placeholder=\"your-username\"\r\n                                    >\r\n                                    <div class=\"form-help\">Your Git hosting service username</div>\r\n                                </div>\r\n\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"clone-token\">Personal Access Token</label>\r\n                                    <div class=\"input-group\">\r\n                                        <input\r\n                                            type=\"password\"\r\n                                            id=\"clone-token\"\r\n                                            name=\"token\"\r\n                                            class=\"form-control\"\r\n                                            placeholder=\"ghp_xxxxxxxxxxxxxxxxxxxx\"\r\n                                        >\r\n                                        <button type=\"button\" class=\"git-action-btn git-secondary-btn\" id=\"toggle-token-visibility\">\r\n                                            <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                                                <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\"/>\r\n                                                <circle cx=\"12\" cy=\"12\" r=\"3\"/>\r\n                                            </svg>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div class=\"form-help\">\r\n                                        <div class=\"help-links\">\r\n                                            <div onclick=\"showTokenHelp()\" class=\"help-link\">\r\n                                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"14\" height=\"14\">\r\n                                                    <circle cx=\"12\" cy=\"12\" r=\"10\"/>\r\n                                                    <path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"/>\r\n                                                    <path d=\"M12 17h.01\"/>\r\n                                                </svg>\r\n                                                How to create access token\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Repository Type Section -->\r\n                        <div class=\"form-section\">\r\n                            <h4 class=\"form-section-title\">\r\n                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                                    <path d=\"M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z\"/>\r\n                                    <polyline points=\"14,2 14,8 20,8\"/>\r\n                                </svg>\r\n                                Repository Type\r\n                            </h4>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label class=\"switch-label\">\r\n                                    <span class=\"switch-text\">This is an existing Git repository</span>\r\n                                    <div class=\"switch-container\">\r\n                                        <input type=\"checkbox\" id=\"clone-existing-repo\" name=\"existing_repo\" class=\"switch-input\">\r\n                                        <span class=\"switch-slider\"></span>\r\n                                    </div>\r\n                                </label>\r\n                                <div class=\"form-help\">Enable if the directory already contains a Git repository</div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                <div class=\"git-modal-footer git-clone-form-actions\">\r\n                    <button type=\"button\" class=\"git-action-btn git-secondary-btn\" id=\"cancel-clone-btn\">\r\n                        Cancel\r\n                    </button>\r\n                    <button type=\"submit\" form=\"clone-form\" class=\"git-action-btn\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"16\" height=\"16\">\r\n                            <path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"/>\r\n                        </svg>\r\n                        Add Repository\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    /**\r\n     * Show Add Repository Section\r\n     */\r\n    showAddRepositorySection() {\r\n        // Hide welcome screen and repository details\r\n        const welcomeScreen = document.getElementById(\"git-welcome-screen\");\r\n        const repoDetails = document.getElementById(\"git-repo-details\");\r\n        const addRepoSection = document.getElementById(\"git-add-repository\");\r\n\r\n        if (welcomeScreen) welcomeScreen.style.display = \"none\";\r\n        if (repoDetails) repoDetails.style.display = \"none\";\r\n        if (addRepoSection) addRepoSection.style.display = \"block\";\r\n\r\n        // Set the directory selector target for the add repository form\r\n        this.directorySelectorTarget = \"#add-repo-path\";\r\n\r\n        // Set up form event listeners\r\n        this.setupAddRepositoryForm();\r\n    }\r\n\r\n    /**\r\n     * Ensure proper display states for all sections\r\n     */\r\n    ensureProperDisplayStates() {\r\n        const welcomeScreen = document.getElementById(\"git-welcome-screen\");\r\n        const addRepoSection = document.getElementById(\"git-add-repository\");\r\n        const repoDetails = document.getElementById(\"git-repo-details\");\r\n\r\n        // Reset all display states\r\n        if (welcomeScreen) {\r\n            welcomeScreen.style.display = \"flex\";\r\n            welcomeScreen.style.alignItems = \"center\";\r\n            welcomeScreen.style.justifyContent = \"center\";\r\n        }\r\n        if (addRepoSection) addRepoSection.style.display = \"none\";\r\n        if (repoDetails) repoDetails.style.display = \"none\";\r\n    }\r\n\r\n    /**\r\n     * Setup Add Repository Form Event Listeners\r\n     */\r\n    setupAddRepositoryForm() {\r\n        // Back button\r\n        const backBtn = document.getElementById(\"back-to-welcome\");\r\n        if (backBtn) {\r\n            backBtn.onclick = () => this.hideAddRepositorySection();\r\n        }\r\n\r\n        // Cancel button\r\n        const cancelBtn = document.getElementById(\"cancel-add-repo\");\r\n        if (cancelBtn) {\r\n            cancelBtn.onclick = () => this.hideAddRepositorySection();\r\n        }\r\n\r\n        // Browse path button\r\n        const browseBtn = document.getElementById(\"add-repo-browse-path\");\r\n        if (browseBtn) {\r\n            browseBtn.onclick = () => {\r\n                // Ensure the target is set correctly for add repository\r\n                this.directorySelectorTarget = \"#add-repo-path\";\r\n                this.browsePath(this.directorySelectorTarget);\r\n            };\r\n        }\r\n\r\n        // Setup URL auto-fill for the existing repository form\r\n        this.setupExistingFormUrlAutoFill();\r\n\r\n        // Setup authentication interactions for the add repository form\r\n        this.setupAddRepositoryAuthInteractions();\r\n    }\r\n\r\n    /**\r\n     * Hide Add Repository Section\r\n     */\r\n    hideAddRepositorySection() {\r\n        this.ensureProperDisplayStates();\r\n    }\r\n\r\n    /**\r\n     * Handle Add Repository Form Submission\r\n     */\r\n    async handleAddRepositorySubmit(form) {\r\n        const isExisting = form.querySelector('[name=\"existing_repo\"]').checked;\r\n        const action = isExisting\r\n            ? \"git_manager_add_existing_repo\"\r\n            : \"git_manager_add_repository\";\r\n\r\n        if (!this.validateAddRepositoryForm(form)) {\r\n            return;\r\n        }\r\n\r\n        // Explicitly construct payload to ensure correct keys are sent\r\n        const payload = {\r\n            repo_path: form.querySelector('[name=\"repo_path\"]').value,\r\n            repo_name: \"\", // Name is inferred on the backend\r\n        };\r\n\r\n        if (!isExisting) {\r\n            payload.repo_url = form.querySelector('[name=\"repo_url\"]').value;\r\n            payload.repo_branch = form.querySelector(\r\n                '[name=\"repo_branch\"]'\r\n            ).value;\r\n\r\n            const isPrivate = form.querySelector(\r\n                '[name=\"private_repo\"]'\r\n            ).checked;\r\n            if (isPrivate) {\r\n                payload.auth_type = form.querySelector(\r\n                    '[name=\"auth_type\"]:checked'\r\n                ).value;\r\n                if (payload.auth_type === \"ssh\") {\r\n                    payload.private_key = form.querySelector(\r\n                        '[name=\"private_key\"]'\r\n                    ).value;\r\n                } else {\r\n                    payload.username =\r\n                        form.querySelector('[name=\"username\"]').value;\r\n                    payload.token = form.querySelector('[name=\"token\"]').value;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Show loading state\r\n        this.showProgress(\"Adding repository...\");\r\n        const submitButton = form.querySelector('button[type=\"submit\"]');\r\n        this.setButtonLoadingState(submitButton, true);\r\n\r\n        try {\r\n            const result = await this.apiCall(action, payload);\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    result.data.message || \"Repository added successfully\",\r\n                    \"success\"\r\n                );\r\n                this.refreshRepositoryList();\r\n                this.hideAddRepositorySection();\r\n                if (result.data.repo && result.data.repo.id) {\r\n                    this.selectRepository(result.data.repo.id);\r\n                }\r\n            } else {\r\n                throw new Error(result.data || \"Failed to add repository\");\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                `Failed to add repository: ${error.message}`,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.hideProgress();\r\n            this.setButtonLoadingState(submitButton, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle clone form submission\r\n     */\r\n    async handleCloneSubmit(form) {\r\n        const formData = new FormData(form);\r\n        const data = Object.fromEntries(formData.entries());\r\n\r\n        // Validate form\r\n        if (!this.validateCloneForm(data)) {\r\n            return;\r\n        }\r\n\r\n        // Show loading state\r\n        const submitBtn = form.querySelector('button[type=\"submit\"]');\r\n        const originalText = submitBtn.innerHTML;\r\n        submitBtn.innerHTML = `\r\n            <div class=\"progress-spinner\" style=\"width: 16px; height: 16px; border-width: 2px;\"></div>\r\n            Adding Repository...\r\n        `;\r\n        submitBtn.disabled = true;\r\n\r\n        try {\r\n            // Real AJAX call to WordPress backend\r\n            const ajaxData = new FormData();\r\n            ajaxData.append(\"action\", gitManagerAjax.actions.repo_clone);\r\n            ajaxData.append(\"nonce\", gitManagerAjax.nonce);\r\n\r\n            // Extract repository name from URL\r\n            const urlParts = data.repo_url.split(\"/\");\r\n            const repoName = urlParts[urlParts.length - 1].replace(\".git\", \"\");\r\n\r\n            ajaxData.append(\"remote\", data.repo_url);\r\n            ajaxData.append(\"target\", data.repo_path);\r\n            ajaxData.append(\"name\", repoName);\r\n\r\n            // Handle authentication\r\n            const isPrivateRepo = data.private_repo === \"on\";\r\n            const authType = data.auth_type || \"ssh\";\r\n\r\n            ajaxData.append(\"authType\", authType);\r\n\r\n            if (isPrivateRepo) {\r\n                if (authType === \"ssh\") {\r\n                    const privateKey = data.private_key;\r\n                    if (privateKey && privateKey.trim()) {\r\n                        ajaxData.append(\"private_key\", privateKey);\r\n                    } else {\r\n                        throw new Error(\r\n                            \"SSH private key is required for private repositories\"\r\n                        );\r\n                    }\r\n                } else if (authType === \"https\") {\r\n                    const username = data.username;\r\n                    const token = data.token;\r\n\r\n                    if (!username || !token) {\r\n                        throw new Error(\r\n                            \"Username and personal access token are required for HTTPS authentication\"\r\n                        );\r\n                    }\r\n\r\n                    ajaxData.append(\"username\", username);\r\n                    ajaxData.append(\"token\", token);\r\n                }\r\n            }\r\n\r\n            const response = await fetch(ajaxurl, {\r\n                method: \"POST\",\r\n                body: ajaxData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    \"Repository added successfully!\",\r\n                    \"success\"\r\n                );\r\n                this.closeModal(\"clone\");\r\n                this.loadRepositories();\r\n            } else {\r\n                throw new Error(result.data || \"Failed to add repository\");\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Failed to add repository: \" + error.message,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            submitBtn.innerHTML = originalText;\r\n            submitBtn.disabled = false;\r\n        }\r\n    }\r\n\r\n    validateCloneForm(data) {\r\n        if (!data.repo_url) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.repositoryURLRequired,\r\n                \"error\"\r\n            );\r\n            return false;\r\n        }\r\n\r\n        if (!data.repo_path) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.localPathRequired,\r\n                \"error\"\r\n            );\r\n            return false;\r\n        }\r\n\r\n        // Basic URL validation\r\n        const urlPattern = /^(https?:\\/\\/|git@|ssh:\\/\\/).+\\.git$/;\r\n        if (!urlPattern.test(data.repo_url)) {\r\n            this.showNotification(\r\n                \"Please enter a valid Git repository URL\",\r\n                \"error\"\r\n            );\r\n            return false;\r\n        }\r\n\r\n        // Validate private repository authentication\r\n        const isPrivateRepo = data.private_repo === \"on\";\r\n        if (isPrivateRepo) {\r\n            const authType = data.auth_type;\r\n\r\n            if (!authType) {\r\n                this.showNotification(\r\n                    \"Please select an authentication method\",\r\n                    \"error\"\r\n                );\r\n                return false;\r\n            }\r\n\r\n            if (authType === \"ssh\") {\r\n                if (!data.private_key || !data.private_key.trim()) {\r\n                    this.showNotification(\r\n                        \"SSH private key is required for private repositories\",\r\n                        \"error\"\r\n                    );\r\n                    return false;\r\n                }\r\n\r\n                // Basic SSH key validation\r\n                const sshKeyPattern =\r\n                    /^-----BEGIN (OPENSSH|RSA|DSA|EC) PRIVATE KEY-----/;\r\n                if (!sshKeyPattern.test(data.private_key.trim())) {\r\n                    this.showNotification(\r\n                        \"Please enter a valid SSH private key\",\r\n                        \"error\"\r\n                    );\r\n                    return false;\r\n                }\r\n            } else if (authType === \"https\") {\r\n                if (!data.username || !data.username.trim()) {\r\n                    this.showNotification(\r\n                        \"Username is required for HTTPS authentication\",\r\n                        \"error\"\r\n                    );\r\n                    return false;\r\n                }\r\n\r\n                if (!data.token || !data.token.trim()) {\r\n                    this.showNotification(\r\n                        \"Personal access token is required for HTTPS authentication\",\r\n                        \"error\"\r\n                    );\r\n                    return false;\r\n                }\r\n\r\n                // Basic token validation for common patterns\r\n                const tokenPatterns = [\r\n                    /^ghp_[A-Za-z0-9_]{36}$/, // GitHub personal access token\r\n                    /^gho_[A-Za-z0-9_]{36}$/, // GitHub OAuth token\r\n                    /^ghu_[A-Za-z0-9_]{36}$/, // GitHub user-to-server token\r\n                    /^ghr_[A-Za-z0-9_]{36}$/, // GitHub refresh token\r\n                    /^[A-Za-z0-9]{20,}$/, // Generic token pattern\r\n                ];\r\n\r\n                const isValidToken = tokenPatterns.some((pattern) =>\r\n                    pattern.test(data.token.trim())\r\n                );\r\n                if (!isValidToken) {\r\n                    this.showNotification(\r\n                        \"Please enter a valid personal access token\",\r\n                        \"error\"\r\n                    );\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Repository Management\r\n     */\r\n    async loadRepositories() {\r\n        // Using change-detection signature to avoid unnecessary DOM work\r\n        try {\r\n            const repos = await this.fetchRepositories();\r\n\r\n            const newSig = this._computeRepoListSignature(repos);\r\n            if (\r\n                this._lastRepoListSignature &&\r\n                newSig === this._lastRepoListSignature\r\n            ) {\r\n                // No changes → skip re-render and skeletons\r\n                return;\r\n            }\r\n\r\n            // Changes detected → show skeleton briefly then render\r\n            if (typeof gitManagerSkeleton !== \"undefined\") {\r\n                gitManagerSkeleton.showRepoSkeleton();\r\n            }\r\n            this.renderRepositories(repos);\r\n            if (typeof gitManagerSkeleton !== \"undefined\") {\r\n                gitManagerSkeleton.hideRepoSkeleton();\r\n            }\r\n            this._lastRepoListSignature = newSig;\r\n        } catch (error) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.failedToLoadRepositories,\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    async fetchRepositories() {\r\n        // Check if gitManagerAjax is available\r\n        if (typeof gitManagerAjax === \"undefined\") {\r\n            return [];\r\n        }\r\n\r\n        // Real AJAX call to WordPress backend\r\n        const formData = new FormData();\r\n        formData.append(\"action\", gitManagerAjax.actions.repo_list);\r\n        formData.append(\"nonce\", gitManagerAjax.nonce);\r\n\r\n        const response = await fetch(gitManagerAjax.ajaxurl, {\r\n            method: \"POST\",\r\n            body: formData,\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        const data = await response.json();\r\n\r\n        if (data.success) {\r\n            return data.data || [];\r\n        } else {\r\n            throw new Error(data.data || \"Failed to fetch repositories\");\r\n        }\r\n    }\r\n\r\n    renderRepositories(repos) {\r\n        const repoList = document.getElementById(\"git-repo-list\");\r\n        if (!repoList) return;\r\n\r\n        // Ensure repo skeleton state is cleared before rendering content\r\n        if (typeof gitManagerSkeleton !== \"undefined\") {\r\n            gitManagerSkeleton.hideRepoSkeleton();\r\n        }\r\n\r\n        if (!repos || repos.length === 0) {\r\n            repoList.innerHTML = `\r\n                <div class=\"git-repo-empty\">\r\n                    <p>No repositories found</p>\r\n                </div>\r\n            `;\r\n\r\n            // Ensure welcome screen is shown when no repositories\r\n            const welcomeScreen = document.getElementById(\"git-welcome-screen\");\r\n            const addRepoSection =\r\n                document.getElementById(\"git-add-repository\");\r\n            const repoDetails = document.getElementById(\"git-repo-details\");\r\n\r\n            if (welcomeScreen) {\r\n                welcomeScreen.style.display = \"flex\";\r\n                welcomeScreen.style.alignItems = \"center\";\r\n                welcomeScreen.style.justifyContent = \"center\";\r\n            }\r\n            if (addRepoSection) addRepoSection.style.display = \"none\";\r\n            if (repoDetails) repoDetails.style.display = \"none\";\r\n\r\n            // Ensure buttons are functional in empty state\r\n            setTimeout(() => {\r\n                this.ensureButtonFunctionality();\r\n            }, 50);\r\n\r\n            return;\r\n        }\r\n\r\n        // If structure is same size and order by id, try incremental DOM update to reduce flicker\r\n        const existingCards = Array.from(\r\n            repoList.querySelectorAll(\".git-repo-card\")\r\n        );\r\n        const sameCount = existingCards.length === repos.length;\r\n        const sameOrder =\r\n            sameCount &&\r\n            existingCards.every(\r\n                (el, i) =>\r\n                    el.getAttribute(\"data-repo-id\") == String(repos[i].id)\r\n            );\r\n\r\n        if (!sameOrder) {\r\n            repoList.innerHTML = repos\r\n                .map((repo) => this.createRepoCardHTML(repo))\r\n                .join(\"\");\r\n        } else {\r\n            // Update only changed fields\r\n            repos.forEach((repo, i) =>\r\n                this.updateRepoCard(existingCards[i], repo)\r\n            );\r\n        }\r\n\r\n        // Ensure buttons are functional after rendering\r\n        this.ensureButtonFunctionality();\r\n    }\r\n\r\n    updateRepoCard(card, repo) {\r\n        if (!card) return;\r\n        // Name\r\n        const nameEl = card.querySelector(\".git-repo-name\");\r\n        if (nameEl && nameEl.textContent !== String(repo.name ?? \"\")) {\r\n            nameEl.textContent = String(repo.name ?? \"\");\r\n        }\r\n        // Path\r\n        const pathEl = card.querySelector(\".git-repo-path\");\r\n        if (pathEl && pathEl.textContent !== String(repo.path ?? \"\")) {\r\n            pathEl.textContent = String(repo.path ?? \"\");\r\n        }\r\n        // Branch\r\n        const branchEl = card.querySelector(\".git-repo-branch\");\r\n        if (\r\n            branchEl &&\r\n            branchEl.textContent !== String(repo.activeBranch ?? \"\")\r\n        ) {\r\n            branchEl.textContent = String(repo.activeBranch ?? \"\");\r\n        }\r\n        // Status class\r\n        const statusEl = card.querySelector(\".repo-status\");\r\n        if (statusEl) {\r\n            let statusClass = \"clean\";\r\n            const aheadCount = parseInt(repo.ahead ?? 0, 10) || 0;\r\n            const behindCount = parseInt(repo.behind ?? 0, 10) || 0;\r\n            if (repo.hasChanges) statusClass = \"changes\";\r\n            else if (aheadCount > 0 && behindCount > 0)\r\n                statusClass = \"diverged\";\r\n            else if (aheadCount > 0) statusClass = \"ahead\";\r\n            else if (behindCount > 0) statusClass = \"behind\";\r\n            const desired = `repo-status ${statusClass}`;\r\n            if (statusEl.className !== desired) {\r\n                statusEl.className = desired;\r\n                statusEl.setAttribute(\"data-repo-status\", statusClass);\r\n                const dot = statusEl.querySelector(\".status-dot\");\r\n                if (!dot)\r\n                    statusEl.innerHTML = '<span class=\"status-dot\"></span>';\r\n            }\r\n        }\r\n        // Badges\r\n        const pullBadge = card.querySelector(\".pull-badge\");\r\n        if (pullBadge) {\r\n            const val = String(repo.behind || 0);\r\n            if (pullBadge.textContent !== val) pullBadge.textContent = val;\r\n        }\r\n        const pushBadge = card.querySelector(\".push-badge\");\r\n        if (pushBadge) {\r\n            const val = String(repo.ahead || 0);\r\n            if (pushBadge.textContent !== val) pushBadge.textContent = val;\r\n        }\r\n    }\r\n\r\n    createRepoCardHTML(repo) {\r\n        // Problem states first\r\n        if (!repo.folderExists) {\r\n            return this.createProblemRepoCardHTML(repo, \"missing\");\r\n        }\r\n        if (repo.folderExists && repo.isReadable === false) {\r\n            return this.createProblemRepoCardHTML(repo, \"unreadable\");\r\n        }\r\n        if (repo.folderExists && repo.isValidGit === false) {\r\n            return this.createProblemRepoCardHTML(repo, \"invalidGit\");\r\n        }\r\n\r\n        // Determine status class based on repository state - using same logic as overview tab\r\n        let statusClass = \"clean\";\r\n        const aheadCount = parseInt(repo.ahead ?? 0, 10) || 0;\r\n        const behindCount = parseInt(repo.behind ?? 0, 10) || 0;\r\n\r\n        if (repo.hasChanges) {\r\n            statusClass = \"changes\";\r\n        } else if (aheadCount > 0 && behindCount > 0) {\r\n            statusClass = \"diverged\";\r\n        } else if (aheadCount > 0) {\r\n            statusClass = \"ahead\";\r\n        } else if (behindCount > 0) {\r\n            statusClass = \"behind\";\r\n        }\r\n\r\n        const statusText = this.getCardStatusText(repo.status);\r\n\r\n        // Determine badge text based on repository type\r\n        const badgeText =\r\n            repo.repoType === \"plugin\"\r\n                ? \"Plugin\"\r\n                : repo.repoType === \"theme\"\r\n                ? \"Theme\"\r\n                : \"Other\";\r\n\r\n        return `\r\n            <div class=\"git-repo-card\" data-repo-id=\"${repo.id}\">\r\n                <div class=\"repo-card-header\">\r\n                    <h4 class=\"repo-name git-repo-name\" data-repo-name=\"${this.escapeHtml(\r\n                        repo.name\r\n                    )}\">${this.escapeHtml(repo.name)}</h4>\r\n                    <div class=\"repo-status ${statusClass}\" data-repo-status=\"${statusClass}\">\r\n                        <span class=\"status-dot\"></span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"repo-card-body\">\r\n                    <div class=\"repo-path git-repo-path\" data-repo-path=\"${this.escapeHtml(\r\n                        repo.path\r\n                    )}\">${this.escapeHtml(repo.path)}</div>\r\n                    <div class=\"repo-branch git-repo-branch\" data-repo-branch=\"${this.escapeHtml(\r\n                        repo.activeBranch\r\n                    )}\">${this.escapeHtml(repo.activeBranch)}</div>\r\n                    <span class=\"repo-hashtag ${\r\n                        repo.repoType || \"other\"\r\n                    }\">#${badgeText}</span>\r\n                </div>\r\n\r\n                <div class=\"repo-card-actions\">\r\n                    <div class=\"repo-action-group\">\r\n                        <button class=\"repo-action-btn\" data-action=\"pull\" title=\"Pull changes\" onclick=\"window.safeGitManagerCall('gitOperation', 'pull', '${\r\n                            repo.id\r\n                        }')\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M12 17V3\"/><path d=\"m6 11 6 6 6-6\"/><path d=\"M19 21H5\"/></svg>\r\n                            <span class=\"commit-count-badge pull-badge\">${\r\n                                repo.behind || 0\r\n                            }</span>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"repo-action-group\">\r\n                        <button class=\"repo-action-btn\" data-action=\"push\" title=\"Push changes\" onclick=\"window.safeGitManagerCall('gitOperation', 'push', '${\r\n                            repo.id\r\n                        }')\">\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" width=\"16\" height=\"16\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"m18 9-6-6-6 6\"/><path d=\"M12 3v14\"/><path d=\"M5 21h14\"/></svg>\r\n                            <span class=\"commit-count-badge push-badge\">${\r\n                                repo.ahead || 0\r\n                            }</span>\r\n                        </button>\r\n                    </div>\r\n                    <button class=\"repo-action-btn repo-delete-btn\" data-action=\"delete\" title=\"Delete repository\" onclick=\"window.safeGitManagerCall('deleteRepository', '${\r\n                        repo.id\r\n                    }')\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                            <path d=\"M3 6h18\"/>\r\n                            <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"/>\r\n                            <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createProblemRepoCardHTML(repo, problem) {\r\n        // Determine badge text based on repository type\r\n        const badgeText =\r\n            repo.repoType === \"plugin\"\r\n                ? \"Plugin\"\r\n                : repo.repoType === \"theme\"\r\n                ? \"Theme\"\r\n                : \"Other\";\r\n\r\n        let problemClass = \"missing\";\r\n        let problemTitle = \"Repository folder is missing\";\r\n        if (problem === \"invalidGit\") {\r\n            problemClass = \"invalid\";\r\n            problemTitle = \"Not a valid Git repository at this path\";\r\n        } else if (problem === \"unreadable\") {\r\n            problemClass = \"unreadable\";\r\n            problemTitle = \"Repository path is not readable by the server\";\r\n        }\r\n\r\n        return `\r\n            <div class=\"git-repo-card git-repo-card-${problemClass}\" data-repo-id=\"${this.escapeHtml(\r\n            String(repo.id)\r\n        )}\">\r\n                <div class=\"repo-card-header\">\r\n                    <h4 class=\"repo-name\">${this.escapeHtml(repo.name)}</h4>\r\n                    <div class=\"repo-status ${problemClass}\">\r\n                        <span class=\"status-dot\"></span>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"repo-card-body\">\r\n                    <div class=\"repo-path\">${this.escapeHtml(repo.path)}</div>\r\n                    <div class=\"repo-branch missing-folder-warning\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                            <path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"/>\r\n                            <line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"/>\r\n                            <line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"/>\r\n                        </svg>\r\n                        ${this.escapeHtml(problemTitle)}\r\n                    </div>\r\n                    <span class=\"repo-hashtag ${\r\n                        repo.repoType || \"other\"\r\n                    }\">#${badgeText}</span>\r\n                </div>\r\n\r\n                <div class=\"repo-card-actions\">\r\n                    <button class=\"repo-action-btn repo-troubleshoot-btn\" data-action=\"troubleshoot\" title=\"Troubleshoot this repository\" onclick=\"window.safeGitManagerCall('troubleshootRepoFor', '${\r\n                        repo.id\r\n                    }')\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M20 7h-9\"/><path d=\"M14 17H5\"/><circle cx=\"17\" cy=\"17\" r=\"3\"/><circle cx=\"7\" cy=\"7\" r=\"3\"/></svg>\r\n                        Troubleshoot\r\n                    </button>\r\n                    <button class=\"repo-action-btn repo-reclone-btn\" data-action=\"reclone\" title=\"Re-clone repository to same path\" onclick=\"window.safeGitManagerCall('reCloneRepository', '${\r\n                        repo.id\r\n                    }')\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                            <path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"/>\r\n                            <path d=\"M21 3v5h-5\"/>\r\n                            <path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"/>\r\n                            <path d=\"M3 21v-5h5\"/>\r\n                        </svg>\r\n                        Re-clone\r\n                    </button>\r\n                    <button class=\"repo-action-btn repo-manage-path-btn\" data-action=\"manage-path\" title=\"Manage repository path\" onclick=\"window.safeGitManagerCall('manageRepositoryPath', '${\r\n                        repo.id\r\n                    }')\">\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                            <path d=\"M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z\"/>\r\n                        </svg>\r\n                        Manage Path\r\n                    </button>\r\n                    <button class=\"repo-action-btn repo-delete-btn\" data-action=\"delete\" title=\"Delete repository\" onclick=\"window.safeGitManagerCall('deleteRepository', '${\r\n                        repo.id\r\n                    }')\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                            <path d=\"M3 6h18\"/>\r\n                            <path d=\"M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6\"/>\r\n                            <path d=\"M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2\"/>\r\n                        </svg>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    // Backward-compatible wrapper\r\n    createMissingFolderCardHTML(repo) {\r\n        return this.createProblemRepoCardHTML(repo, \"missing\");\r\n    }\r\n\r\n    getCardStatusText(status) {\r\n        const statusMap = {\r\n            clean: \"Clean\",\r\n            modified: \"Modified\",\r\n            changes: \"Has Changes\",\r\n            ahead: \"Ahead\",\r\n            behind: \"Behind\",\r\n            diverged: \"Diverged\",\r\n            unknown: \"Unknown\",\r\n        };\r\n        return statusMap[status] || \"Unknown\";\r\n    }\r\n\r\n    async selectRepository(repoId) {\r\n        // Hide all skeleton loading states first\r\n        if (typeof gitManagerSkeleton !== \"undefined\") {\r\n            gitManagerSkeleton.hideAllSkeletons();\r\n        }\r\n\r\n        // Remove active class from all cards\r\n        document.querySelectorAll(\".git-repo-card\").forEach((card) => {\r\n            card.classList.remove(\"active\");\r\n        });\r\n\r\n        // Add active class to selected card\r\n        const selectedCard = document.querySelector(\r\n            `[data-repo-id=\"${repoId}\"]`\r\n        );\r\n        if (selectedCard) {\r\n            selectedCard.classList.add(\"active\");\r\n        }\r\n\r\n        // If problematic, open troubleshooting for this repo\r\n        const isProblem =\r\n            selectedCard &&\r\n            (selectedCard.classList.contains(\"git-repo-card-missing\") ||\r\n                selectedCard.classList.contains(\"git-repo-card-invalid\") ||\r\n                selectedCard.classList.contains(\"git-repo-card-unreadable\"));\r\n\r\n        this.currentRepo = repoId;\r\n\r\n        if (isProblem) {\r\n            // Directly launch troubleshooting with proper styling\r\n            this.troubleshootRepo();\r\n            return;\r\n        }\r\n\r\n        // Add a small delay to ensure DOM is ready\r\n        setTimeout(() => {\r\n            this.showRepositoryDetails(repoId);\r\n        }, 100);\r\n    }\r\n\r\n    showMissingFolderMessage(repoId) {\r\n        // Show a notification about the missing folder\r\n        this.showNotification(\r\n            \"This repository folder is missing. Please use the 'Re-clone' button to restore it or 'Delete' to remove the repository entry.\",\r\n            \"warning\",\r\n            { duration: 8000 }\r\n        );\r\n    }\r\n\r\n    showRepositoryDetails(repoId) {\r\n        // Hide welcome screen and add repository section\r\n        const welcomeScreen = document.getElementById(\"git-welcome-screen\");\r\n        const addRepoSection = document.getElementById(\"git-add-repository\");\r\n\r\n        if (welcomeScreen) {\r\n            welcomeScreen.style.display = \"none\";\r\n        } else {\r\n        }\r\n\r\n        if (addRepoSection) {\r\n            addRepoSection.style.display = \"none\";\r\n        }\r\n\r\n        // Show repository details with enhanced display management\r\n        const detailsScreen = document.getElementById(\"git-repo-details\");\r\n        if (detailsScreen) {\r\n            // Force proper display states\r\n            detailsScreen.style.display = \"block\";\r\n            detailsScreen.style.visibility = \"visible\";\r\n            detailsScreen.style.opacity = \"1\";\r\n            detailsScreen.style.position = \"relative\";\r\n            detailsScreen.style.zIndex = \"1\";\r\n\r\n            // Ensure the content is properly laid out\r\n            detailsScreen.classList.add(\"active\");\r\n\r\n            this.loadRepositoryDetails(repoId);\r\n            // Reset signature so next list comparison includes active flag changes\r\n            this._lastRepoListSignature = null;\r\n        } else {\r\n        }\r\n    }\r\n\r\n    showLoadingState() {\r\n        // Scope loading state to inner grids to avoid overlapping with other async sections\r\n        const infoGrid = document.querySelector(\r\n            \"#git-repo-details .repo-info-grid\"\r\n        );\r\n        if (infoGrid) {\r\n            infoGrid.classList.add(\"is-loading\");\r\n        }\r\n        const overviewGrid = document.querySelector(\r\n            \"#git-repo-details .repo-overview-grid\"\r\n        );\r\n        if (overviewGrid) {\r\n            overviewGrid.classList.add(\"is-loading\");\r\n        }\r\n        // Ensure skeletons are visible without altering DOM\r\n        if (typeof gitManagerSkeleton !== \"undefined\") {\r\n            gitManagerSkeleton.showRepoDetailsSkeleton();\r\n        }\r\n    }\r\n\r\n    hideLoadingState() {\r\n        // Clear loading classes from inner grids only\r\n        const infoGrid = document.querySelector(\r\n            \"#git-repo-details .repo-info-grid\"\r\n        );\r\n        if (infoGrid) {\r\n            infoGrid.classList.remove(\"is-loading\");\r\n        }\r\n        const overviewGrid = document.querySelector(\r\n            \"#git-repo-details .repo-overview-grid\"\r\n        );\r\n        if (overviewGrid) {\r\n            overviewGrid.classList.remove(\"is-loading\");\r\n        }\r\n        // Hide any skeleton decorations\r\n        if (typeof gitManagerSkeleton !== \"undefined\") {\r\n            gitManagerSkeleton.hideRepoDetailsSkeleton();\r\n        }\r\n    }\r\n\r\n    loadRepositoryDetails(repoId) {\r\n        if (!repoId) {\r\n            return;\r\n        }\r\n\r\n        // Increment sequence and cancel any in-flight request\r\n        this.detailsRequestSeq += 1;\r\n        const requestSeq = this.detailsRequestSeq;\r\n        if (this.detailsAbortController) {\r\n            try {\r\n                this.detailsAbortController.abort();\r\n            } catch (e) {}\r\n        }\r\n        this.detailsAbortController = new AbortController();\r\n\r\n        this.showLoadingState();\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"action\", gitManagerAjax.actions.get_repo_details);\r\n        formData.append(\"nonce\", gitManagerAjax.nonce);\r\n        formData.append(\"id\", repoId);\r\n\r\n        fetch(gitManagerAjax.ajaxurl, {\r\n            method: \"POST\",\r\n            body: formData,\r\n            signal: this.detailsAbortController.signal,\r\n        })\r\n            .then((response) => {\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n                return response.json();\r\n            })\r\n            .then((result) => {\r\n                // Only process if this is the latest request\r\n                if (requestSeq !== this.detailsRequestSeq) return;\r\n                if (result.success) {\r\n                    this.populateRepositoryDetails(result.data);\r\n                } else {\r\n                    throw new Error(\r\n                        result.data || \"Failed to load repository details\"\r\n                    );\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // Ignore AbortError for outdated requests\r\n                if (error && error.name === \"AbortError\") return;\r\n                // Only report if this is the latest request\r\n                if (requestSeq !== this.detailsRequestSeq) return;\r\n\r\n                this.showNotification(\r\n                    \"Failed to load repository details: \" + error.message,\r\n                    \"error\"\r\n                );\r\n            })\r\n            .finally(() => {\r\n                // Only hide loading state if this is the latest request\r\n                if (requestSeq === this.detailsRequestSeq) {\r\n                    this.hideLoadingState();\r\n                }\r\n            });\r\n    }\r\n\r\n    startLiveUpdates() {\r\n        // Refresh repository list every ~8 hours (skip when tab not visible)\r\n        if (!this._repoListPoller) {\r\n            this._repoListPoller = setInterval(() => {\r\n                if (document.hidden) return;\r\n                // Use silent refresh to avoid flicker when no changes\r\n                this.refreshRepositoriesSilently();\r\n            }, 28800000);\r\n        }\r\n\r\n        // Refresh active repository details every ~8 hours (skip when tab not visible)\r\n        if (!this._repoDetailsPoller) {\r\n            this._repoDetailsPoller = setInterval(() => {\r\n                if (document.hidden) return;\r\n                // Only refresh details if repo is selected and overview tab is active\r\n                const isOverviewActive = this.activeTab === \"overview\";\r\n                if (this.currentRepo && isOverviewActive) {\r\n                    this.loadRepositoryDetails(this.currentRepo);\r\n                }\r\n            }, 28800000);\r\n        }\r\n\r\n        // Update live badge\r\n        const badge = document.getElementById(\"git-live-badge\");\r\n        if (badge) {\r\n            badge.classList.add(\"is-live\");\r\n        }\r\n\r\n        // Cross-tab branch change sync from floating widget\r\n        window.addEventListener(\"storage\", (e) => {\r\n            if (e && e.key === \"git_manager_last_checkout\") {\r\n                // Force full refresh to reflect new branch\r\n                this._lastRepoListSignature = null;\r\n                this.loadRepositories();\r\n                if (this.currentRepo) {\r\n                    this.loadRepositoryDetails(this.currentRepo);\r\n                }\r\n            }\r\n        });\r\n\r\n        // When tab becomes visible again, trigger a refresh\r\n        document.addEventListener(\"visibilitychange\", () => {\r\n            if (!document.hidden) {\r\n                this.refreshRepositoriesSilently();\r\n                if (this.currentRepo && this.activeTab === \"overview\") {\r\n                    this.loadRepositoryDetails(this.currentRepo);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Cleanup on unload\r\n        window.addEventListener(\"beforeunload\", () => {\r\n            if (this._repoListPoller) clearInterval(this._repoListPoller);\r\n            if (this._repoDetailsPoller) clearInterval(this._repoDetailsPoller);\r\n        });\r\n    }\r\n\r\n    async refreshRepositoriesSilently() {\r\n        try {\r\n            const repos = await this.fetchRepositories();\r\n            const newSig = this._computeRepoListSignature(repos);\r\n            if (\r\n                this._lastRepoListSignature &&\r\n                newSig === this._lastRepoListSignature\r\n            ) {\r\n                return; // no changes\r\n            }\r\n            // minimal update without forcing skeletons\r\n            this.renderRepositories(repos);\r\n            this._lastRepoListSignature = newSig;\r\n        } catch (e) {\r\n            // silent\r\n        }\r\n    }\r\n\r\n    _computeRepoListSignature(repos) {\r\n        try {\r\n            const projection = (r) => ({\r\n                id: String(r.id ?? \"\"),\r\n                name: r.name ?? \"\",\r\n                path: r.path ?? \"\",\r\n                activeBranch: r.activeBranch ?? \"\",\r\n                hasChanges: !!r.hasChanges,\r\n                ahead: Number(r.ahead ?? 0) || 0,\r\n                behind: Number(r.behind ?? 0) || 0,\r\n                folderExists: !!r.folderExists,\r\n                repoType: r.repoType ?? \"\",\r\n                active: !!r.active,\r\n            });\r\n            const compact = repos\r\n                .map(projection)\r\n                .sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0));\r\n            return JSON.stringify(compact);\r\n        } catch (e) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    populateRepositoryDetails(repo) {\r\n        // This function will now reliably find the elements because they are never removed.\r\n        const elements = {\r\n            \"repo-name\": repo.name || \"-\",\r\n            \"repo-path\": repo.path || \"-\",\r\n            \"repo-branch\": repo.activeBranch || \"Unknown\",\r\n            \"repo-status\": this.getStatusText(repo),\r\n            \"repo-remote\": repo.remoteUrl || \"-\",\r\n        };\r\n\r\n        Object.keys(elements).forEach((id) => {\r\n            const element = document.getElementById(id);\r\n            if (element) {\r\n                element.textContent = elements[id];\r\n            } else {\r\n            }\r\n        });\r\n\r\n        const repoNameHeader = document.getElementById(\"repo-details-name\");\r\n        if (repoNameHeader) {\r\n            repoNameHeader.textContent = repo.name || \"Repository\";\r\n        }\r\n\r\n        this.updateOverviewSection(repo);\r\n\r\n        // Only reload commits and branches if there's a significant change\r\n        // Check if this is a forced refresh or if there are actual changes\r\n        const shouldReloadCommits = this.shouldReloadCommits(repo);\r\n        const shouldReloadBranches = this.shouldReloadBranches(repo);\r\n\r\n        if (shouldReloadCommits) {\r\n            this.loadCommits(repo.id);\r\n        }\r\n\r\n        if (shouldReloadBranches) {\r\n            this.loadBranches(repo.id);\r\n        }\r\n\r\n        // Store current repo data for next comparison\r\n        this._lastRepoData[repo.id] = {\r\n            activeBranch: repo.activeBranch,\r\n            ahead: repo.ahead,\r\n            behind: repo.behind,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Check if commits should be reloaded based on repository changes\r\n     */\r\n    shouldReloadCommits(repo) {\r\n        // Always reload on first load or if no previous data\r\n        if (!this._lastRepoData || !this._lastRepoData[repo.id]) {\r\n            return true;\r\n        }\r\n\r\n        const lastRepo = this._lastRepoData[repo.id];\r\n\r\n        // Reload if branch changed\r\n        if (lastRepo.activeBranch !== repo.activeBranch) {\r\n            return true;\r\n        }\r\n\r\n        // Reload if ahead/behind counts changed significantly\r\n        if (\r\n            Math.abs((lastRepo.ahead || 0) - (repo.ahead || 0)) > 0 ||\r\n            Math.abs((lastRepo.behind || 0) - (repo.behind || 0)) > 0\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        // Don't reload if no significant changes\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Check if branches should be reloaded based on repository changes\r\n     */\r\n    shouldReloadBranches(repo) {\r\n        // Always reload on first load or if no previous data\r\n        if (!this._lastRepoData || !this._lastRepoData[repo.id]) {\r\n            return true;\r\n        }\r\n\r\n        const lastRepo = this._lastRepoData[repo.id];\r\n\r\n        // Reload if branch changed\r\n        if (lastRepo.activeBranch !== repo.activeBranch) {\r\n            return true;\r\n        }\r\n\r\n        // Don't reload if no significant changes\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Force reload commits (bypasses smart reloading)\r\n     */\r\n    forceReloadCommits(repoId) {\r\n        this.loadCommits(repoId);\r\n    }\r\n\r\n    /**\r\n     * Force reload branches (bypasses smart reloading)\r\n     */\r\n    forceReloadBranches(repoId) {\r\n        this.loadBranches(repoId);\r\n    }\r\n\r\n    /**\r\n     * Update repository display with new data\r\n     */\r\n    updateRepositoryDisplay(data) {\r\n        // Update repository information display\r\n        const elements = {\r\n            \"repo-name\": data.name,\r\n            \"repo-path\": data.path,\r\n            \"repo-branch\": data.activeBranch,\r\n            \"repo-status\": data.hasChanges\r\n                ? \"Has Changes (Uncommitted)\"\r\n                : \"Clean\",\r\n            \"repo-remote\": data.remoteUrl,\r\n        };\r\n\r\n        for (const [id, value] of Object.entries(elements)) {\r\n            const element = document.getElementById(id);\r\n            if (element) {\r\n                element.textContent = value;\r\n            }\r\n        }\r\n\r\n        // Update repository header name\r\n        const repoNameHeader = document.querySelector(\".git-repo-header h2\");\r\n        if (repoNameHeader) {\r\n            repoNameHeader.textContent = data.name || \"Repository\";\r\n        }\r\n\r\n        // Update any other elements that might display repository name\r\n        const repoNameElements = document.querySelectorAll(\"[data-repo-name]\");\r\n        repoNameElements.forEach((element) => {\r\n            element.textContent = data.name || \"Repository\";\r\n        });\r\n\r\n        // Update repository path displays\r\n        const repoPathElements = document.querySelectorAll(\"[data-repo-path]\");\r\n        repoPathElements.forEach((element) => {\r\n            element.textContent = data.path || \"\";\r\n        });\r\n\r\n        // Update remote URL displays\r\n        const repoRemoteElements =\r\n            document.querySelectorAll(\"[data-repo-remote]\");\r\n        repoRemoteElements.forEach((element) => {\r\n            element.textContent = data.remoteUrl || \"No remote configured\";\r\n        });\r\n\r\n        // Update status indicators\r\n        const statusElements = document.querySelectorAll(\"[data-repo-status]\");\r\n        statusElements.forEach((element) => {\r\n            element.textContent = data.hasChanges ? \"Modified\" : \"Clean\";\r\n            element.className = data.hasChanges\r\n                ? \"status-modified\"\r\n                : \"status-clean\";\r\n        });\r\n\r\n        // Update branch displays\r\n        const branchElements = document.querySelectorAll(\"[data-repo-branch]\");\r\n        branchElements.forEach((element) => {\r\n            element.textContent = data.activeBranch || \"Unknown\";\r\n        });\r\n\r\n        // Trigger any custom events for other components that might need to update\r\n        const updateEvent = new CustomEvent(\"repositoryUpdated\", {\r\n            detail: { repository: data },\r\n        });\r\n        document.dispatchEvent(updateEvent);\r\n\r\n        // Add visual feedback for updated elements\r\n        this.addUpdateVisualFeedback();\r\n    }\r\n\r\n    /**\r\n     * Add visual feedback for updated repository elements\r\n     */\r\n    addUpdateVisualFeedback() {\r\n        // Add flash animation to updated elements\r\n        const updatedElements = document.querySelectorAll(\r\n            \"[data-repo-name], [data-repo-path], [data-repo-branch], [data-repo-status]\"\r\n        );\r\n        updatedElements.forEach((element) => {\r\n            element.classList.add(\"repository-updated\");\r\n            setTimeout(() => {\r\n                element.classList.remove(\"repository-updated\");\r\n            }, 500);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Search functionality\r\n     */\r\n    focusSearch() {\r\n        const searchInput = document.querySelector(\".git-search-input\");\r\n        if (searchInput) {\r\n            searchInput.focus();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Git operations (fetch, pull, push)\r\n     */\r\n    async gitOperation(operation, repoId) {\r\n        if (!repoId) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.noRepositorySelected,\r\n                \"warning\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.showProgress(operation);\r\n\r\n        try {\r\n            const response = await this.apiCall(\"git_manager_repo_git\", {\r\n                id: repoId,\r\n                op: operation,\r\n            });\r\n\r\n            if (response.success) {\r\n                this.showNotification(\r\n                    `${operation} completed successfully`,\r\n                    \"success\"\r\n                );\r\n                // Refresh both active details and list\r\n                this.loadRepositoryDetails(repoId);\r\n                this.loadRepositories();\r\n            } else {\r\n                this.showNotification(`Error during ${operation}`, \"error\");\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(`Error during ${operation}`, \"error\");\r\n        }\r\n\r\n        this.hideProgress();\r\n    }\r\n\r\n    /**\r\n     * Show branches tab\r\n     */\r\n    showBranches() {\r\n        const btn = document.querySelector(\r\n            '.git-repo-tab[data-tab=\"branches\"]'\r\n        );\r\n        if (btn) {\r\n            btn.click();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Professional troubleshooting for repositories\r\n     */\r\n    async troubleshootRepo() {\r\n        if (!this.currentRepo) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.noRepositorySelected,\r\n                \"warning\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.showProgress(\r\n            WPGitManagerGlobal.translations.runningProfessionalTroubleshooting\r\n        );\r\n\r\n        try {\r\n            const response = await this.apiCall(\r\n                \"git_manager_repo_troubleshoot\",\r\n                {\r\n                    id: this.currentRepo,\r\n                }\r\n            );\r\n\r\n            if (response.success) {\r\n                this.showTroubleshootModal(response.data.html);\r\n            } else {\r\n                this.showNotification(\r\n                    \"Troubleshooting failed: \" +\r\n                        (response.data ||\r\n                            WPGitManagerGlobal.translations.unknownError),\r\n                    \"error\"\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Troubleshooting error: \" + error.message,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.hideProgress();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show troubleshooting results modal\r\n     */\r\n    showTroubleshootModal(html) {\r\n        const modal = document.createElement(\"div\");\r\n        modal.className = \"git-modal-overlay\";\r\n        modal.id = \"troubleshoot-modal\";\r\n        modal.innerHTML = `\r\n            <div class=\"git-modal-content git-modal-large\">\r\n                <div class=\"git-modal-header\">\r\n                    <h3><span class=\"dashicons dashicons-hammer\"></span> Professional Troubleshooting Results</h3>\r\n                    <button class=\"git-modal-close\" onclick=\"GitManager.closeTroubleshootModal()\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/></svg></button>\r\n                </div>\r\n                <div class=\"git-modal-body\">\r\n                    <div class=\"troubleshoot-results\">\r\n                        ${html}\r\n                    </div>\r\n                </div>\r\n                <div class=\"git-modal-footer\">\r\n                    <button class=\"git-action-btn git-secondary-btn\" onclick=\"GitManager.closeTroubleshootModal()\">Close</button>\r\n                    <button class=\"git-action-btn\" onclick=\"GitManager.fixPermission()\">Fix Permissions</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    /**\r\n     * Close troubleshooting modal\r\n     */\r\n    closeTroubleshootModal() {\r\n        const modal = document.getElementById(\"troubleshoot-modal\");\r\n        if (modal) {\r\n            modal.remove();\r\n        }\r\n        // keep live state unchanged\r\n    }\r\n\r\n    /**\r\n     * Fix repository permissions\r\n     */\r\n    async fixPermission() {\r\n        if (!this.currentRepo) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.noRepositorySelected,\r\n                \"warning\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Start notification for Fix Permissions\r\n        this.showNotification(\r\n            WPGitManagerGlobal.translations.requestingPermissionFix,\r\n            \"info\",\r\n            {\r\n                duration: 4000,\r\n            }\r\n        );\r\n\r\n        this.showProgress(\r\n            WPGitManagerGlobal.translations.fixingRepositoryPermissions\r\n        );\r\n\r\n        try {\r\n            const response = await this.apiCall(\"git_manager_fix_permission\", {\r\n                id: this.currentRepo,\r\n            });\r\n\r\n            if (response.success) {\r\n                this.showNotification(\r\n                    WPGitManagerGlobal.translations\r\n                        .permissionsFixedSuccessfully,\r\n                    \"success\"\r\n                );\r\n                // Refresh repository details\r\n                this.loadRepositoryDetails(this.currentRepo);\r\n            } else {\r\n                const errMsg = this.extractErrorMessage(response);\r\n                this.showNotification(\r\n                    `${WPGitManagerGlobal.translations.permissionFixFailed}: ${errMsg}`,\r\n                    \"error\"\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                `${WPGitManagerGlobal.translations.permissionFixError}: ${error.message}`,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.hideProgress();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show progress overlay\r\n     */\r\n    showProgress(message = WPGitManagerGlobal.translations.processing) {\r\n        if (message === \"pull\") {\r\n            message = WPGitManagerGlobal.translations.pullingRepository;\r\n        }\r\n        if (message === \"push\") {\r\n            message = WPGitManagerGlobal.translations.pushingRepository;\r\n        }\r\n        if (message === \"fetch\") {\r\n            message = WPGitManagerGlobal.translations.fetchingRepository;\r\n        }\r\n        try {\r\n            if (\r\n                this._progressToast &&\r\n                document.body.contains(this._progressToast)\r\n            ) {\r\n                // update message\r\n                const msg = this._progressToast.querySelector(\r\n                    \".notification-message\"\r\n                );\r\n                if (msg) msg.textContent = message;\r\n                return;\r\n            }\r\n        } catch (e) {}\r\n        this._progressToast = this.showNotification(message, \"info\", {\r\n            duration: 0,\r\n            showProgress: false,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Hide progress overlay\r\n     */\r\n    hideProgress() {\r\n        if (this._progressToast) {\r\n            const el = this._progressToast;\r\n            try {\r\n                el.classList.add(\"closing\");\r\n                setTimeout(() => el.remove(), 200);\r\n            } catch (e) {\r\n                try {\r\n                    el.remove();\r\n                } catch (e2) {}\r\n            }\r\n            this._progressToast = null;\r\n        }\r\n\r\n        // Mark UI as not live when no pollers are active\r\n        const badge = document.getElementById(\"git-live-badge\");\r\n        if (badge && !this._repoListPoller && !this._repoDetailsPoller) {\r\n            badge.classList.remove(\"is-live\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update overview section with repository data\r\n     */\r\n    updateOverviewSection(repo) {\r\n        try {\r\n            this.updateRepositoryStatus(repo);\r\n        } catch (error) {}\r\n\r\n        try {\r\n            this.updateBranchInformation(repo);\r\n        } catch (error) {}\r\n\r\n        try {\r\n            this.updateChangesInformation(repo);\r\n        } catch (error) {}\r\n\r\n        try {\r\n            this.updateRecommendations(repo);\r\n        } catch (error) {}\r\n    }\r\n\r\n    /**\r\n     * Update repository status\r\n     */\r\n    updateRepositoryStatus(repo) {\r\n        const statusIndicator = document.getElementById(\r\n            \"repo-status-indicator\"\r\n        );\r\n        const statusContent = document.getElementById(\"repo-status-content\");\r\n        let statusDot = statusIndicator?.querySelector(\".status-dot\");\r\n        const statusLabel = document.getElementById(\"repo-status-label\");\r\n        const statusBody = document.getElementById(\"repo-status-body\");\r\n\r\n        if (!statusIndicator || !statusContent) {\r\n            return;\r\n        }\r\n\r\n        // Ensure status dot exists\r\n        if (!statusDot) {\r\n            statusDot = document.createElement(\"span\");\r\n            statusDot.className = \"status-dot\";\r\n            statusIndicator.prepend(statusDot);\r\n        }\r\n\r\n        let status = \"clean\";\r\n        let statusMessage = \"Repository is clean and up to date.\";\r\n        let statusClass = \"clean\";\r\n\r\n        const aheadCount = parseInt(repo.ahead ?? 0, 10) || 0;\r\n        const behindCount = parseInt(repo.behind ?? 0, 10) || 0;\r\n\r\n        if (repo.hasChanges) {\r\n            status = \"changes\";\r\n            statusMessage = \"Repository has uncommitted changes.\";\r\n            statusClass = \"changes\";\r\n        } else if (aheadCount > 0 && behindCount > 0) {\r\n            status = \"diverged\";\r\n            statusMessage =\r\n                \"Repository has diverged from remote. Manual merge needed.\";\r\n            statusClass = \"diverged\";\r\n        } else if (aheadCount > 0) {\r\n            status = \"ahead\";\r\n            const aheadTpl =\r\n                (typeof WPGitManagerGlobal !== \"undefined\" &&\r\n                    WPGitManagerGlobal?.translations\r\n                        ?.repositoryIsAheadOfRemote) ||\r\n                \"Repository is ahead of remote by {count} commit(s).\";\r\n            statusMessage = aheadTpl.replace(\"{count}\", aheadCount);\r\n            statusClass = \"ahead\";\r\n        } else if (behindCount > 0) {\r\n            status = \"behind\";\r\n            const behindTpl =\r\n                (typeof WPGitManagerGlobal !== \"undefined\" &&\r\n                    WPGitManagerGlobal?.translations\r\n                        ?.repositoryIsBehindRemote) ||\r\n                \"Repository is behind remote by {count} commit(s).\";\r\n            statusMessage = behindTpl.replace(\"{count}\", behindCount);\r\n            statusClass = \"behind\";\r\n        }\r\n\r\n        // Update status dot\r\n        if (statusDot) {\r\n            statusDot.className = `status-dot ${statusClass}`;\r\n        }\r\n\r\n        // Update status label and body content\r\n        if (statusLabel) {\r\n            statusLabel.textContent =\r\n                status === \"clean\"\r\n                    ? \"Clean\"\r\n                    : status === \"changes\"\r\n                    ? \"Has Changes\"\r\n                    : status === \"ahead\"\r\n                    ? \"Ahead\"\r\n                    : status === \"behind\"\r\n                    ? \"Behind\"\r\n                    : \"Diverged\";\r\n        }\r\n\r\n        if (statusBody) {\r\n            statusBody.innerHTML = `<p class=\"value\">${statusMessage}</p>`;\r\n        } else {\r\n            // fallback\r\n            statusContent.innerHTML = `<p class=\"value\">${statusMessage}</p>`;\r\n        }\r\n\r\n        // Remove skeleton loading elements (always try)\r\n        try {\r\n            const skeletons = statusIndicator.querySelectorAll(\".skeleton\");\r\n            skeletons.forEach((s) => s.remove());\r\n            const contentSkeletons =\r\n                statusContent.querySelectorAll(\".skeleton\");\r\n            contentSkeletons.forEach((s) => s.remove());\r\n        } catch (e) {}\r\n    }\r\n\r\n    /**\r\n     * Update branch information\r\n     */\r\n    updateBranchInformation(repo) {\r\n        const branchName = document.getElementById(\"branch-name\");\r\n        const branchSyncStatus = document.getElementById(\"branch-sync-status\");\r\n        const branchContent = document.getElementById(\"repo-branch-content\");\r\n\r\n        if (branchName) {\r\n            branchName.textContent = repo.activeBranch || \"Unknown\";\r\n        }\r\n\r\n        if (branchSyncStatus) {\r\n            let syncHTML = \"\";\r\n\r\n            if (repo.ahead > 0 && repo.behind > 0) {\r\n                syncHTML = `\r\n                    <div class=\"sync-indicator ahead\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\"><path d=\"m18 9-6-6-6 6\"/><path d=\"M12 3v14\"/><path d=\"M5 21h14\"/></svg>\r\n                        <span>Ahead by ${repo.ahead}</span>\r\n                    </div>\r\n                    <div class=\"sync-indicator behind\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\"><path d=\"M12 17V3\"/><path d=\"m6 11 6 6 6-6\"/><path d=\"M19 21H5\"/></svg>\r\n                        <span>Behind by ${repo.behind}</span>\r\n                    </div>\r\n                `;\r\n            } else if (repo.ahead > 0) {\r\n                syncHTML = `\r\n                    <div class=\"sync-indicator ahead\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\"><path d=\"m18 9-6-6-6 6\"/><path d=\"M12 3v14\"/><path d=\"M5 21h14\"/></svg>\r\n                        <span>Ahead by ${repo.ahead} commit(s)</span>\r\n                    </div>\r\n                `;\r\n            } else if (repo.behind > 0) {\r\n                syncHTML = `\r\n                    <div class=\"sync-indicator behind\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\"><path d=\"M12 17V3\"/><path d=\"m6 11 6 6 6-6\"/><path d=\"M19 21H5\"/></svg>\r\n                        <span>Behind by ${repo.behind} commit(s)</span>\r\n                    </div>\r\n                `;\r\n            } else {\r\n                syncHTML = `\r\n                    <div class=\"sync-indicator synced\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\"><path d=\"M20 6 9 17l-5-5\"/></svg>\r\n                        <span>Synchronized with remote</span>\r\n                    </div>\r\n                `;\r\n            }\r\n\r\n            branchSyncStatus.innerHTML = syncHTML;\r\n        }\r\n\r\n        // Remove skeleton loading elements\r\n        if (branchContent) {\r\n            const skeletons = branchContent.querySelectorAll(\".skeleton\");\r\n            skeletons.forEach((skeleton) => skeleton.remove());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update changes information\r\n     */\r\n    updateChangesInformation(repo) {\r\n        const changesList = document.getElementById(\"changes-list\");\r\n        const changesContent = document.getElementById(\"repo-changes-content\");\r\n        const changesCount = document.getElementById(\"changes-count\");\r\n\r\n        if (!changesList) {\r\n            return;\r\n        }\r\n\r\n        // Show skeleton loading for changes with safety check\r\n        if (!gitManagerSkeleton.safeShowSkeleton(changesList, \"list\", 3)) {\r\n            // Continue without skeleton\r\n        }\r\n\r\n        this.loadDetailedStatus(repo.id)\r\n            .then((statusInfo) => {\r\n                if (statusInfo) {\r\n                    this.populateChangesList(statusInfo);\r\n                } else {\r\n                    changesList.innerHTML = `<p class=\"value\" style=\"text-align: center;\">No changes found.</p>`;\r\n                    this.updateChangesCount(0);\r\n                }\r\n\r\n                // Remove skeleton loading elements\r\n                if (changesContent) {\r\n                    const skeletons =\r\n                        changesContent.querySelectorAll(\".skeleton\");\r\n                    skeletons.forEach((skeleton) => skeleton.remove());\r\n                }\r\n                if (changesCount) {\r\n                    const skeletons =\r\n                        changesCount.querySelectorAll(\".skeleton\");\r\n                    skeletons.forEach((skeleton) => skeleton.remove());\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                gitManagerSkeleton.hideSkeleton(changesList, \"list\");\r\n                changesList.innerHTML = `<p class=\"value\" style=\"text-align: center;\">Error loading changes.</p>`;\r\n                this.updateChangesCount(0);\r\n\r\n                // Remove skeleton loading elements\r\n                if (changesContent) {\r\n                    const skeletons =\r\n                        changesContent.querySelectorAll(\".skeleton\");\r\n                    skeletons.forEach((skeleton) => skeleton.remove());\r\n                }\r\n                if (changesCount) {\r\n                    const skeletons =\r\n                        changesCount.querySelectorAll(\".skeleton\");\r\n                    skeletons.forEach((skeleton) => skeleton.remove());\r\n                }\r\n            });\r\n    }\r\n\r\n    updateChangesCount(totalChanges) {\r\n        const changesCount = document.getElementById(\"changes-count\");\r\n        if (changesCount) {\r\n            const countBadge = changesCount.querySelector(\".count-badge\");\r\n            if (countBadge) {\r\n                countBadge.textContent = totalChanges.toString();\r\n                countBadge.className =\r\n                    totalChanges > 0\r\n                        ? \"count-badge has-changes\"\r\n                        : \"count-badge\";\r\n            }\r\n        }\r\n    }\r\n\r\n    async loadDetailedStatus(repoId) {\r\n        try {\r\n            // Check if gitManagerAjax is available\r\n            if (typeof gitManagerAjax === \"undefined\") {\r\n                return null;\r\n            }\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.status);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            formData.append(\"id\", repoId);\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n\r\n                if (result.success) {\r\n                    return result.data;\r\n                } else {\r\n                }\r\n            } else {\r\n                const errorText = await response.text();\r\n            }\r\n        } catch (error) {}\r\n        return null;\r\n    }\r\n\r\n    populateChangesList(statusInfo) {\r\n        const changesList = document.getElementById(\"changes-list\");\r\n        if (!changesList) {\r\n            return;\r\n        }\r\n\r\n        if (!statusInfo) {\r\n            gitManagerSkeleton.hideSkeleton(changesList, \"list\");\r\n            changesList.innerHTML = \"<p>Error loading changes</p>\";\r\n            return;\r\n        }\r\n\r\n        let changesHTML = \"\";\r\n        let totalChanges = 0;\r\n\r\n        // Staged files\r\n        if (statusInfo.stagedFiles && statusInfo.stagedFiles.length > 0) {\r\n            statusInfo.stagedFiles.forEach((file) => {\r\n                changesHTML += `\r\n                    <div class=\"change-row change-row--staged\">\r\n                        <div class=\"change-row__left\">\r\n                            <span class=\"change-icon staged\" aria-hidden=\"true\">●</span>\r\n                        </div>\r\n                        <div class=\"change-row__main\">\r\n                            <div class=\"change-file\">${this.escapeHtml(\r\n                                file\r\n                            )}</div>\r\n                            <div class=\"change-meta\">Staged</div>\r\n                        </div>\r\n                    </div>\r\n                `;\r\n                totalChanges++;\r\n            });\r\n        }\r\n\r\n        // Modified files\r\n        if (statusInfo.modifiedFiles && statusInfo.modifiedFiles.length > 0) {\r\n            statusInfo.modifiedFiles.forEach((file) => {\r\n                changesHTML += `\r\n                    <div class=\"change-row change-row--modified\">\r\n                        <div class=\"change-row__left\"><span class=\"change-icon modified\" aria-hidden=\"true\">●</span></div>\r\n                        <div class=\"change-row__main\"><div class=\"change-file\">${this.escapeHtml(\r\n                            file\r\n                        )}</div><div class=\"change-meta\">Modified</div></div>\r\n                    </div>\r\n                `;\r\n                totalChanges++;\r\n            });\r\n        }\r\n\r\n        // Untracked files\r\n        if (statusInfo.untrackedFiles && statusInfo.untrackedFiles.length > 0) {\r\n            statusInfo.untrackedFiles.forEach((file) => {\r\n                changesHTML += `\r\n                    <div class=\"change-row change-row--untracked\">\r\n                        <div class=\"change-row__left\"><span class=\"change-icon untracked\" aria-hidden=\"true\">●</span></div>\r\n                        <div class=\"change-row__main\"><div class=\"change-file\">${this.escapeHtml(\r\n                            file\r\n                        )}</div><div class=\"change-meta\">Untracked</div></div>\r\n                    </div>\r\n                `;\r\n                totalChanges++;\r\n            });\r\n        }\r\n\r\n        // Update count badge\r\n        const changesCount = document.getElementById(\"changes-count\");\r\n        if (changesCount) {\r\n            const countBadge = changesCount.querySelector(\".count-badge\");\r\n            if (countBadge) {\r\n                countBadge.textContent = totalChanges;\r\n                countBadge.className =\r\n                    totalChanges > 0\r\n                        ? \"count-badge has-changes\"\r\n                        : \"count-badge\";\r\n            }\r\n        }\r\n\r\n        if (changesHTML) {\r\n            gitManagerSkeleton.hideSkeleton(changesList, \"list\");\r\n            changesList.innerHTML = `<div class=\"change-rows\">${changesHTML}</div>`;\r\n        } else {\r\n            gitManagerSkeleton.hideSkeleton(changesList, \"list\");\r\n            changesList.innerHTML =\r\n                \"<p class='value'>No uncommitted changes</p>\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update recommendations\r\n     */\r\n    updateRecommendations(repo) {\r\n        const recommendationsSection = document.getElementById(\r\n            \"repo-recommendations\"\r\n        );\r\n        const recommendationsList = document.getElementById(\r\n            \"recommendations-list\"\r\n        );\r\n\r\n        if (!recommendationsSection || !recommendationsList) return;\r\n\r\n        const recommendations = [];\r\n\r\n        // Check for uncommitted changes\r\n        if (repo.hasChanges) {\r\n            recommendations.push({\r\n                type: \"warning\",\r\n                title: WPGitManagerGlobal.translations.uncommittedChanges,\r\n                description:\r\n                    WPGitManagerGlobal.translations.youHaveUncommittedChanges,\r\n                icon: \"⚠️\",\r\n            });\r\n        }\r\n\r\n        // Check if behind remote\r\n        if (repo.behind && repo.behind > 0) {\r\n            recommendations.push({\r\n                type: \"warning\",\r\n                title: WPGitManagerGlobal.translations.behindRemote,\r\n                description:\r\n                    WPGitManagerGlobal.translations.yourLocalBranchIsBehind.replace(\r\n                        \"{count}\",\r\n                        repo.behind\r\n                    ),\r\n                icon: \"⬇️\",\r\n            });\r\n        }\r\n\r\n        // Check if ahead of remote\r\n        if (repo.ahead && repo.ahead > 0) {\r\n            recommendations.push({\r\n                type: \"info\",\r\n                title: WPGitManagerGlobal.translations.aheadOfRemote,\r\n                description:\r\n                    WPGitManagerGlobal.translations.yourLocalBranchIsAhead.replace(\r\n                        \"{count}\",\r\n                        repo.ahead\r\n                    ),\r\n                icon: \"⬆️\",\r\n            });\r\n        }\r\n\r\n        // Check if clean and up to date\r\n        if (\r\n            !repo.hasChanges &&\r\n            (!repo.ahead || repo.ahead === 0) &&\r\n            (!repo.behind || repo.behind === 0)\r\n        ) {\r\n            recommendations.push({\r\n                type: \"success\",\r\n                title: WPGitManagerGlobal.translations.repositoryStatus,\r\n                description:\r\n                    WPGitManagerGlobal.translations.yourRepositoryIsClean,\r\n                icon: \"✅\",\r\n            });\r\n        }\r\n\r\n        // Show/hide recommendations section\r\n        if (recommendations.length > 0) {\r\n            recommendationsSection.style.display = \"block\";\r\n\r\n            const recommendationsHTML = recommendations\r\n                .map((rec, idx) => {\r\n                    const action = rec.type === \"warning\" ? \"\" : \"\";\r\n                    return `\r\n                        <div class=\"recommendation-item ${rec.type}\" data-rec-index=\"${idx}\">\r\n                            <div class=\"recommendation-icon\">${rec.icon}</div>\r\n                            <div class=\"recommendation-content\">\r\n                                <div class=\"recommendation-title\">${rec.title}</div>\r\n                                <div class=\"recommendation-description\">${rec.description}</div>\r\n                            </div>\r\n                            <div class=\"recommendation-actions\">${action}</div>\r\n                        </div>\r\n                    `;\r\n                })\r\n                .join(\"\");\r\n\r\n            recommendationsList.innerHTML = recommendationsHTML;\r\n\r\n            // Delegate clicks for recommendation actions\r\n            recommendationsList\r\n                .querySelectorAll(\"[data-rec-action]\")\r\n                ?.forEach((btn) => {\r\n                    btn.addEventListener(\"click\", (e) => {\r\n                        const action = btn.getAttribute(\"data-rec-action\");\r\n                        const item = btn.closest(\".recommendation-item\");\r\n                        const idx = item?.getAttribute(\"data-rec-index\");\r\n                        if (action === \"investigate\") {\r\n                            // Trigger a troubleshooting run for the active repo\r\n                            if (\r\n                                typeof gitManager !== \"undefined\" &&\r\n                                typeof gitManager.runTroubleshoot === \"function\"\r\n                            ) {\r\n                                gitManager.runTroubleshoot();\r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n        } else {\r\n            recommendationsSection.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show loading state\r\n     */\r\n    showLoadingState() {\r\n        // Show skeleton loading for repository details\r\n        gitManagerSkeleton.showRepoDetailsSkeleton();\r\n    }\r\n\r\n    /**\r\n     * Hide loading state\r\n     */\r\n    hideLoadingState() {\r\n        // Hide skeleton loading for repository details\r\n        gitManagerSkeleton.hideRepoDetailsSkeleton();\r\n    }\r\n\r\n    /**\r\n     * Load commits\r\n     */\r\n    async loadCommits(repoId, limit = 10) {\r\n        // Show skeleton loading for commits with timeout indicator\r\n        gitManagerSkeleton.showCommitsSkeleton();\r\n        this.showCommitsLoadingFeedback();\r\n\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.log);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            formData.append(\"id\", repoId);\r\n            formData.append(\"limit\", limit); // Add limit parameter for better performance\r\n\r\n            // Create AbortController for timeout handling\r\n            const controller = new AbortController();\r\n            const timeoutId = setTimeout(() => {\r\n                controller.abort();\r\n            }, 25000); // 25 second timeout\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n                signal: controller.signal,\r\n            });\r\n\r\n            clearTimeout(timeoutId);\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n\r\n                if (result.success) {\r\n                    gitManagerSkeleton.hideCommitsSkeleton();\r\n                    this.hideCommitsLoadingFeedback();\r\n                    this.populateCommits(result.data);\r\n                } else {\r\n                    gitManagerSkeleton.hideCommitsSkeleton();\r\n                    this.hideCommitsLoadingFeedback();\r\n                    this.showCommitsError(result.data || \"Unknown error\");\r\n                }\r\n            } else {\r\n                gitManagerSkeleton.hideCommitsSkeleton();\r\n                this.hideCommitsLoadingFeedback();\r\n                this.showCommitsError(\r\n                    `HTTP ${response.status}: ${response.statusText}`\r\n                );\r\n            }\r\n        } catch (error) {\r\n            gitManagerSkeleton.hideCommitsSkeleton();\r\n            this.hideCommitsLoadingFeedback();\r\n\r\n            if (error.name === \"AbortError\") {\r\n                this.showCommitsError(\r\n                    \"Request timed out. The repository might be slow or have many commits. Try reducing the number of commits to load.\"\r\n                );\r\n            } else {\r\n                this.showCommitsError(error.message);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show loading feedback for commits\r\n     */\r\n    showCommitsLoadingFeedback() {\r\n        const commitsList = document.querySelector(\".commits-list\");\r\n        if (commitsList) {\r\n            const loadingDiv = document.createElement(\"div\");\r\n            loadingDiv.className = \"commits-loading-feedback\";\r\n            loadingDiv.innerHTML = `\r\n                <div class=\"loading-indicator\">\r\n                    <div class=\"spinner\"></div>\r\n                    <p>Loading commits... This may take a moment for large repositories.</p>\r\n                </div>\r\n            `;\r\n            commitsList.appendChild(loadingDiv);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide loading feedback for commits\r\n     */\r\n    hideCommitsLoadingFeedback() {\r\n        const loadingFeedback = document.querySelector(\r\n            \".commits-loading-feedback\"\r\n        );\r\n        if (loadingFeedback) {\r\n            loadingFeedback.remove();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show error message for commits\r\n     */\r\n    showCommitsError(message) {\r\n        const commitsList = document.querySelector(\".commits-list\");\r\n        if (commitsList) {\r\n            commitsList.innerHTML = `\r\n                <div class=\"commits-error\">\r\n                    <p><strong>Error loading commits:</strong> ${message}</p>\r\n                    <button class=\"retry-button\" onclick=\"gitManager.retryLoadCommits()\">Retry</button>\r\n                </div>\r\n            `;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retry loading commits\r\n     */\r\n    retryLoadCommits() {\r\n        if (this.currentRepo) {\r\n            this.loadCommits(this.currentRepo.id, 5); // Try with fewer commits first\r\n        }\r\n    }\r\n\r\n    populateCommits(commits) {\r\n        const commitsList = document.querySelector(\".commits-list\");\r\n        if (!commitsList) return;\r\n\r\n        if (!commits || commits.length === 0) {\r\n            commitsList.innerHTML = \"<p>No commits found for this branch.</p>\";\r\n            return;\r\n        }\r\n\r\n        const commitsHTML = commits\r\n            .map((commit, idx) => {\r\n                const isLatest = idx === 0;\r\n                return `\r\n                <div class=\"git-commit-item ${isLatest ? \"latest\" : \"\"}\">\r\n                    <div class=\"git-avatar-container\">\r\n                        <img class=\"commit-avatar\" src=\"${this.escapeHtml(\r\n                            commit.gravatar_url || \"\"\r\n                        )}\" alt=\"${this.escapeHtml(commit.author_name)}\">\r\n                    </div>\r\n                    <div class=\"git-commit-content\">\r\n                        <div class=\"git-commit-top\">\r\n                            <a class=\"git-commit-hash\" href=\"#\">${this.escapeHtml(\r\n                                commit.hash\r\n                            )}</a>\r\n                            <span class=\"git-commit-date\">${this.escapeHtml(\r\n                                commit.date\r\n                            )}</span>\r\n                        </div>\r\n                        <div class=\"git-commit-message\">${this.escapeHtml(\r\n                            commit.message\r\n                        )}</div>\r\n                        <div class=\"git-commit-meta\">\r\n                            <span class=\"git-commit-author\">${this.escapeHtml(\r\n                                commit.author_name\r\n                            )}</span>\r\n                            <a class=\"git-commit-view\" href=\"#\" data-hash=\"${this.escapeHtml(\r\n                                commit.hash\r\n                            )}\">View</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            })\r\n            .join(\"\");\r\n\r\n        commitsList.innerHTML = commitsHTML;\r\n    }\r\n\r\n    /**\r\n     * Load branches\r\n     */\r\n    async loadBranches(repoId) {\r\n        const branchesList = document.querySelector(\".branches-list\");\r\n        if (!branchesList) return;\r\n\r\n        // Show skeleton loading for branches\r\n        gitManagerSkeleton.showBranchesSkeleton();\r\n\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.get_branches);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            formData.append(\"id\", repoId);\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (response.ok) {\r\n                const result = await response.json();\r\n                if (result.success) {\r\n                    gitManagerSkeleton.hideBranchesSkeleton();\r\n                    this.populateBranches(result.data);\r\n                } else {\r\n                    gitManagerSkeleton.hideBranchesSkeleton();\r\n                    branchesList.innerHTML = `<p>Error loading branches: ${result.data}</p>`;\r\n                }\r\n            } else {\r\n                gitManagerSkeleton.hideBranchesSkeleton();\r\n                branchesList.innerHTML = `<p>Error loading branches.</p>`;\r\n            }\r\n        } catch (error) {\r\n            gitManagerSkeleton.hideBranchesSkeleton();\r\n            branchesList.innerHTML = `<p>Error loading branches.</p>`;\r\n        }\r\n    }\r\n\r\n    populateBranches(data) {\r\n        const branchesList = document.querySelector(\".branches-list\");\r\n        const searchInput = document.getElementById(\"branch-search-input\");\r\n        if (!branchesList || !searchInput) return;\r\n\r\n        const { branches, activeBranch } = data;\r\n\r\n        if (branches.length === 0) {\r\n            branchesList.innerHTML = \"<p>No branches found.</p>\";\r\n            return;\r\n        }\r\n\r\n        const render = (filter = \"\") => {\r\n            const filteredBranches = branches.filter((branch) =>\r\n                branch.toLowerCase().includes(filter.toLowerCase())\r\n            );\r\n\r\n            if (filteredBranches.length === 0) {\r\n                branchesList.innerHTML = \"<p>No matching branches found.</p>\";\r\n                return;\r\n            }\r\n\r\n            const branchesHTML = filteredBranches\r\n                .map((branch) => {\r\n                    const isCurrent = branch.replace(\"* \", \"\") === activeBranch;\r\n                    const branchName = branch.replace(\"* \", \"\");\r\n                    const isMain =\r\n                        branchName === \"main\" || branchName === \"master\";\r\n                    return `\r\n                <div class=\"branch-item ${isCurrent ? \"active\" : \"\"} ${\r\n                        isMain ? \"branch-item-main\" : \"\"\r\n                    }\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"branch-icon\"><line x1=\"6\" x2=\"6\" y1=\"3\" y2=\"15\"/><circle cx=\"18\" cy=\"6\" r=\"3\"/><circle cx=\"6\" cy=\"18\" r=\"3\"/><path d=\"M18 9a9 9 0 0 1-9 9\"/></svg>\r\n                    <span class=\"branch-name\">${this.escapeHtml(\r\n                        branchName\r\n                    )}</span>\r\n                    <div class=\"branch-actions\">\r\n                        ${\r\n                            isCurrent\r\n                                ? '<span class=\"current-branch-badge\">Current</span>'\r\n                                : `<button class=\"git-action-btn checkout-btn\" data-branch=\"${this.escapeHtml(\r\n                                      branchName\r\n                                  )}\">Checkout</button>`\r\n                        }\r\n                        ${\r\n                            !isCurrent\r\n                                ? `<button class=\"git-action-btn delete-branch-btn\" data-branch=\"${this.escapeHtml(\r\n                                      branchName\r\n                                  )}\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"action-icon-svg\"><polyline points=\"3 6 5 6 21 6\"></polyline><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"></path><line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\"></line><line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\"></line></svg></button>`\r\n                                : \"\"\r\n                        }\r\n                    </div>\r\n                </div>\r\n            `;\r\n                })\r\n                .join(\"\");\r\n            branchesList.innerHTML = branchesHTML;\r\n\r\n            branchesList.querySelectorAll(\".checkout-btn\").forEach((button) => {\r\n                button.addEventListener(\"click\", (e) => {\r\n                    const branchName = e.target.dataset.branch;\r\n                    this.checkoutBranch(this.currentRepo, branchName);\r\n                });\r\n            });\r\n\r\n            branchesList\r\n                .querySelectorAll(\".delete-branch-btn\")\r\n                .forEach((button) => {\r\n                    button.addEventListener(\"click\", (e) => {\r\n                        const branchName =\r\n                            e.target.closest(\"[data-branch]\").dataset.branch;\r\n                        this.deleteBranch(this.currentRepo, branchName);\r\n                    });\r\n                });\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Checkout branch\r\n     */\r\n    async checkoutBranch(repoId, branchName) {\r\n        this.showProgress(`Checking out ${branchName}...`);\r\n        try {\r\n            const result = await this.apiCall(\"git_manager_repo_checkout\", {\r\n                id: repoId,\r\n                branch: branchName,\r\n            });\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    `Successfully checked out to ${branchName}`,\r\n                    \"success\"\r\n                );\r\n                this.refreshRepoDetails(repoId); // Refresh details to show new branch\r\n            } else {\r\n                throw new Error(\r\n                    result.data || `Failed to checkout ${branchName}`\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                `Error checking out branch: ${error.message}`,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.hideProgress();\r\n        }\r\n    }\r\n\r\n    async deleteBranch(repoId, branchName) {\r\n        if (\r\n            !confirm(\r\n                `Are you sure you want to delete the branch \"${branchName}\"? This action cannot be undone.`\r\n            )\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.showProgress(`Deleting branch ${branchName}...`);\r\n        try {\r\n            const result = await this.apiCall(\r\n                \"git_manager_repo_delete_branch\",\r\n                {\r\n                    id: repoId,\r\n                    branch: branchName,\r\n                }\r\n            );\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    `Branch \"${branchName}\" deleted successfully`,\r\n                    \"success\"\r\n                );\r\n                this.loadBranches(repoId); // Refresh the branch list\r\n            } else {\r\n                throw new Error(result.data || \"Failed to delete branch\");\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                `Error deleting branch: ${error.message}`,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.hideProgress();\r\n        }\r\n    }\r\n\r\n    handleRepoAction(action, repoId) {\r\n        switch (action) {\r\n            case \"pull\":\r\n                this.pullRepository(repoId);\r\n                break;\r\n            case \"push\":\r\n                this.pushRepository(repoId);\r\n                break;\r\n            case \"fetch\":\r\n                this.fetchRepository(repoId);\r\n                break;\r\n            case \"status\":\r\n                this.checkStatus(repoId);\r\n                break;\r\n            case \"troubleshoot\":\r\n                this.showRepositoryTroubleshooting();\r\n                break;\r\n            case \"fix-permission\":\r\n                this.fixPermission();\r\n                break;\r\n            case \"delete\":\r\n                this.deleteRepository(repoId);\r\n                break;\r\n            default:\r\n        }\r\n    }\r\n\r\n    async pullRepository(repoId) {\r\n        if (!repoId) return;\r\n\r\n        this.showNotification(\r\n            WPGitManagerGlobal.translations.pullingChanges,\r\n            \"info\"\r\n        );\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.repo_git);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            formData.append(\"id\", repoId);\r\n            formData.append(\"op\", \"pull\");\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    \"Repository updated successfully\",\r\n                    \"success\"\r\n                );\r\n                this.loadRepositories();\r\n                this.checkStatus(repoId);\r\n                if (this.currentRepo === repoId) {\r\n                    this.loadRepositoryDetails(repoId);\r\n                }\r\n            } else {\r\n                throw new Error(result.data || \"Failed to pull changes\");\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Failed to pull changes: \" + error.message,\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    async pushRepository(repoId) {\r\n        if (!repoId) return;\r\n\r\n        this.showNotification(\r\n            WPGitManagerGlobal.translations.pushingChanges,\r\n            \"info\"\r\n        );\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.repo_push);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            formData.append(\"id\", repoId);\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    WPGitManagerGlobal.translations.changesPushedSuccessfully,\r\n                    \"success\"\r\n                );\r\n                this.loadRepositories();\r\n                this.checkStatus(repoId);\r\n                if (this.currentRepo === repoId) {\r\n                    this.loadRepositoryDetails(repoId);\r\n                }\r\n            } else {\r\n                throw new Error(result.data || \"Failed to push changes\");\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Failed to push changes: \" + error.message,\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    async fetchRepository(repoId) {\r\n        if (!repoId) return;\r\n\r\n        this.showNotification(\r\n            WPGitManagerGlobal.translations.fetchingUpdates,\r\n            \"info\"\r\n        );\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.repo_git);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            formData.append(\"id\", repoId);\r\n            formData.append(\"op\", \"fetch\");\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    \"Repository fetched successfully\",\r\n                    \"success\"\r\n                );\r\n                this.loadRepositories();\r\n                this.checkStatus(repoId);\r\n                if (this.currentRepo === repoId) {\r\n                    this.loadRepositoryDetails(repoId);\r\n                }\r\n            } else {\r\n                throw new Error(result.data || \"Failed to fetch updates\");\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Failed to fetch updates: \" + error.message,\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    async checkStatus(repoId) {\r\n        if (!repoId) return;\r\n\r\n        this.showNotification(\r\n            WPGitManagerGlobal.translations.checkingStatus,\r\n            \"info\"\r\n        );\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.repo_status);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            formData.append(\"id\", repoId);\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const result = await response.json();\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    WPGitManagerGlobal.translations.statusCheckedSuccessfully,\r\n                    \"success\"\r\n                );\r\n                this.loadRepositories();\r\n                if (this.currentRepo === repoId) {\r\n                    this.loadRepositoryDetails(repoId);\r\n                }\r\n            } else {\r\n                throw new Error(result.data || \"Failed to check status\");\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Failed to check status: \" + error.message,\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    async deleteRepository(repoId) {\r\n        if (!repoId) return;\r\n\r\n        if (\r\n            !confirm(\r\n                \"Are you sure you want to delete this repository? This action cannot be undone.\"\r\n            )\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.showNotification(\r\n            WPGitManagerGlobal.translations.deletingRepository,\r\n            \"info\"\r\n        );\r\n        try {\r\n            const result = await this.apiCall(\"git_manager_repo_delete\", {\r\n                id: repoId,\r\n                delete_files: false, // Always false, never delete files from disk.\r\n            });\r\n\r\n            if (result.success) {\r\n                this.showNotification(\r\n                    \"Repository deleted successfully\",\r\n                    \"success\"\r\n                );\r\n                this.refreshRepositoryList();\r\n                const repoDetail = document.getElementById(\"repo-detail\");\r\n                if (repoDetail) {\r\n                    repoDetail.innerHTML =\r\n                        this.getWelcomeScreenHTML() ||\r\n                        \"<p>Repository deleted. Select another repository.</p>\";\r\n                }\r\n            } else {\r\n                this.showNotification(\r\n                    result.data || \"Failed to delete repository\",\r\n                    \"error\"\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Failed to delete repository: \" + error.message,\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    async reCloneRepository(repoId) {\r\n        if (!repoId) return;\r\n\r\n        if (\r\n            confirm(\r\n                \"Are you sure you want to re-clone this repository? This will download the repository again from the remote source.\"\r\n            )\r\n        ) {\r\n            this.showNotification(\r\n                getTranslation(\r\n                    \"reCloningRepository\",\r\n                    \"Re-cloning repository...\"\r\n                ),\r\n                \"info\"\r\n            );\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append(\"action\", gitManagerAjax.actions.repo_reclone);\r\n                formData.append(\"id\", repoId);\r\n                formData.append(\"nonce\", gitManagerAjax.nonce);\r\n\r\n                const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                    method: \"POST\",\r\n                    body: formData,\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error(`HTTP error! status: ${response.status}`);\r\n                }\r\n\r\n                const result = await response.json();\r\n\r\n                if (result.success) {\r\n                    this.showNotification(\r\n                        \"Repository re-cloned successfully\",\r\n                        \"success\"\r\n                    );\r\n                    this.loadRepositories();\r\n                } else {\r\n                    throw new Error(\r\n                        result.data || \"Failed to re-clone repository\"\r\n                    );\r\n                }\r\n            } catch (error) {\r\n                this.showNotification(\r\n                    \"Failed to re-clone repository: \" + error.message,\r\n                    \"error\"\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Utility Functions\r\n     */\r\n    showNotification(message, type = \"info\", options = {}) {\r\n        const { duration = 5000, showProgress = true } = options;\r\n\r\n        let container = document.getElementById(\"git-notifications\");\r\n        if (!container) {\r\n            container = document.createElement(\"div\");\r\n            container.id = \"git-notifications\";\r\n            document.body.appendChild(container);\r\n        }\r\n\r\n        const icons = {\r\n            success:\r\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"notification-icon\"><path d=\"M18 6 7 17l-5-5\"/><path d=\"m22 10-7.5 7.5L13 16\"/></svg>',\r\n            error: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"notification-icon\"><path d=\"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z\"></path><path d=\"m14.5 9.5-5 5\"></path><path d=\"m9.5 9.5 5 5\"></path></svg>',\r\n            warning:\r\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"notification-icon\"><path d=\"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z\"/><path d=\"M12 8v4\"/><path d=\"M12 16h.01\"/></svg>',\r\n            info: '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"currentColor\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"notification-icon\"><path d=\"M3.85 8.62a4 4 0 0 1 4.78-4.77 4 4 0 0 1 6.74 0 4 4 0 0 1 4.78 4.78 4 4 0 0 1 0 6.74 4 4 0 0 1-4.77 4.78 4 4 0 0 1-6.75 0 4 4 0 0 1-4.78-4.77 4 4 0 0 1 0-6.76Z\"/><line x1=\"12\" x2=\"12\" y1=\"16\" y2=\"12\"/><line x1=\"12\" x2=\"12.01\" y1=\"8\" y2=\"8\"/></svg>',\r\n        };\r\n\r\n        const role =\r\n            type === \"error\" || type === \"warning\" ? \"alert\" : \"status\";\r\n\r\n        const notification = document.createElement(\"div\");\r\n        notification.className = `git-notification git-notification-${type}`;\r\n        notification.setAttribute(\"role\", role);\r\n        notification.setAttribute(\r\n            \"aria-live\",\r\n            type === \"error\" ? \"assertive\" : \"polite\"\r\n        );\r\n        notification.innerHTML = `\r\n            <div class=\"notification-content\">\r\n                ${icons[type] || icons.info}\r\n                <div class=\"notification-message\">${this.escapeHtml(\r\n                    message\r\n                )}</div>\r\n                <button class=\"notification-close\" aria-label=\"Close notification\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/></svg></button>\r\n            </div>\r\n            <div class=\"notification-progress\" style=\"${\r\n                !showProgress || duration === 0 ? \"display:none;\" : \"\"\r\n            }\"><div class=\"notification-progress-fill\"></div></div>\r\n        `;\r\n\r\n        container.appendChild(notification);\r\n\r\n        // Progress handling\r\n        const progress = notification.querySelector(\r\n            \".notification-progress-fill\"\r\n        );\r\n        let startTime = Date.now();\r\n        let remaining = duration;\r\n        let timerId = null;\r\n        let rafId = null;\r\n\r\n        const update = () => {\r\n            if (duration > 0 && progress) {\r\n                const elapsed = Date.now() - startTime;\r\n                const ratio = Math.max(0, 1 - elapsed / duration);\r\n                progress.style.width = `${Math.max(0, ratio * 100)}%`;\r\n                if (elapsed >= duration) {\r\n                    close();\r\n                    return;\r\n                }\r\n            }\r\n            rafId = requestAnimationFrame(update);\r\n        };\r\n\r\n        const start = () => {\r\n            if (duration > 0) {\r\n                startTime = Date.now();\r\n                rafId = requestAnimationFrame(update);\r\n                timerId = window.setTimeout(close, remaining);\r\n            }\r\n        };\r\n\r\n        const pause = () => {\r\n            if (rafId) cancelAnimationFrame(rafId);\r\n            if (timerId) clearTimeout(timerId);\r\n            if (duration > 0) remaining -= Date.now() - startTime;\r\n        };\r\n\r\n        const close = () => {\r\n            pause();\r\n            notification.classList.add(\"closing\");\r\n            setTimeout(() => notification.remove(), 200);\r\n        };\r\n\r\n        notification.addEventListener(\"mouseenter\", pause);\r\n        notification.addEventListener(\"mouseleave\", start);\r\n        notification\r\n            .querySelector(\".notification-close\")\r\n            .addEventListener(\"click\", close);\r\n\r\n        start();\r\n\r\n        this.notifications.push(notification);\r\n        return notification;\r\n    }\r\n\r\n    setButtonLoadingState(button, isLoading) {\r\n        if (!button) return;\r\n\r\n        if (isLoading) {\r\n            button.disabled = true;\r\n            const originalContent = button.innerHTML;\r\n            button.setAttribute(\"data-original-content\", originalContent);\r\n            button.innerHTML = `\r\n                <span class=\"button-loading-spinner\"></span>\r\n            `;\r\n            button.style.width = button.offsetWidth + \"px\";\r\n            button.style.height = button.offsetHeight + \"px\";\r\n        } else {\r\n            button.disabled = false;\r\n            const originalContent = button.getAttribute(\r\n                \"data-original-content\"\r\n            );\r\n            if (originalContent) {\r\n                button.innerHTML = originalContent;\r\n                button.removeAttribute(\"data-original-content\");\r\n            }\r\n            button.style.width = \"\";\r\n            button.style.height = \"\";\r\n        }\r\n    }\r\n\r\n    escapeHtml(text) {\r\n        if (typeof text !== \"string\") {\r\n            return \"\";\r\n        }\r\n        const div = document.createElement(\"div\");\r\n        div.textContent = text;\r\n        return div.innerHTML;\r\n    }\r\n\r\n    debounce(func, wait) {\r\n        let timeout;\r\n        return function executedFunction(...args) {\r\n            const later = () => {\r\n                clearTimeout(timeout);\r\n                func(...args);\r\n            };\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Tab Management\r\n     */\r\n    switchTab(tabName) {\r\n        // Remove active class from all tabs\r\n        document.querySelectorAll(\".git-repo-tab\").forEach((tab) => {\r\n            tab.classList.remove(\"active\");\r\n        });\r\n\r\n        // Add active class to selected tab\r\n        const selectedTab = document.querySelector(`[data-tab=\"${tabName}\"]`);\r\n        if (selectedTab) {\r\n            selectedTab.classList.add(\"active\");\r\n        }\r\n\r\n        // Show corresponding content\r\n        this.showTabContent(tabName);\r\n\r\n        // Load data for the selected tab if it hasn't been loaded yet\r\n        if (tabName === \"commits\" && this.currentRepo) {\r\n            // Force reload commits when user manually switches to commits tab\r\n            this.forceReloadCommits(this.currentRepo);\r\n        }\r\n\r\n        if (tabName === \"branches\" && this.currentRepo) {\r\n            // Force reload branches when user manually switches to branches tab\r\n            this.forceReloadBranches(this.currentRepo);\r\n        }\r\n\r\n        // Special handling for troubleshooting tab\r\n        if (tabName === \"troubleshooting\" && this.currentRepo) {\r\n            this.initializeTroubleshootingTab();\r\n        }\r\n\r\n        // Special handling for settings tab\r\n        if (tabName === \"settings\" && this.currentRepo) {\r\n            this.initializeSettingsTab();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Initialize troubleshooting tab when switched to\r\n     */\r\n    initializeTroubleshootingTab() {\r\n        const outputContainer = document.getElementById(\"repo-manager-output\");\r\n        if (!outputContainer) return;\r\n\r\n        // Check if troubleshooting is already initialized\r\n        if (\r\n            window.gitTroubleshooter &&\r\n            window.gitTroubleshooter.repoId === this.currentRepo\r\n        ) {\r\n            return; // Already initialized for this repository\r\n        }\r\n\r\n        // Clear any existing content\r\n        outputContainer.innerHTML = \"\";\r\n\r\n        // Initialize enhanced troubleshooting for the current repository\r\n        if (typeof GitTroubleshooter !== \"undefined\") {\r\n            window.gitTroubleshooter = new GitTroubleshooter();\r\n            window.gitTroubleshooter.init(this.currentRepo);\r\n        } else {\r\n            // Show skeleton loading for troubleshooting\r\n            outputContainer.innerHTML = `\r\n                <div class=\"skeleton-tab-content\">\r\n                    <div class=\"skeleton-tab-header\">\r\n                        <div class=\"skeleton skeleton-tab-title\"></div>\r\n                        <div class=\"skeleton-tab-actions\">\r\n                            <div class=\"skeleton skeleton-tab-action\"></div>\r\n                            <div class=\"skeleton skeleton-tab-action\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"skeleton-list\">\r\n                        <div class=\"skeleton-list-item\">\r\n                            <div class=\"skeleton skeleton-list-icon\"></div>\r\n                            <div class=\"skeleton-list-content\">\r\n                                <div class=\"skeleton skeleton-list-title\"></div>\r\n                                <div class=\"skeleton skeleton-list-subtitle\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"skeleton-list-item\">\r\n                            <div class=\"skeleton skeleton-list-icon\"></div>\r\n                            <div class=\"skeleton-list-content\">\r\n                                <div class=\"skeleton skeleton-list-title\"></div>\r\n                                <div class=\"skeleton skeleton-list-subtitle\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"skeleton-list-item\">\r\n                            <div class=\"skeleton skeleton-list-icon\"></div>\r\n                            <div class=\"skeleton-list-content\">\r\n                                <div class=\"skeleton skeleton-list-title\"></div>\r\n                                <div class=\"skeleton skeleton-list-subtitle\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `;\r\n        }\r\n    }\r\n\r\n    showTabContent(tabName) {\r\n        // Hide all tab contents\r\n        document.querySelectorAll(\".tab-content\").forEach((content) => {\r\n            content.style.display = \"none\";\r\n        });\r\n\r\n        // Show selected tab content\r\n        const selectedContent = document.querySelector(\r\n            `[data-tab-content=\"${tabName}\"]`\r\n        );\r\n        if (selectedContent) {\r\n            selectedContent.style.display = \"block\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * New Directory Selector\r\n     */\r\n    browsePath(targetInputSelector) {\r\n        this.directorySelectorTarget = targetInputSelector;\r\n        this.showNewDirectorySelector();\r\n    }\r\n\r\n    showNewDirectorySelector() {\r\n        const modalHTML = `\r\n            <div class=\"git-modal-content new-directory-selector-modal\">\r\n                <div class=\"git-modal-header\">\r\n                    <h3>\r\n                        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M20 10a1 1 0 0 0 1-1V6a1 1 0 0 0-1-1h-2.5a1 1 0 0 1-.8-.4l-.9-1.2A1 1 0 0 0 15 3h-2a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z\"></path><path d=\"M20 21a1 1 0 0 0 1-1v-3a1 1 0 0 0-1-1h-2.9a1 1 0 0 1-.88-.55l-.42-.85a1 1 0 0 0-.92-.6H13a1 1 0 0 0-1 1v5a1 1 0 0 0 1 1Z\"></path><path d=\"M3 5a2 2 0 0 0 2 2h3\"></path><path d=\"M3 3v13a2 2 0 0 0 2 2h3\"></path></svg>\r\n                        Directory Browser for Repository Manager\r\n                    </h3>\r\n                    <button class=\"git-modal-close\" aria-label=\"Close modal\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/></svg></button>\r\n                </div>\r\n\r\n                <div class=\"git-modal-body\">\r\n                    <div class=\"new-directory-browser\">\r\n                        <!-- Enhanced Search Bar -->\r\n                        <div class=\"new-search-container\">\r\n                            <div class=\"new-search-wrapper\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"new-search-icon\">\r\n                                    <circle cx=\"11\" cy=\"11\" r=\"8\"></circle>\r\n                                    <path d=\"m21 21-4.35-4.35\"></path>\r\n                                </svg>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class=\"new-search-input-enhanced\"\r\n                                    placeholder=\"Search folders by name...\"\r\n                                    id=\"new-search-enhanced\"\r\n                                    autocomplete=\"off\"\r\n                                >\r\n                                <button class=\"new-search-clear\" id=\"new-search-clear\" style=\"display: none;\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                                        <path d=\"M18 6 6 18\"></path>\r\n                                        <path d=\"m6 6 12 12\"></path>\r\n                                    </svg>\r\n                                </button>\r\n                            </div>\r\n                            <div class=\"new-search-status\" id=\"new-search-status\"></div>\r\n                        </div>\r\n\r\n                        <!-- Breadcrumb Navigation -->\r\n                        <div class=\"new-breadcrumb\" id=\"new-breadcrumb\">\r\n                            <button class=\"new-breadcrumb-item active\" data-path=\"/\">Root</button>\r\n                        </div>\r\n\r\n                        <!-- Toolbar -->\r\n                        <div class=\"new-toolbar\">\r\n                            <div class=\"new-actions\">\r\n                                <button class=\"new-back-btn\" id=\"new-back-btn\" title=\"Go Back\" style=\"display: none;\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\r\n                                        <path d=\"m15 18-6-6 6-6\"/>\r\n                                    </svg>\r\n                                    Back\r\n                                </button>\r\n                                <button class=\"new-action-btn\" id=\"new-create-folder\" title=\"Create Folder\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M12 10v6\"/><path d=\"M9 13h6\"/><path d=\"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z\"/></svg>\r\n                                </button>\r\n                                <button class=\"new-action-btn\" id=\"new-delete-folder\" title=\"Delete Folder\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6\"/><path d=\"M3 6h18\"/><path d=\"M8 6V4c0-1 1-2 2-2h4a2 2 0 0 1 2 2v2\"/></svg>\r\n                                </button>\r\n                                <button class=\"new-action-btn\" id=\"new-rename\" title=\"Rename\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z\"/><path d=\"m15 5 4 4\"/></svg>\r\n                                </button>\r\n                                <button class=\"new-action-btn\" id=\"new-refresh\" title=\"Refresh\">\r\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\"/><path d=\"M21 3v5h-5\"/><path d=\"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\"/><path d=\"M8 16H3v5\"/></svg>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <!-- Directory List -->\r\n                        <div class=\"new-directory-list\" id=\"new-directory-list\">\r\n                            <!-- Loading skeleton will be shown here -->\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"git-modal-footer\">\r\n                    <div class=\"new-selected-path\" id=\"new-selected-path\" style=\"display: none;\">\r\n                        <span class=\"new-selected-label\">Selected:</span>\r\n                        <span class=\"new-selected-value\" id=\"new-selected-value\"></span>\r\n                    </div>\r\n                    <div class=\"new-footer-actions\">\r\n                        <button type=\"button\" class=\"git-action-btn git-secondary-btn\" id=\"new-cancel-btn\">\r\n                            Cancel\r\n                        </button>\r\n                        <button type=\"button\" class=\"git-action-btn\" id=\"new-select-btn\" disabled>\r\n                            Select Directory\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        const modal = this.showModal(\"new-directory-selector\", modalHTML);\r\n\r\n        if (!modal) {\r\n            return;\r\n        }\r\n\r\n        // Small delay to ensure modal is fully rendered\r\n        setTimeout(() => {\r\n            this.loadNewDirectories(\"\", modal); // Load root directory\r\n            this.setupNewDirectoryEvents(modal);\r\n        }, 50);\r\n    }\r\n\r\n    async loadNewDirectories(path, modal) {\r\n        if (!modal) {\r\n            return;\r\n        }\r\n        const directoryList = modal.querySelector(\"#new-directory-list\");\r\n        const breadcrumb = modal.querySelector(\"#new-breadcrumb\");\r\n\r\n        if (!directoryList || !breadcrumb) return;\r\n\r\n        // Show loading skeleton\r\n        this.showNewDirectorySkeleton(modal);\r\n\r\n        try {\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.repo_dirs);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            // The backend expects an empty string for the root directory\r\n            formData.append(\"relative\", path);\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                this.hideNewDirectorySkeleton(modal);\r\n                this.renderNewDirectories(data.data, path, modal);\r\n                this.updateNewBreadcrumb(path, modal);\r\n            } else {\r\n                throw new Error(data.data || \"Failed to load directories\");\r\n            }\r\n        } catch (error) {\r\n            this.hideNewDirectorySkeleton(modal);\r\n            if (directoryList) {\r\n                directoryList.innerHTML = `\r\n                    <div class=\"new-error\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"24\" height=\"24\">\r\n                            <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\r\n                        </svg>\r\n                        <span>Failed to load directories: ${error.message}</span>\r\n                    </div>\r\n                `;\r\n            }\r\n        }\r\n    }\r\n\r\n    showNewDirectorySkeleton(modal) {\r\n        if (!modal) return;\r\n        const directoryList = modal.querySelector(\"#new-directory-list\");\r\n        if (!directoryList) return;\r\n\r\n        directoryList.innerHTML = `\r\n            <div class=\"new-skeleton\">\r\n                ${Array(5)\r\n                    .fill()\r\n                    .map(\r\n                        () => `\r\n                    <div class=\"new-skeleton-item\">\r\n                        <div class=\"new-skeleton-icon\"></div>\r\n                        <div class=\"new-skeleton-content\">\r\n                            <div class=\"new-skeleton-name\"></div>\r\n                            <div class=\"new-skeleton-info\"></div>\r\n                        </div>\r\n                    </div>\r\n                `\r\n                    )\r\n                    .join(\"\")}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    hideNewDirectorySkeleton(modal) {\r\n        if (!modal) return;\r\n        const skeleton = modal.querySelector(\".new-skeleton\");\r\n        if (skeleton) {\r\n            skeleton.remove();\r\n        }\r\n    }\r\n\r\n    renderNewDirectories(directories, currentPath, modal) {\r\n        if (!modal) return;\r\n        const directoryList = modal.querySelector(\"#new-directory-list\");\r\n        if (!directoryList) return;\r\n\r\n        const rawItems = Array.isArray(directories)\r\n            ? directories\r\n            : directories && Array.isArray(directories.dirs)\r\n            ? directories.dirs\r\n            : [];\r\n\r\n        // Process items to ensure they have the correct structure\r\n        const items = rawItems.map((item) => {\r\n            if (item && (item.type || item.path)) {\r\n                return item;\r\n            }\r\n\r\n            // Use the relative path from the backend, or construct from name if needed\r\n            const name = item?.name || \"\";\r\n            const relativePath = item?.relative || \"\";\r\n\r\n            // If we have a relative path from the backend, use it directly\r\n            if (relativePath) {\r\n                return {\r\n                    type: \"directory\",\r\n                    writable: true,\r\n                    path: relativePath,\r\n                    name: name,\r\n                    permissions: item?.permissions || \"\",\r\n                };\r\n            }\r\n\r\n            // Fallback: construct path from current path and name\r\n            const basePath = currentPath === \"/\" ? \"\" : currentPath || \"\";\r\n            const normalizedPath = `/${\r\n                basePath ? basePath.replace(/\\/$/, \"\") + \"/\" : \"\"\r\n            }${name}`.replace(/\\/+/g, \"/\");\r\n\r\n            return {\r\n                type: \"directory\",\r\n                writable: true,\r\n                path: normalizedPath,\r\n                name: name,\r\n                permissions: item?.permissions || \"\",\r\n            };\r\n        });\r\n\r\n        if (!items || items.length === 0) {\r\n            directoryList.innerHTML = `\r\n                <div class=\"new-empty\">\r\n                    <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"24\" height=\"24\">\r\n                        <path d=\"M3 7h5l2 3h11v9a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2Z\"/>\r\n                    </svg>\r\n                    <span>No folders found</span>\r\n                </div>\r\n            `;\r\n            return;\r\n        }\r\n\r\n        directoryList.innerHTML = `\r\n            <div class=\"new-items\">\r\n                ${items\r\n                    .map((dir) => this.createNewDirectoryItemHTML(dir))\r\n                    .join(\"\")}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createNewDirectoryItemHTML(dir) {\r\n        return `\r\n            <div class=\"new-directory-item\" data-path=\"${dir.path}\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z\"/></svg>\r\n                <div class=\"new-directory-info\">\r\n                    <div class=\"new-directory-name\">${this.escapeHtml(\r\n                        dir.name\r\n                    )}</div>\r\n                    <div class=\"new-directory-path\">${dir.path}</div>\r\n                </div>\r\n                <button class=\"new-item-action\" title=\"Enter folder\">\r\n                    <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                        <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/>\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    updateNewBreadcrumb(path, modal) {\r\n        if (!modal) return;\r\n        const breadcrumb = modal.querySelector(\"#new-breadcrumb\");\r\n        const backBtn = modal.querySelector(\"#new-back-btn\");\r\n        if (!breadcrumb) return;\r\n\r\n        // Add loading state\r\n        breadcrumb.classList.add(\"loading\");\r\n\r\n        // Normalize path: ensure it's a string and handle root cases\r\n        const normalizedPath = typeof path === \"string\" ? path.trim() : \"\";\r\n\r\n        // Handle edge cases: remove leading/trailing slashes and normalize\r\n        const cleanPath = normalizedPath.replace(/^[/\\\\]+|[/\\\\]+$/g, \"\");\r\n\r\n        // Split by slash and filter out empty parts and current directory references\r\n        const pathParts = cleanPath\r\n            .split(/[\\\\/]+/)\r\n            .filter((part) => part && part !== \".\" && part !== \"..\");\r\n\r\n        // If we're at root, only \"Root\" should be active\r\n        if (pathParts.length === 0) {\r\n            breadcrumb.innerHTML =\r\n                '<button class=\"new-breadcrumb-item active\" data-path=\"\" aria-current=\"page\">Root</button>';\r\n            if (backBtn) {\r\n                backBtn.style.display = \"none\";\r\n            }\r\n            breadcrumb.classList.remove(\"loading\");\r\n            return;\r\n        }\r\n\r\n        let breadcrumbHTML =\r\n            '<button class=\"new-breadcrumb-item\" data-path=\"\" aria-label=\"Go to root directory\">Root</button>';\r\n\r\n        let currentPath = \"\";\r\n        pathParts.forEach((part, index) => {\r\n            // Build the path step by step, ensuring proper separation\r\n            currentPath = currentPath ? `${currentPath}/${part}` : part;\r\n            const isLast = index === pathParts.length - 1;\r\n            const escapedPart = this.escapeHtml(part);\r\n            const escapedPath = this.escapeHtml(currentPath);\r\n\r\n            breadcrumbHTML += `\r\n                <span class=\"new-breadcrumb-separator\" aria-hidden=\"true\">/</span>\r\n                <button class=\"new-breadcrumb-item ${\r\n                    isLast ? \"active\" : \"\"\r\n                }\" data-path=\"${escapedPath}\" title=\"${escapedPart}\" ${\r\n                isLast\r\n                    ? 'aria-current=\"page\"'\r\n                    : `aria-label=\"Go to ${escapedPart} directory\"`\r\n            }>\r\n                    ${escapedPart}\r\n                </button>\r\n            `;\r\n        });\r\n\r\n        breadcrumb.innerHTML = breadcrumbHTML;\r\n\r\n        // Show back button when not at root\r\n        if (backBtn) {\r\n            backBtn.style.display = \"flex\";\r\n        }\r\n\r\n        // Ensure breadcrumb is scrollable if needed\r\n        setTimeout(() => {\r\n            breadcrumb.scrollLeft = breadcrumb.scrollWidth;\r\n            breadcrumb.classList.remove(\"loading\");\r\n        }, 100);\r\n    }\r\n\r\n    setupNewDirectoryEvents(modal) {\r\n        if (!modal) {\r\n            return;\r\n        }\r\n\r\n        // Breadcrumb navigation\r\n        modal.addEventListener(\"click\", (e) => {\r\n            if (e.target.matches(\".new-breadcrumb-item\")) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                const path = e.target.dataset.path;\r\n                const isActive = e.target.classList.contains(\"active\");\r\n\r\n                // Don't reload if clicking on already active item\r\n                if (isActive) return;\r\n\r\n                // Add visual feedback\r\n                e.target.style.transform = \"scale(0.95)\";\r\n                setTimeout(() => {\r\n                    e.target.style.transform = \"\";\r\n                }, 150);\r\n\r\n                this.loadNewDirectories(path, modal);\r\n            }\r\n        });\r\n\r\n        // Back button navigation\r\n        const backBtn = modal.querySelector(\"#new-back-btn\");\r\n        if (backBtn) {\r\n            backBtn.addEventListener(\"click\", (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                const currentActive = modal.querySelector(\r\n                    \".new-breadcrumb-item.active\"\r\n                );\r\n                if (!currentActive) return;\r\n\r\n                const currentPath = currentActive.dataset.path;\r\n                if (!currentPath) return; // Already at root\r\n\r\n                // Get parent path\r\n                const pathParts = currentPath.split(\"/\").filter((part) => part);\r\n                pathParts.pop(); // Remove current folder\r\n                const parentPath = pathParts.join(\"/\");\r\n\r\n                // Navigate to parent directory\r\n                this.loadNewDirectories(parentPath, modal);\r\n            });\r\n        }\r\n\r\n        // Enhanced Search functionality\r\n        const searchInput = modal.querySelector(\"#new-search-enhanced\");\r\n        const searchClear = modal.querySelector(\"#new-search-clear\");\r\n        const searchStatus = modal.querySelector(\"#new-search-status\");\r\n\r\n        if (searchInput) {\r\n            searchInput.addEventListener(\r\n                \"input\",\r\n                this.debounce((e) => {\r\n                    const query = e.target.value.trim();\r\n                    this.handleSearchInput(\r\n                        query,\r\n                        modal,\r\n                        searchClear,\r\n                        searchStatus\r\n                    );\r\n                }, 300)\r\n            );\r\n\r\n            // Focus on search input when modal opens\r\n            searchInput.focus();\r\n        }\r\n\r\n        if (searchClear) {\r\n            searchClear.addEventListener(\"click\", () => {\r\n                searchInput.value = \"\";\r\n                searchClear.style.display = \"none\";\r\n                if (searchStatus) searchStatus.textContent = \"\";\r\n\r\n                // Return to current directory view\r\n                const currentPath =\r\n                    modal.querySelector(\".new-breadcrumb-item.active\")?.dataset\r\n                        .path || \"/\";\r\n                this.loadNewDirectories(currentPath, modal);\r\n            });\r\n        }\r\n\r\n        // Refresh button\r\n        const refreshBtn = modal.querySelector(\"#new-refresh\");\r\n        if (refreshBtn) {\r\n            refreshBtn.addEventListener(\"click\", async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                const currentPath =\r\n                    modal.querySelector(\".new-breadcrumb-item.active\")?.dataset\r\n                        .path || \"/\";\r\n\r\n                // Add loading state\r\n                refreshBtn.classList.add(\"loading\");\r\n                refreshBtn.disabled = true;\r\n\r\n                try {\r\n                    // Convert breadcrumb path to relative path for the backend\r\n                    const relativePath =\r\n                        currentPath === \"/\"\r\n                            ? \"\"\r\n                            : currentPath.replace(/^\\//, \"\");\r\n                    await this.loadNewDirectories(relativePath, modal);\r\n                } finally {\r\n                    // Remove loading state\r\n                    refreshBtn.classList.remove(\"loading\");\r\n                    refreshBtn.disabled = false;\r\n                }\r\n            });\r\n        }\r\n\r\n        // Create folder\r\n        const createBtn = modal.querySelector(\"#new-create-folder\");\r\n        if (createBtn) {\r\n            createBtn.addEventListener(\"click\", async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                const currentPath =\r\n                    modal.querySelector(\".new-breadcrumb-item.active\")?.dataset\r\n                        .path || \"/\";\r\n                const folderName = prompt(\"Enter folder name:\");\r\n                if (!folderName) return;\r\n\r\n                try {\r\n                    const formData = new FormData();\r\n                    formData.append(\r\n                        \"action\",\r\n                        gitManagerAjax.actions.dir_create\r\n                    );\r\n                    formData.append(\"nonce\", gitManagerAjax.nonce);\r\n                    formData.append(\r\n                        \"relative\",\r\n                        currentPath === \"/\"\r\n                            ? \"\"\r\n                            : currentPath.replace(/^\\//, \"\")\r\n                    );\r\n                    formData.append(\"name\", folderName);\r\n\r\n                    const res = await fetch(gitManagerAjax.ajaxurl, {\r\n                        method: \"POST\",\r\n                        body: formData,\r\n                    });\r\n\r\n                    const data = await res.json();\r\n                    if (!data.success)\r\n                        throw new Error(data.data || \"Create failed\");\r\n\r\n                    this.loadNewDirectories(currentPath, modal);\r\n                    this.showNotification(\r\n                        \"Folder created successfully\",\r\n                        \"success\"\r\n                    );\r\n                } catch (err) {\r\n                    this.showNotification(\r\n                        `Failed to create folder: ${err.message}`,\r\n                        \"error\"\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // Delete folder\r\n        const deleteBtn = modal.querySelector(\"#new-delete-folder\");\r\n        if (deleteBtn) {\r\n            deleteBtn.addEventListener(\"click\", async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                const selectedPath = modal.querySelector(\r\n                    \"#new-selected-value\"\r\n                )?.textContent;\r\n                if (!selectedPath) {\r\n                    this.showNotification(\r\n                        \"Please select a folder to delete\",\r\n                        \"warning\"\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                if (\r\n                    !confirm(\r\n                        `Are you sure you want to delete \"${selectedPath}\"? It must be empty.`\r\n                    )\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                try {\r\n                    const formData = new FormData();\r\n                    formData.append(\r\n                        \"action\",\r\n                        gitManagerAjax.actions.dir_delete\r\n                    );\r\n                    formData.append(\"nonce\", gitManagerAjax.nonce);\r\n                    formData.append(\r\n                        \"relative\",\r\n                        selectedPath === \"/\" ? \"\" : selectedPath\r\n                    );\r\n\r\n                    const res = await fetch(gitManagerAjax.ajaxurl, {\r\n                        method: \"POST\",\r\n                        body: formData,\r\n                    });\r\n\r\n                    const data = await res.json();\r\n                    if (!data.success)\r\n                        throw new Error(data.data || \"Delete failed\");\r\n\r\n                    const currentPath =\r\n                        modal.querySelector(\".new-breadcrumb-item.active\")\r\n                            ?.dataset.path || \"/\";\r\n                    this.loadNewDirectories(currentPath, modal);\r\n\r\n                    // Clear selection\r\n                    const selectedDisplay =\r\n                        modal.querySelector(\"#new-selected-path\");\r\n                    const selectBtn = modal.querySelector(\"#new-select-btn\");\r\n                    if (selectedDisplay && selectBtn) {\r\n                        selectedDisplay.style.display = \"none\";\r\n                        selectBtn.disabled = true;\r\n                    }\r\n\r\n                    this.showNotification(\r\n                        \"Folder deleted successfully\",\r\n                        \"success\"\r\n                    );\r\n                } catch (err) {\r\n                    this.showNotification(\r\n                        `Failed to delete folder: ${err.message}`,\r\n                        \"error\"\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // Rename folder\r\n        const renameBtn = modal.querySelector(\"#new-rename\");\r\n        if (renameBtn) {\r\n            renameBtn.addEventListener(\"click\", async (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                const selectedPath = modal.querySelector(\r\n                    \"#new-selected-value\"\r\n                )?.textContent;\r\n                if (!selectedPath) {\r\n                    this.showNotification(\r\n                        \"Please select a folder to rename\",\r\n                        \"warning\"\r\n                    );\r\n                    return;\r\n                }\r\n\r\n                const currentName = selectedPath.split(\"/\").pop();\r\n                const newName = prompt(\"Enter new folder name:\", currentName);\r\n                if (!newName || newName === currentName) return;\r\n\r\n                try {\r\n                    const formData = new FormData();\r\n                    formData.append(\r\n                        \"action\",\r\n                        gitManagerAjax.actions.dir_rename\r\n                    );\r\n                    formData.append(\"nonce\", gitManagerAjax.nonce);\r\n                    formData.append(\r\n                        \"relative\",\r\n                        selectedPath === \"/\" ? \"\" : selectedPath\r\n                    );\r\n                    formData.append(\"new_name\", newName);\r\n\r\n                    const res = await fetch(gitManagerAjax.ajaxurl, {\r\n                        method: \"POST\",\r\n                        body: formData,\r\n                    });\r\n\r\n                    const data = await res.json();\r\n                    if (!data.success)\r\n                        throw new Error(data.data || \"Rename failed\");\r\n\r\n                    const currentPath =\r\n                        modal.querySelector(\".new-breadcrumb-item.active\")\r\n                            ?.dataset.path || \"/\";\r\n                    this.loadNewDirectories(currentPath, modal);\r\n\r\n                    // Clear selection\r\n                    const selectedDisplay =\r\n                        modal.querySelector(\"#new-selected-path\");\r\n                    const selectBtn = modal.querySelector(\"#new-select-btn\");\r\n                    if (selectedDisplay && selectBtn) {\r\n                        selectedDisplay.style.display = \"none\";\r\n                        selectBtn.disabled = true;\r\n                    }\r\n\r\n                    this.showNotification(\r\n                        \"Folder renamed successfully\",\r\n                        \"success\"\r\n                    );\r\n                } catch (err) {\r\n                    this.showNotification(\r\n                        `Failed to rename folder: ${err.message}`,\r\n                        \"error\"\r\n                    );\r\n                }\r\n            });\r\n        }\r\n\r\n        // Directory item clicks - Enhanced navigation\r\n        modal.addEventListener(\"click\", (e) => {\r\n            const item = e.target.closest(\".new-directory-item\");\r\n            if (!item) return;\r\n\r\n            const path = item.dataset.path;\r\n            if (!path) return;\r\n\r\n            // Check if we're in search mode\r\n            const isSearchMode = item.classList.contains(\"new-search-item\");\r\n            const searchInput = modal.querySelector(\"#new-search-enhanced\");\r\n            const hasSearchQuery = searchInput && searchInput.value.trim();\r\n\r\n            // If clicking on action button\r\n            if (e.target.closest(\".new-item-action\")) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                if (isSearchMode || hasSearchQuery) {\r\n                    // In search mode, select the folder instead of navigating\r\n                    this.selectNewDirectory(path, modal);\r\n\r\n                    // Clear search and return to normal view\r\n                    if (searchInput) {\r\n                        searchInput.value = \"\";\r\n                        const searchClear =\r\n                            modal.querySelector(\"#new-search-clear\");\r\n                        const searchStatus =\r\n                            modal.querySelector(\"#new-search-status\");\r\n                        if (searchClear) searchClear.style.display = \"none\";\r\n                        if (searchStatus) searchStatus.textContent = \"\";\r\n                    }\r\n\r\n                    // Navigate to the parent directory of the selected item\r\n                    const pathParts = path.split(\"/\");\r\n                    pathParts.pop(); // Remove the folder name\r\n                    const parentPath =\r\n                        pathParts.length > 0 ? pathParts.join(\"/\") : \"\";\r\n                    this.loadNewDirectories(parentPath, modal);\r\n                } else {\r\n                    // Normal navigation mode\r\n                    this.loadNewDirectories(path, modal);\r\n                }\r\n                return;\r\n            }\r\n\r\n            // Remove selection from all items\r\n            modal.querySelectorAll(\".new-directory-item\").forEach((dirItem) => {\r\n                dirItem.classList.remove(\"selected\");\r\n            });\r\n\r\n            // Add selection to clicked item\r\n            item.classList.add(\"selected\");\r\n\r\n            // Select the folder\r\n            this.selectNewDirectory(path, modal);\r\n        });\r\n\r\n        // Double-click to navigate - Fixed\r\n        modal.addEventListener(\"dblclick\", (e) => {\r\n            const item = e.target.closest(\".new-directory-item\");\r\n            if (item) {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                const path = item.dataset.path;\r\n                if (path) {\r\n                    // Use the relative path for navigation (this is the path relative to WordPress root)\r\n                    this.loadNewDirectories(path, modal);\r\n                }\r\n            }\r\n        });\r\n\r\n        // Select button\r\n        const selectBtn = modal.querySelector(\"#new-select-btn\");\r\n        if (selectBtn) {\r\n            const $this = this;\r\n            selectBtn.addEventListener(\"click\", (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n\r\n                const selectedValueElement = modal.querySelector(\r\n                    \"#new-selected-value\"\r\n                );\r\n                const selectedPath = selectedValueElement?.textContent;\r\n\r\n                if (selectedPath && selectedPath.trim()) {\r\n                    if ($this.directorySelectorTarget) {\r\n                        const targetInput = document.querySelector(\r\n                            $this.directorySelectorTarget\r\n                        );\r\n\r\n                        if (targetInput) {\r\n                            // Convert backslashes to forward slashes for consistency\r\n                            const normalizedPath = selectedPath.replace(\r\n                                /\\\\/g,\r\n                                \"/\"\r\n                            );\r\n\r\n                            targetInput.value = normalizedPath;\r\n\r\n                            // Trigger input event to update any dependent UI\r\n                            targetInput.dispatchEvent(\r\n                                new Event(\"input\", { bubbles: true })\r\n                            );\r\n                        } else {\r\n                        }\r\n                    } else {\r\n                    }\r\n\r\n                    // Small delay to ensure the value is properly set before closing\r\n                    setTimeout(() => {\r\n                        $this.closeModal(\"new-directory-selector\");\r\n                    }, 100);\r\n                } else {\r\n                }\r\n            });\r\n        }\r\n\r\n        // Cancel button\r\n        const cancelBtn = modal.querySelector(\"#new-cancel-btn\");\r\n        if (cancelBtn) {\r\n            cancelBtn.addEventListener(\"click\", (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.closeModal(\"new-directory-selector\");\r\n            });\r\n        }\r\n\r\n        // Close modal when clicking overlay\r\n        modal.addEventListener(\"click\", (e) => {\r\n            if (e.target === modal) {\r\n                this.closeModal(\"new-directory-selector\");\r\n            }\r\n        });\r\n\r\n        // Close modal when clicking close button\r\n        const closeBtn = modal.querySelector(\".git-modal-close\");\r\n        if (closeBtn) {\r\n            closeBtn.addEventListener(\"click\", (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                this.closeModal(\"new-directory-selector\");\r\n            });\r\n        }\r\n    }\r\n\r\n    selectNewDirectory(path, modal) {\r\n        if (!modal) return;\r\n        const selectedDisplay = modal.querySelector(\"#new-selected-path\");\r\n        const selectedValue = modal.querySelector(\"#new-selected-value\");\r\n        const selectBtn = modal.querySelector(\"#new-select-btn\");\r\n\r\n        if (selectedDisplay && selectedValue && selectBtn) {\r\n            selectedValue.textContent = path;\r\n            selectedDisplay.style.display = \"flex\";\r\n            selectBtn.disabled = false;\r\n        } else {\r\n        }\r\n    }\r\n\r\n    handleSearchInput(query, modal, searchClear, searchStatus) {\r\n        if (!modal) return;\r\n\r\n        // Show/hide clear button\r\n        if (searchClear) {\r\n            searchClear.style.display = query ? \"flex\" : \"none\";\r\n        }\r\n\r\n        if (!query) {\r\n            if (searchStatus) searchStatus.textContent = \"\";\r\n            const currentPath =\r\n                modal.querySelector(\".new-breadcrumb-item.active\")?.dataset\r\n                    .path || \"/\";\r\n            this.loadNewDirectories(currentPath, modal);\r\n\r\n            // Remove loading state\r\n            const searchWrapper = modal.querySelector(\".new-search-wrapper\");\r\n            if (searchWrapper) {\r\n                searchWrapper.classList.remove(\"searching\");\r\n            }\r\n            return;\r\n        }\r\n\r\n        // Add loading state\r\n        const searchWrapper = modal.querySelector(\".new-search-wrapper\");\r\n        if (searchWrapper) {\r\n            searchWrapper.classList.add(\"searching\");\r\n        }\r\n\r\n        // Update search status\r\n        if (searchStatus) {\r\n            searchStatus.textContent = `Searching for \"${query}\"...`;\r\n        }\r\n\r\n        this.searchNewDirectories(query, modal, searchStatus);\r\n    }\r\n\r\n    async searchNewDirectories(query, modal, searchStatus) {\r\n        if (!modal) return;\r\n\r\n        if (!query.trim()) {\r\n            const currentPath =\r\n                modal.querySelector(\".new-breadcrumb-item.active\")?.dataset\r\n                    .path || \"/\";\r\n            this.loadNewDirectories(currentPath, modal);\r\n            return;\r\n        }\r\n\r\n        try {\r\n            // Show loading skeleton for search\r\n            this.showNewDirectorySkeleton(modal);\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"action\", gitManagerAjax.actions.repo_dirs);\r\n            formData.append(\"nonce\", gitManagerAjax.nonce);\r\n            formData.append(\"query\", query);\r\n\r\n            const response = await fetch(gitManagerAjax.ajaxurl, {\r\n                method: \"POST\",\r\n                body: formData,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`HTTP error! status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            if (data.success) {\r\n                this.hideNewDirectorySkeleton(modal);\r\n                this.renderSearchResults(data.data, query, modal, searchStatus);\r\n\r\n                // Remove loading state\r\n                const searchWrapper = modal.querySelector(\r\n                    \".new-search-wrapper\"\r\n                );\r\n                if (searchWrapper) {\r\n                    searchWrapper.classList.remove(\"searching\");\r\n                }\r\n            } else {\r\n                throw new Error(data.data || \"Failed to search directories\");\r\n            }\r\n        } catch (error) {\r\n            this.hideNewDirectorySkeleton(modal);\r\n\r\n            // Remove loading state\r\n            const searchWrapper = modal.querySelector(\".new-search-wrapper\");\r\n            if (searchWrapper) {\r\n                searchWrapper.classList.remove(\"searching\");\r\n            }\r\n\r\n            if (searchStatus) {\r\n                searchStatus.textContent = `Search failed: ${error.message}`;\r\n            }\r\n            if (modal) {\r\n                const directoryList = modal.querySelector(\r\n                    \"#new-directory-list\"\r\n                );\r\n                if (directoryList) {\r\n                    directoryList.innerHTML = `\r\n                        <div class=\"new-error\">\r\n                            <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"24\" height=\"24\">\r\n                                <path d=\"M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z\"/>\r\n                            </svg>\r\n                            <span>Search failed: ${error.message}</span>\r\n                        </div>\r\n                    `;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    renderSearchResults(directories, query, modal, searchStatus) {\r\n        if (!modal) return;\r\n        const directoryList = modal.querySelector(\"#new-directory-list\");\r\n        if (!directoryList) return;\r\n\r\n        const rawItems = Array.isArray(directories)\r\n            ? directories\r\n            : directories && Array.isArray(directories.dirs)\r\n            ? directories.dirs\r\n            : [];\r\n\r\n        // Update search status\r\n        if (searchStatus) {\r\n            if (rawItems.length === 0) {\r\n                searchStatus.textContent = `No folders found matching \"${query}\"`;\r\n            } else {\r\n                searchStatus.textContent = `Found ${rawItems.length} folder${\r\n                    rawItems.length === 1 ? \"\" : \"s\"\r\n                } matching \"${query}\"`;\r\n            }\r\n        }\r\n\r\n        if (!rawItems || rawItems.length === 0) {\r\n            directoryList.innerHTML = `\r\n                <div class=\"new-empty\">\r\n                    <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"24\" height=\"24\">\r\n                        <path d=\"M3 7h5l2 3h11v9a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2Z\"/>\r\n                    </svg>\r\n                    <span>No folders found matching \"${query}\"</span>\r\n                </div>\r\n            `;\r\n            return;\r\n        }\r\n\r\n        // Process search results to show full paths\r\n        const items = rawItems.map((item) => {\r\n            const name = item?.name || \"\";\r\n            const relativePath = item?.relative || \"\";\r\n\r\n            // For search results, we want to show the full path structure\r\n            return {\r\n                type: \"directory\",\r\n                writable: true,\r\n                path: relativePath,\r\n                name: name,\r\n                fullPath: relativePath, // This will be used for display\r\n                permissions: item?.permissions || \"\",\r\n            };\r\n        });\r\n\r\n        directoryList.innerHTML = `\r\n            <div class=\"new-items new-search-results\">\r\n                ${items\r\n                    .map((dir) => this.createSearchResultItemHTML(dir, query))\r\n                    .join(\"\")}\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    createSearchResultItemHTML(dir, query) {\r\n        // Highlight the matching part of the name\r\n        const highlightedName = this.highlightSearchMatch(dir.name, query);\r\n\r\n        return `\r\n            <div class=\"new-directory-item new-search-item\" data-path=\"${dir.path}\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M20 20a2 2 0 0 0 2-2V8a2 2 0 0 0-2-2h-7.9a2 2 0 0 1-1.69-.9L9.6 3.9A2 2 0 0 0 7.93 3H4a2 2 0 0 0-2 2v13a2 2 0 0 0 2 2Z\"/></svg>\r\n                <div class=\"new-directory-info\">\r\n                    <div class=\"new-directory-name\">${highlightedName}</div>\r\n                    <div class=\"new-directory-path\">${dir.fullPath}</div>\r\n                </div>\r\n                <button class=\"new-item-action\" title=\"Select folder\">\r\n                    <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                        <path d=\"M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z\"/>\r\n                    </svg>\r\n                </button>\r\n            </div>\r\n        `;\r\n    }\r\n\r\n    highlightSearchMatch(text, query) {\r\n        if (!query) return this.escapeHtml(text);\r\n\r\n        const regex = new RegExp(`(${this.escapeRegex(query)})`, \"gi\");\r\n        return this.escapeHtml(text).replace(\r\n            regex,\r\n            '<mark class=\"search-highlight\">$1</mark>'\r\n        );\r\n    }\r\n\r\n    escapeRegex(string) {\r\n        return string.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\r\n    }\r\n\r\n    /**\r\n     * Test directory selector buttons\r\n     */\r\n    testDirectorySelectorButtons() {\r\n        const modal = document.querySelector(\r\n            '[data-modal-id=\"new-directory-selector\"]'\r\n        );\r\n        if (!modal) {\r\n            return;\r\n        }\r\n\r\n        const buttons = {\r\n            refresh: modal.querySelector(\"#new-refresh\"),\r\n            create: modal.querySelector(\"#new-create-folder\"),\r\n            delete: modal.querySelector(\"#new-delete-folder\"),\r\n            select: modal.querySelector(\"#new-select-btn\"),\r\n            cancel: modal.querySelector(\"#new-cancel-btn\"),\r\n        };\r\n\r\n        // Test if buttons are clickable\r\n        Object.entries(buttons).forEach(([name, button]) => {\r\n            if (button) {\r\n            } else {\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Troubleshooting\r\n     */\r\n    showTroubleshooting() {\r\n        // Check if enhanced troubleshooting is available\r\n        if (typeof GitTroubleshooter !== \"undefined\") {\r\n            this.showEnhancedTroubleshooting();\r\n        } else {\r\n            this.showNotification(\r\n                \"Enhanced troubleshooting system is loading...\",\r\n                \"info\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show enhanced troubleshooting interface\r\n     */\r\n    showEnhancedTroubleshooting() {\r\n        // Check if we're in repository context\r\n        if (this.currentRepo) {\r\n            this.showRepositoryTroubleshooting();\r\n            // Show troubleshooting in the repository tab\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show repository-specific troubleshooting in the tab\r\n     */\r\n    showRepositoryTroubleshooting() {\r\n        // Switch to troubleshooting tab (this will also initialize the troubleshooting)\r\n        this.switchTab(\"troubleshooting\");\r\n    }\r\n\r\n    /**\r\n     * Professional troubleshooting for repositories\r\n     */\r\n    async troubleshootRepo() {\r\n        if (!this.currentRepo) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.noRepositorySelected,\r\n                \"warning\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.showProgress(\r\n            WPGitManagerGlobal.translations.runningProfessionalTroubleshooting\r\n        );\r\n\r\n        try {\r\n            const response = await this.apiCall(\r\n                \"git_manager_repo_troubleshoot\",\r\n                {\r\n                    id: this.currentRepo,\r\n                }\r\n            );\r\n\r\n            if (response.success) {\r\n                this.showTroubleshootModal(response.data.html);\r\n            } else {\r\n                this.showNotification(\r\n                    \"Troubleshooting failed: \" +\r\n                        (response.data ||\r\n                            WPGitManagerGlobal.translations.unknownError),\r\n                    \"error\"\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Troubleshooting error: \" + error.message,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.hideProgress();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fix repository permissions\r\n     */\r\n    async fixPermission() {\r\n        if (!this.currentRepo) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.noRepositorySelected,\r\n                \"warning\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Start notification for Fix Permissions\r\n        this.showNotification(\r\n            WPGitManagerGlobal.translations.requestingPermissionFix,\r\n            \"info\",\r\n            {\r\n                duration: 4000,\r\n            }\r\n        );\r\n\r\n        this.showProgress(\r\n            WPGitManagerGlobal.translations.fixingRepositoryPermissions\r\n        );\r\n\r\n        try {\r\n            const response = await this.apiCall(\"git_manager_fix_permission\", {\r\n                id: this.currentRepo,\r\n            });\r\n\r\n            if (response.success) {\r\n                this.showNotification(\r\n                    WPGitManagerGlobal.translations\r\n                        .permissionsFixedSuccessfully,\r\n                    \"success\"\r\n                );\r\n                // Refresh repository details\r\n                this.loadRepositoryDetails(this.currentRepo);\r\n            } else {\r\n                const errMsg = this.extractErrorMessage(response);\r\n                this.showNotification(\r\n                    `${WPGitManagerGlobal.translations.permissionFixFailed}: ${errMsg}`,\r\n                    \"error\"\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                `${WPGitManagerGlobal.translations.permissionFixError}: ${error.message}`,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.hideProgress();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show troubleshooting results modal\r\n     */\r\n    showTroubleshootModal(html) {\r\n        const modal = document.createElement(\"div\");\r\n        modal.className = \"git-modal-overlay\";\r\n        modal.id = \"troubleshoot-modal\";\r\n        modal.innerHTML = `\r\n            <div class=\"git-modal-content git-modal-large\">\r\n                <div class=\"git-modal-header\">\r\n                    <h3><span class=\"dashicons dashicons-hammer\"></span> Professional Troubleshooting Results</h3>\r\n                    <button class=\"git-modal-close\" onclick=\"GitManager.closeTroubleshootModal()\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/></svg></button>\r\n                </div>\r\n                <div class=\"git-modal-body\">\r\n                    <div class=\"troubleshoot-results\">\r\n                        ${html}\r\n                    </div>\r\n                </div>\r\n                <div class=\"git-modal-footer\">\r\n                    <button class=\"git-action-btn git-secondary-btn\" onclick=\"GitManager.closeTroubleshootModal()\">Close</button>\r\n                    <button class=\"git-action-btn\" onclick=\"GitManager.fixPermission()\">Fix Permissions</button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        document.body.appendChild(modal);\r\n    }\r\n\r\n    /**\r\n     * Helper function to make API calls\r\n     */\r\n    async apiCall(action, data = {}) {\r\n        const formData = new FormData();\r\n        formData.append(\"action\", action);\r\n        formData.append(\"nonce\", gitManagerAjax.nonce);\r\n\r\n        // Add all data properties to formData\r\n        for (const [key, value] of Object.entries(data)) {\r\n            formData.append(key, value);\r\n        }\r\n\r\n        const response = await fetch(gitManagerAjax.ajaxurl, {\r\n            method: \"POST\",\r\n            body: formData,\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(`HTTP error! status: ${response.status}`);\r\n        }\r\n\r\n        return await response.json();\r\n    }\r\n\r\n    /**\r\n     * Extract a human-readable error message from an AJAX response\r\n     * Accepts WP AJAX shapes like { success: false, data: { message, ... } }\r\n     * and falls back sensibly for objects/arrays.\r\n     */\r\n    extractErrorMessage(response) {\r\n        try {\r\n            const unknown =\r\n                (typeof WPGitManagerGlobal !== \"undefined\" &&\r\n                    WPGitManagerGlobal.translations &&\r\n                    WPGitManagerGlobal.translations.unknownError) ||\r\n                \"Unknown error\";\r\n            if (!response) return unknown;\r\n            const data = Object.prototype.hasOwnProperty.call(response, \"data\")\r\n                ? response.data\r\n                : response;\r\n            if (typeof data === \"string\") return data;\r\n            if (data && typeof data.message === \"string\" && data.message.trim())\r\n                return data.message;\r\n            if (data && typeof data.error === \"string\" && data.error.trim())\r\n                return data.error;\r\n            if (\r\n                data &&\r\n                data.test_result &&\r\n                typeof data.test_result.output === \"string\" &&\r\n                data.test_result.output.trim()\r\n            )\r\n                return data.test_result.output;\r\n            if (Array.isArray(data)) return data.filter(Boolean).join(\"; \");\r\n            return JSON.stringify(data);\r\n        } catch (e) {\r\n            return \"Unknown error\";\r\n        }\r\n    }\r\n\r\n    getStatusText(repo) {\r\n        if (repo.hasChanges) {\r\n            return \"Modified\";\r\n        }\r\n        if (repo.ahead && repo.ahead > 0) {\r\n            return `Ahead by ${repo.ahead}`;\r\n        }\r\n        if (repo.behind && repo.behind > 0) {\r\n            return `Behind by ${repo.behind}`;\r\n        }\r\n        return \"Clean\";\r\n    }\r\n\r\n    /**\r\n     * Initialize settings tab when switched to\r\n     */\r\n    initializeSettingsTab() {\r\n        if (!this.currentRepo) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.noRepositorySelected,\r\n                \"warning\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Load current repository data\r\n        this.loadRepositorySettings();\r\n\r\n        // Setup settings form event listeners\r\n        this.setupSettingsFormListeners();\r\n    }\r\n\r\n    /**\r\n     * Load repository settings into the settings form\r\n     */\r\n    async loadRepositorySettings() {\r\n        try {\r\n            const response = await this.apiCall(\r\n                \"git_manager_get_repo_details\",\r\n                {\r\n                    id: this.currentRepo,\r\n                }\r\n            );\r\n\r\n            if (response.success) {\r\n                const repo = response.data;\r\n\r\n                // Populate settings form fields\r\n                const nameInput = document.getElementById(\"repo-name-setting\");\r\n                const pathInput = document.getElementById(\"repo-path-setting\");\r\n                const remoteInput = document.getElementById(\r\n                    \"repo-remote-setting\"\r\n                );\r\n\r\n                if (nameInput) nameInput.value = repo.name || \"\";\r\n                if (pathInput) pathInput.value = repo.path || \"\";\r\n                if (remoteInput) remoteInput.value = repo.remoteUrl || \"\";\r\n\r\n                // Show success notification\r\n                this.showNotification(\r\n                    getTranslation(\r\n                        \"repositorySettingsLoaded\",\r\n                        \"Repository settings loaded successfully\"\r\n                    ),\r\n                    \"success\",\r\n                    {\r\n                        duration: 2000,\r\n                    }\r\n                );\r\n            } else {\r\n                this.showNotification(\r\n                    \"Failed to load repository settings\",\r\n                    \"error\"\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                getTranslation(\r\n                    \"errorLoadingRepositorySettings\",\r\n                    \"Error loading repository settings\"\r\n                ),\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup event listeners for settings form\r\n     */\r\n    setupSettingsFormListeners() {\r\n        // Debounced version of the function to mark settings as modified\r\n        const debouncedMarkModified = this.debounce(() => {\r\n            this.markSettingsAsModified();\r\n        }, 500);\r\n\r\n        // Save settings button\r\n        const saveButton = document.getElementById(\"save-settings-btn\");\r\n        if (saveButton) {\r\n            saveButton.onclick = (e) => {\r\n                e.preventDefault();\r\n                this.saveRepositorySettings();\r\n            };\r\n        }\r\n\r\n        // Auto-save on input changes (optional - for real-time updates)\r\n        const inputs = document.querySelectorAll(\r\n            \".settings-form input, .settings-form textarea, .settings-form select\"\r\n        );\r\n        inputs.forEach((input) => {\r\n            input.addEventListener(\"input\", () => {\r\n                // Use the debounced function\r\n                debouncedMarkModified();\r\n\r\n                // Special handling for path input can remain immediate if needed,\r\n                // or can also be debounced. For now, we'll keep it as is.\r\n                if (input.id === \"repo-path-setting\") {\r\n                    this.validatePathInput(input);\r\n                }\r\n            });\r\n        });\r\n\r\n        // Setup maintenance button event listeners\r\n        const maintenanceButtons = document.querySelectorAll(\r\n            \".settings-section .maintenance-buttons .git-action-btn\"\r\n        );\r\n        maintenanceButtons.forEach((button) => {\r\n            button.addEventListener(\"click\", (e) => {\r\n                e.preventDefault();\r\n                const action = button.dataset.action;\r\n                this.handleMaintenanceAction(action);\r\n            });\r\n        });\r\n\r\n        // Setup refresh repository list button\r\n        const refreshButton = document.getElementById(\"refresh-repo-list-btn\");\r\n        if (refreshButton) {\r\n            refreshButton.addEventListener(\"click\", (e) => {\r\n                e.preventDefault();\r\n                this.refreshRepositoryList();\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle maintenance actions in settings\r\n     */\r\n    handleMaintenanceAction(action) {\r\n        if (!this.currentRepo) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.noRepositorySelected,\r\n                \"warning\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        switch (action) {\r\n            case \"troubleshoot\":\r\n                this.switchTab(\"troubleshooting\");\r\n                break;\r\n            case \"fix-permission\":\r\n                this.fixPermission();\r\n                break;\r\n            default:\r\n                this.showNotification(\r\n                    `Unknown maintenance action: ${action}`,\r\n                    \"error\"\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Mark settings as modified (visual feedback)\r\n     */\r\n    markSettingsAsModified() {\r\n        const saveButton = document.getElementById(\"save-settings-btn\");\r\n        if (saveButton) {\r\n            saveButton.classList.add(\"modified\");\r\n            saveButton.innerHTML = `\r\n                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                    <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"/>\r\n                    <polyline points=\"17,21 17,13 7,13 7,21\"/>\r\n                    <polyline points=\"7,3 7,8 15,8\"/>\r\n                </svg>\r\n                Save Settings (Modified)\r\n            `;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Save repository settings\r\n     */\r\n    async saveRepositorySettings() {\r\n        if (!this.currentRepo) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.noRepositorySelected,\r\n                \"warning\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Get form values\r\n        const nameInput = document.getElementById(\"repo-name-setting\");\r\n        const pathInput = document.getElementById(\"repo-path-setting\");\r\n        const remoteInput = document.getElementById(\"repo-remote-setting\");\r\n\r\n        if (!nameInput || !pathInput) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.settingsFormNotFound,\r\n                \"error\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        const settings = {\r\n            id: this.currentRepo,\r\n            name: nameInput.value.trim(),\r\n            path: pathInput.value.trim(),\r\n            remoteUrl: remoteInput ? remoteInput.value.trim() : \"\",\r\n        };\r\n\r\n        // Validate required fields\r\n        if (!settings.name) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.repositoryNameRequired,\r\n                \"error\"\r\n            );\r\n            nameInput.focus();\r\n            return;\r\n        }\r\n\r\n        if (!settings.path) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.repositoryPathRequired,\r\n                \"error\"\r\n            );\r\n            pathInput.focus();\r\n            return;\r\n        }\r\n\r\n        // Validate path format\r\n        if (settings.path.includes(\"..\") || settings.path.includes(\"//\")) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.invalidRepositoryPath,\r\n                \"error\"\r\n            );\r\n            pathInput.focus();\r\n            return;\r\n        }\r\n\r\n        this.showProgress(\"Saving repository settings...\");\r\n\r\n        try {\r\n            const response = await this.apiCall(\r\n                \"git_manager_repo_update\",\r\n                settings\r\n            );\r\n\r\n            if (response.success) {\r\n                this.showNotification(\r\n                    \"Repository settings saved successfully\",\r\n                    \"success\"\r\n                );\r\n\r\n                // Update all UI elements that display repository information\r\n                this.updateRepositoryDisplay(response.data);\r\n                this.updateRepositoryList();\r\n                this.updateRepositoryCard(response.data);\r\n\r\n                // Verify the repository still exists in the list\r\n                setTimeout(() => {\r\n                    this.verifyRepositoryExists(response.data.id);\r\n                }, 1000);\r\n\r\n                // Check if the new path exists and show appropriate message\r\n                if (response.data.path) {\r\n                    this.checkPathExistenceAndNotify(\r\n                        response.data.path,\r\n                        response.data.name\r\n                    );\r\n                }\r\n\r\n                // Reset modified state\r\n                const saveButton = document.getElementById(\"save-settings-btn\");\r\n                if (saveButton) {\r\n                    saveButton.classList.remove(\"modified\");\r\n                    saveButton.innerHTML = `\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                            <path d=\"M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z\"/>\r\n                            <polyline points=\"17,21 17,13 7,13 7,21\"/>\r\n                            <polyline points=\"7,3 7,8 15,8\"/>\r\n                        </svg>\r\n                        Save Settings\r\n                    `;\r\n                }\r\n            } else {\r\n                const errorMessage =\r\n                    response.data ||\r\n                    WPGitManagerGlobal.translations.unknownError;\r\n                this.showNotification(\r\n                    \"Failed to save repository settings: \" + errorMessage,\r\n                    \"error\"\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Error saving repository settings: \" + error.message,\r\n                \"error\"\r\n            );\r\n        }\r\n\r\n        this.hideProgress();\r\n    }\r\n\r\n    /**\r\n     * Update repository card in the sidebar\r\n     */\r\n    updateRepositoryCard(repoData) {\r\n        const repoCard = document.querySelector(\r\n            `[data-repo-id=\"${repoData.id}\"]`\r\n        );\r\n        if (repoCard) {\r\n            // Update repository name\r\n            const nameElement = repoCard.querySelector(\".git-repo-name\");\r\n            if (nameElement) {\r\n                nameElement.textContent = repoData.name;\r\n            }\r\n\r\n            // Update repository path\r\n            const pathElement = repoCard.querySelector(\".git-repo-path\");\r\n            if (pathElement) {\r\n                pathElement.textContent = repoData.path;\r\n            }\r\n\r\n            // Update any other displayed information\r\n            const statusElement = repoCard.querySelector(\".git-repo-status\");\r\n            if (statusElement) {\r\n                statusElement.textContent = repoData.hasChanges\r\n                    ? \"Modified\"\r\n                    : \"Clean\";\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Update repository list (refresh the entire list)\r\n     */\r\n    async updateRepositoryList() {\r\n        try {\r\n            const response = await this.apiCall(\"git_manager_repo_list\");\r\n            if (response.success) {\r\n                this.renderRepositories(response.data);\r\n            }\r\n        } catch (error) {}\r\n    }\r\n\r\n    /**\r\n     * Verify that a repository still exists after update\r\n     */\r\n    async verifyRepositoryExists(repoId) {\r\n        try {\r\n            const response = await this.apiCall(\"git_manager_repo_list\");\r\n            if (response.success) {\r\n                const repoExists = response.data.some(\r\n                    (repo) => repo.id === repoId\r\n                );\r\n                if (!repoExists) {\r\n                    this.showNotification(\r\n                        \"Warning: Repository may not be visible due to path changes. Please refresh the page.\",\r\n                        \"warning\"\r\n                    );\r\n                } else {\r\n                }\r\n            }\r\n        } catch (error) {}\r\n    }\r\n\r\n    /**\r\n     * Validate path input in real-time\r\n     */\r\n    validatePathInput(input) {\r\n        const path = input.value.trim();\r\n        const helpElement = input.parentNode.querySelector(\".form-help\");\r\n\r\n        if (!path) {\r\n            this.clearPathValidation(input, helpElement);\r\n            return;\r\n        }\r\n\r\n        // Check for invalid characters\r\n        if (path.includes(\"..\") || path.includes(\"//\")) {\r\n            this.showPathValidationError(\r\n                input,\r\n                helpElement,\r\n                \"Invalid path format\"\r\n            );\r\n            return;\r\n        }\r\n\r\n        // Check if path exists\r\n        this.checkPathExists(path, input, helpElement);\r\n    }\r\n\r\n    /**\r\n     * Check if path exists via AJAX\r\n     */\r\n    async checkPathExists(path, input, helpElement) {\r\n        try {\r\n            // For now, we'll do a simple client-side check\r\n            // In a real implementation, you might want to make an AJAX call to check server-side\r\n\r\n            // Show loading state\r\n            this.showPathValidationLoading(input, helpElement);\r\n\r\n            // Simulate path check (you can replace this with actual AJAX call)\r\n            setTimeout(() => {\r\n                // For demo purposes, assume path is valid if it doesn't contain obvious invalid patterns\r\n                if (\r\n                    path.startsWith(\"/\") ||\r\n                    path.includes(\"wp-content\") ||\r\n                    path.includes(\"wp-admin\")\r\n                ) {\r\n                    this.showPathValidationSuccess(\r\n                        input,\r\n                        helpElement,\r\n                        \"Path format looks valid\"\r\n                    );\r\n                } else {\r\n                    this.showPathValidationWarning(\r\n                        input,\r\n                        helpElement,\r\n                        \"Path may not exist on server\"\r\n                    );\r\n                }\r\n            }, 500);\r\n        } catch (error) {\r\n            this.showPathValidationError(\r\n                input,\r\n                helpElement,\r\n                \"Error checking path\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show path validation loading state\r\n     */\r\n    showPathValidationLoading(input, helpElement) {\r\n        if (helpElement) {\r\n            helpElement.innerHTML =\r\n                '<span style=\"color: var(--gm-info);\">Checking path...</span>';\r\n        }\r\n        input.style.borderColor = \"var(--gm-info)\";\r\n    }\r\n\r\n    /**\r\n     * Show path validation success\r\n     */\r\n    showPathValidationSuccess(input, helpElement, message) {\r\n        this.clearPathValidation(input, helpElement);\r\n        input.classList.add(\"is-valid\");\r\n        helpElement.innerHTML = `<span style=\"color: var(--gm-success);\">✓ ${message}</span>`;\r\n    }\r\n\r\n    /**\r\n     * Show path validation warning\r\n     */\r\n    showPathValidationWarning(input, helpElement, message) {\r\n        this.clearPathValidation(input, helpElement);\r\n        input.classList.add(\"is-warning\");\r\n        helpElement.innerHTML = `<span style=\"color: var(--gm-warning);\">⚠ ${message}</span>`;\r\n    }\r\n\r\n    /**\r\n     * Show path validation error\r\n     */\r\n    showPathValidationError(input, helpElement, message) {\r\n        this.clearPathValidation(input, helpElement);\r\n        input.classList.add(\"is-invalid\");\r\n        helpElement.innerHTML = `<span style=\"color: var(--gm-error);\">✕ ${message}</span>`;\r\n    }\r\n\r\n    /**\r\n     * Clear path validation\r\n     */\r\n    clearPathValidation(input, helpElement) {\r\n        if (helpElement) {\r\n            helpElement.innerHTML =\r\n                \"The local path where the repository is located\";\r\n        }\r\n        input.style.borderColor = \"var(--gm-border)\";\r\n    }\r\n\r\n    /**\r\n     * Check path existence and notify user\r\n     */\r\n    async checkPathExistenceAndNotify(path, repoName) {\r\n        try {\r\n            // Make an AJAX call to check if the path exists on the server\r\n            const response = await this.apiCall(\"git_manager_repo_dirs\", {\r\n                path: path,\r\n            });\r\n\r\n            if (response.success) {\r\n                const pathExists = response.data.exists || false;\r\n                if (!pathExists) {\r\n                    this.showNotification(\r\n                        `Repository \"${repoName}\" updated successfully, but the new path \"${path}\" does not exist on the server. The repository will appear with a \"missing folder\" warning.`,\r\n                        \"warning\",\r\n                        { duration: 8000 }\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            // Don't show error to user as this is just a verification step\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show help message for missing repositories\r\n     */\r\n    showMissingRepositoryHelp() {\r\n        const helpMessage = `\r\n            <div style=\"padding: 20px; background: var(--gm-bg-secondary); border-radius: var(--gm-radius); border: 1px solid var(--gm-border);\">\r\n                <h4 style=\"margin-top: 0; color: var(--gm-warning);\">Repository Not Found?</h4>\r\n                <p>If you recently changed a repository's path and can't find it:</p>\r\n                <ul style=\"margin: 10px 0; padding-left: 20px;\">\r\n                    <li>The repository may appear with a \"missing folder\" warning</li>\r\n                    <li>Check the repository list for repositories with warning icons</li>\r\n                    <li>If the path doesn't exist, you can re-clone the repository</li>\r\n                    <li>Or update the path to point to the correct location</li>\r\n                </ul>\r\n                                        <button class=\"git-action-btn git-secondary-btn\" onclick=\"window.safeGitManagerCall('refreshRepositoryList')\">\r\n                    Refresh Repository List\r\n                </button>\r\n            </div>\r\n        `;\r\n\r\n        // Show this as a modal or notification\r\n        this.showModal(\"missing-repo-help\", helpMessage);\r\n    }\r\n\r\n    /**\r\n     * Refresh repository list with detailed logging\r\n     */\r\n    async refreshRepositoryList() {\r\n        try {\r\n            const response = await this.apiCall(\"git_manager_repo_list\");\r\n            if (response.success) {\r\n                this.renderRepositories(response.data);\r\n\r\n                // Count missing folders\r\n                const missingFolders = response.data.filter(\r\n                    (repo) => !repo.folderExists\r\n                );\r\n                if (missingFolders.length > 0) {\r\n                    this.showNotification(\r\n                        `Found ${missingFolders.length} repository(ies) with missing folders. Check the list for warning icons.`,\r\n                        { duration: 5000 }\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                WPGitManagerGlobal.translations.errorRefreshingRepositoryList,\r\n                \"error\"\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Manage repository path (unified solution for both re-cloning and fixing path)\r\n     */\r\n    async manageRepositoryPath(repoId) {\r\n        const button = document.querySelector(\r\n            `[data-repo-id=\"${repoId}\"] .repo-action-btn[data-action=\"manage-path\"]`\r\n        );\r\n        this.setButtonLoadingState(button, true);\r\n        try {\r\n            // Get repository details first\r\n            const response = await this.apiCall(\r\n                \"git_manager_get_repo_details\",\r\n                {\r\n                    id: repoId,\r\n                }\r\n            );\r\n\r\n            if (!response.success) {\r\n                this.showNotification(\r\n                    \"Failed to get repository details: \" +\r\n                        (response.data ||\r\n                            WPGitManagerGlobal.translations.unknownError),\r\n                    \"error\"\r\n                );\r\n                return;\r\n            }\r\n\r\n            const repo = response.data;\r\n\r\n            // Set the directory selector target for the manage path modal\r\n            this.directorySelectorTarget = \"#repo-path-input\";\r\n\r\n            this.showManagePathModal(repo);\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Error getting repository details: \" + error.message,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.setButtonLoadingState(button, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show unified modal for managing repository path\r\n     */\r\n    showManagePathModal(repo) {\r\n        const isMissing = !repo.folderExists;\r\n        const modalHTML = `\r\n            <div class=\"git-modal-content git-manage-path-modal\">\r\n                <div class=\"git-modal-header\">\r\n                    <h3>\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"20\" height=\"20\" style=\"margin-right: 8px;\">\r\n                            <path d=\"M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z\"/>\r\n                        </svg>\r\n                        Manage Repository Path\r\n                    </h3>\r\n                    <button class=\"git-modal-close\" aria-label=\"Close modal\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M18 6 6 18\"/><path d=\"m6 6 12 12\"/></svg></button>\r\n                </div>\r\n\r\n                <div class=\"git-modal-body\">\r\n                    <div class=\"manage-path-info\">\r\n                        <h4>Repository: ${this.escapeHtml(repo.name)}</h4>\r\n                        <p><strong>Current Path:</strong> <span style=\"color: ${\r\n                            isMissing ? \"var(--gm-error)\" : \"var(--gm-text)\"\r\n                        }\">${this.escapeHtml(repo.path.replace(/\\\\/g, \"/\"))} ${\r\n            isMissing ? \"(Missing)\" : \"\"\r\n        }</span></p>\r\n                        <p><strong>Remote URL:</strong> ${this.escapeHtml(\r\n                            repo.remoteUrl || \"Not configured\"\r\n                        )}</p>\r\n                        <p><strong>Status:</strong> <span style=\"color: ${\r\n                            isMissing\r\n                                ? \"var(--gm-warning)\"\r\n                                : \"var(--gm-success)\"\r\n                        }\">${\r\n            isMissing ? \"Folder Missing\" : \"Valid Repository\"\r\n        }</span></p>\r\n                    </div>\r\n\r\n                    <form id=\"manage-path-form\" class=\"git-manage-path-form\">\r\n                        <div class=\"form-section\">\r\n                            <h4 class=\"form-section-title\">\r\n                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                                    <path d=\"M3 7V5a2 2 0 0 1 2-2h2\"/>\r\n                                    <path d=\"M17 3h2a2 2 0 0 1 2 2v2\"/>\r\n                                    <path d=\"M21 17v2a2 2 0 0 1-2 2h-2\"/>\r\n                                    <path d=\"M7 21H5a2 2 0 0 1-2-2v-2\"/>\r\n                                </svg>\r\n                                Repository Path\r\n                            </h4>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label for=\"repo-path-input\">Repository Path</label>\r\n                                <div class=\"input-group\">\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"repo-path-input\"\r\n                                        name=\"repo_path\"\r\n                                        class=\"form-control\"\r\n                                        placeholder=\"wp-content/plugins/my-plugin\"\r\n                                        value=\"${this.escapeHtml(\r\n                                            repo.path.replace(/\\\\/g, \"/\")\r\n                                        )}\"\r\n                                        required\r\n                                    >\r\n                                    <button type=\"button\" class=\"git-action-btn git-secondary-btn\" id=\"browse-path-btn\">\r\n                                        <svg viewBox=\"0 0 24 24\" fill=\"currentColor\" width=\"16\" height=\"16\">\r\n                                            <path d=\"M10 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V8c0-1.1-.9-2-2-2h-8l-2-2z\"/>\r\n                                        </svg>\r\n                                        Browse\r\n                                    </button>\r\n                                </div>\r\n                                <div class=\"form-help\">Enter the path where the repository is or should be located</div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"form-section\">\r\n                            <h4 class=\"form-section-title\">\r\n                                <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                                    <path d=\"M15 7h3a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-3\"/>\r\n                                    <path d=\"M10 11l4 4-4 4\"/>\r\n                                    <path d=\"M14 15H9a2 2 0 0 1-2-2v-2a2 2 0 0 1 2-2h5\"/>\r\n                                </svg>\r\n                                Action Options\r\n                            </h4>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label class=\"switch-label\">\r\n                                    <span class=\"switch-text\">Update Path Only</span>\r\n                                    <div class=\"switch-container\">\r\n                                        <input type=\"checkbox\" id=\"update-path-only\" name=\"action_type\" value=\"update_path\" class=\"switch-input\" ${\r\n                                            !isMissing ? \"checked\" : \"\"\r\n                                        }>\r\n                                        <span class=\"switch-slider\"></span>\r\n                                    </div>\r\n                                </label>\r\n                                <div class=\"form-help\">Update the path in Repo Manager(use if files already exist at new location)</div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\">\r\n                                <label class=\"switch-label\">\r\n                                    <span class=\"switch-text\">Re-clone Repository</span>\r\n                                    <div class=\"switch-container\">\r\n                                        <input type=\"checkbox\" id=\"reclone-repo\" name=\"action_type\" value=\"reclone\" class=\"switch-input\" ${\r\n                                            isMissing ? \"checked\" : \"\"\r\n                                        }>\r\n                                        <span class=\"switch-slider\"></span>\r\n                                    </div>\r\n                                </label>\r\n                                <div class=\"form-help\">Clone the repository fresh to the new path (creates new files)</div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\" id=\"branch-group\" style=\"display: none;\">\r\n                                <label for=\"repo-branch\">Branch (Optional)</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    id=\"repo-branch\"\r\n                                    name=\"branch\"\r\n                                    class=\"form-control\"\r\n                                    placeholder=\"main\"\r\n                                >\r\n                                <div class=\"form-help\">Specify a branch to checkout (defaults to main/master)</div>\r\n                            </div>\r\n\r\n                            <div class=\"form-group\" id=\"delete-old-group\" style=\"display: none;\">\r\n                                <label class=\"switch-label\">\r\n                                    <span class=\"switch-text\">Delete old repository entry</span>\r\n                                    <div class=\"switch-container\">\r\n                                        <input type=\"checkbox\" id=\"delete-old-entry\" name=\"delete_old\" class=\"switch-input\" checked>\r\n                                        <span class=\"switch-slider\"></span>\r\n                                    </div>\r\n                                </label>\r\n                                <div class=\"form-help\">Remove the old repository entry after successful re-clone</div>\r\n                            </div>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n\r\n                <div class=\"git-modal-footer\">\r\n                    <button type=\"button\" class=\"git-action-btn git-secondary-btn\" id=\"cancel-manage-path-btn\">\r\n                        Cancel\r\n                    </button>\r\n                    <button type=\"submit\" form=\"manage-path-form\" class=\"git-action-btn\">\r\n                        <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" width=\"16\" height=\"16\">\r\n                            <path d=\"M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z\"/>\r\n                        </svg>\r\n                        Apply Changes\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        `;\r\n\r\n        const modal = this.showModal(\"manage-path\", modalHTML);\r\n\r\n        if (modal) {\r\n            // Setup event listeners\r\n            this.setupManagePathEventListeners(repo);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Setup event listeners for manage path modal\r\n     */\r\n    setupManagePathEventListeners(repo) {\r\n        // Browse path button\r\n        const browseBtn = document.getElementById(\"browse-path-btn\");\r\n        if (browseBtn) {\r\n            browseBtn.onclick = () => {\r\n                // Ensure the target is set correctly for manage path\r\n                this.directorySelectorTarget = \"#repo-path-input\";\r\n                this.browsePath(this.directorySelectorTarget);\r\n            };\r\n        }\r\n\r\n        // Cancel button\r\n        const cancelBtn = document.getElementById(\"cancel-manage-path-btn\");\r\n        if (cancelBtn) {\r\n            cancelBtn.onclick = () => {\r\n                this.closeModal(\"manage-path\");\r\n            };\r\n        }\r\n\r\n        // Action type switches\r\n        const updatePathSwitch = document.getElementById(\"update-path-only\");\r\n        const recloneSwitch = document.getElementById(\"reclone-repo\");\r\n\r\n        if (updatePathSwitch) {\r\n            updatePathSwitch.addEventListener(\"change\", () => {\r\n                if (updatePathSwitch.checked) {\r\n                    if (recloneSwitch) recloneSwitch.checked = false;\r\n                }\r\n                this.toggleManagePathOptions();\r\n            });\r\n        }\r\n\r\n        if (recloneSwitch) {\r\n            recloneSwitch.addEventListener(\"change\", () => {\r\n                if (recloneSwitch.checked) {\r\n                    if (updatePathSwitch) updatePathSwitch.checked = false;\r\n                }\r\n                this.toggleManagePathOptions();\r\n            });\r\n        }\r\n\r\n        // Form submission\r\n        const form = document.getElementById(\"manage-path-form\");\r\n        if (form) {\r\n            form.onsubmit = (e) => {\r\n                e.preventDefault();\r\n                this.handleManagePathSubmit(repo);\r\n            };\r\n        }\r\n\r\n        // Initialize options visibility\r\n        this.toggleManagePathOptions();\r\n    }\r\n\r\n    /**\r\n     * Toggle manage path options based on selected action\r\n     */\r\n    toggleManagePathOptions() {\r\n        const recloneSwitch = document.getElementById(\"reclone-repo\");\r\n        const isReclone = recloneSwitch ? recloneSwitch.checked : false;\r\n        const branchGroup = document.getElementById(\"branch-group\");\r\n        const deleteOldGroup = document.getElementById(\"delete-old-group\");\r\n\r\n        if (isReclone) {\r\n            if (branchGroup) branchGroup.style.display = \"block\";\r\n            if (deleteOldGroup) deleteOldGroup.style.display = \"block\";\r\n        } else {\r\n            if (branchGroup) branchGroup.style.display = \"none\";\r\n            if (deleteOldGroup) deleteOldGroup.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle manage path form submission\r\n     */\r\n    async handleManagePathSubmit(repo) {\r\n        const modal = document.querySelector(\".git-manage-path-modal\");\r\n        const saveButton = modal\r\n            ? modal.querySelector('button[type=\"submit\"]')\r\n            : null;\r\n        this.setButtonLoadingState(saveButton, true);\r\n\r\n        try {\r\n            const newPath = document\r\n                .getElementById(\"repo-path-input\")\r\n                .value.trim();\r\n            const recloneSwitch = document.getElementById(\"reclone-repo\");\r\n            const actionType =\r\n                recloneSwitch && recloneSwitch.checked\r\n                    ? \"reclone\"\r\n                    : \"update_path\";\r\n            const branchElement = document.getElementById(\"repo-branch\");\r\n            const branch =\r\n                branchElement && branchElement.value\r\n                    ? branchElement.value.trim()\r\n                    : \"main\";\r\n            const deleteOldElement =\r\n                document.getElementById(\"delete-old-entry\");\r\n            const deleteOld = deleteOldElement\r\n                ? deleteOldElement.checked\r\n                : false;\r\n\r\n            if (!newPath) {\r\n                this.showNotification(\r\n                    WPGitManagerGlobal.translations.repositoryPathRequired,\r\n                    \"error\"\r\n                );\r\n                // I must return here otherwise the finally block will execute and remove the loading indicator before the user can see the error.\r\n                this.setButtonLoadingState(saveButton, false);\r\n                return;\r\n            }\r\n\r\n            if (actionType === \"update_path\") {\r\n                const response = await this.apiCall(\"git_manager_repo_update\", {\r\n                    id: repo.id,\r\n                    name: repo.name,\r\n                    path: newPath,\r\n                    remoteUrl: repo.remoteUrl,\r\n                    authType: repo.authType,\r\n                });\r\n                if (response.success) {\r\n                    this.showNotification(\r\n                        `Repository path updated successfully to: ${newPath}`,\r\n                        \"success\"\r\n                    );\r\n                    this.closeModal(\"manage-path\");\r\n                    this.refreshRepositoriesSilently();\r\n                    await this.verifyRepositoryExists(repo.id);\r\n                } else {\r\n                    throw new Error(response.data || \"Failed to update path\");\r\n                }\r\n            } else {\r\n                const response = await this.apiCall(\r\n                    \"git_manager_reclone_repo\",\r\n                    {\r\n                        id: repo.id,\r\n                        new_path: newPath,\r\n                        branch: branch,\r\n                        delete_old: deleteOld,\r\n                    }\r\n                );\r\n                if (response.success) {\r\n                    this.showNotification(\r\n                        \"Repository re-cloned successfully.\",\r\n                        \"success\"\r\n                    );\r\n                    this.closeModal(\"manage-path\");\r\n                    this.loadRepositories();\r\n                } else {\r\n                    throw new Error(\r\n                        response.data || \"Failed to re-clone repository\"\r\n                    );\r\n                }\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Error managing repository path: \" + error.message,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.setButtonLoadingState(saveButton, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rename repository (from settings tab)\r\n     */\r\n    async renameRepository(repoId, newName) {\r\n        if (!repoId) return;\r\n\r\n        this.showProgress(\"Renaming repository...\");\r\n        try {\r\n            const response = await this.apiCall(\"git_manager_repo_rename\", {\r\n                id: repoId,\r\n                name: newName,\r\n            });\r\n\r\n            if (response.success) {\r\n                this.showNotification(\r\n                    \"Repository renamed successfully\",\r\n                    \"success\"\r\n                );\r\n                this.loadRepositories();\r\n            } else {\r\n                this.showNotification(\r\n                    \"Failed to rename repository: \" + response.data,\r\n                    \"error\"\r\n                );\r\n            }\r\n        } catch (error) {\r\n            this.showNotification(\r\n                \"Error renaming repository: \" + error.message,\r\n                \"error\"\r\n            );\r\n        } finally {\r\n            this.hideProgress();\r\n        }\r\n    }\r\n\r\n    validateAddRepositoryForm(form) {\r\n        const pathInput = form.querySelector('[name=\"repo_path\"]');\r\n        const remoteInput = form.querySelector('[name=\"repo_url\"]');\r\n        const isExistingCheckbox = form.querySelector('[name=\"existing_repo\"]');\r\n\r\n        if (!isExistingCheckbox) {\r\n            console.error(\"Could not find the 'existing_repo' checkbox.\");\r\n            return false;\r\n        }\r\n        const isExisting = isExistingCheckbox.checked;\r\n\r\n        if (!isExisting) {\r\n            if (!remoteInput || !remoteInput.value.trim()) {\r\n                this.showNotification(\"Repository URL is required.\", \"error\");\r\n                remoteInput?.focus();\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (!pathInput || !pathInput.value.trim()) {\r\n            this.showNotification(\"Local path is required.\", \"error\");\r\n            pathInput?.focus();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Show a notification that fields were auto-filled.\r\n     * @param {object} parsedData\r\n     */\r\n    showAutoFillNotification(parsedData) {\r\n        const messages = [];\r\n\r\n        if (parsedData.suggestedPath) {\r\n            messages.push(`Path: ${parsedData.suggestedPath}`);\r\n        }\r\n\r\n        if (parsedData.defaultBranch) {\r\n            messages.push(`Branch: ${parsedData.defaultBranch}`);\r\n        }\r\n\r\n        if (messages.length > 0) {\r\n            this.showNotification(\r\n                `Auto-filled: ${messages.join(\", \")}`,\r\n                \"info\",\r\n                { duration: 3000 }\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Initialize Repo Manager when DOM is ready\r\ndocument.addEventListener(\"DOMContentLoaded\", () => {\r\n    try {\r\n        if (typeof gitManagerAjax !== \"undefined\") {\r\n            window.GitManager = new GitManager();\r\n\r\n            // Ensure skeleton helper is available globally for minified build\r\n            if (typeof window.gitManagerSkeleton === \"undefined\") {\r\n                window.gitManagerSkeleton = new GitManagerSkeleton();\r\n            }\r\n\r\n            // Add safety wrapper for inline onclick handlers\r\n            window.safeGitManagerCall = (method, ...args) => {\r\n                if (\r\n                    window.GitManager &&\r\n                    typeof window.GitManager[method] === \"function\"\r\n                ) {\r\n                    return window.GitManager[method](...args);\r\n                } else {\r\n                    return Promise.resolve();\r\n                }\r\n            };\r\n\r\n            // Expose methods globally for inline onclick handlers\r\n            window.importSSHKey = () => {\r\n                if (window.GitManager && window.GitManager.importSSHKey) {\r\n                    window.GitManager.importSSHKey();\r\n                } else {\r\n                }\r\n            };\r\n\r\n            window.clearSSHKey = () => {\r\n                if (window.GitManager && window.GitManager.clearSSHKey) {\r\n                    window.GitManager.clearSSHKey();\r\n                } else {\r\n                }\r\n            };\r\n\r\n            window.showSSHHelp = () => {\r\n                if (window.GitManager && window.GitManager.showSSHHelp) {\r\n                    window.GitManager.showSSHHelp();\r\n                } else {\r\n                }\r\n            };\r\n\r\n            window.closeSSHHelp = () => {\r\n                if (window.GitManager && window.GitManager.closeSSHHelp) {\r\n                    window.GitManager.closeSSHHelp();\r\n                } else {\r\n                }\r\n            };\r\n\r\n            window.showTokenHelp = () => {\r\n                if (window.GitManager && window.GitManager.showTokenHelp) {\r\n                    window.GitManager.showTokenHelp();\r\n                } else {\r\n                }\r\n            };\r\n\r\n            window.closeTokenHelp = () => {\r\n                if (window.GitManager && window.GitManager.closeTokenHelp) {\r\n                    window.GitManager.closeTokenHelp();\r\n                } else {\r\n                }\r\n            };\r\n\r\n            window.loadRepositories = () => {\r\n                if (window.GitManager) {\r\n                    window.GitManager.loadRepositories();\r\n                } else {\r\n                }\r\n            };\r\n\r\n            window.selectRepo = (repoId) => {\r\n                if (window.GitManager) {\r\n                    window.GitManager.selectRepository(repoId);\r\n                } else {\r\n                }\r\n            };\r\n\r\n            // Helper to open troubleshooting for a specific repo id\r\n            window.troubleshootRepoFor = (repoId) => {\r\n                if (!window.GitManager) return;\r\n                if (repoId) {\r\n                    window.GitManager.currentRepo = repoId;\r\n                }\r\n                window.GitManager.troubleshootRepo();\r\n            };\r\n        } else {\r\n        }\r\n    } catch (error) {}\r\n});\r\n\r\n// Note: Removed global error handlers to allow WordPress to handle errors properly\r\n\r\nclass GitManagerSkeleton {\r\n    constructor() {\r\n        this.skeletonTemplates = {\r\n            // Repository card skeleton\r\n            repoCard: `\r\n                <div class=\"skeleton-repo-card\">\r\n                    <div class=\"skeleton-repo-header\">\r\n                        <div class=\"skeleton skeleton-repo-name\"></div>\r\n                        <div class=\"skeleton skeleton-repo-status\"></div>\r\n                    </div>\r\n                    <div class=\"skeleton skeleton-repo-path\"></div>\r\n                    <div class=\"skeleton skeleton-repo-branch\"></div>\r\n                </div>\r\n            `,\r\n\r\n            // Commit item skeleton\r\n            commitItem: `\r\n                <div class=\"skeleton-commit-item\">\r\n                    <div class=\"skeleton skeleton-commit-avatar\"></div>\r\n                    <div class=\"skeleton-commit-content\">\r\n                        <div class=\"skeleton skeleton-commit-author\"></div>\r\n                        <div class=\"skeleton skeleton-commit-message\"></div>\r\n                    </div>\r\n                </div>\r\n            `,\r\n\r\n            // Branch item skeleton\r\n            branchItem: `\r\n                <div class=\"skeleton-branch-item\">\r\n                    <div class=\"skeleton skeleton-branch-icon\"></div>\r\n                    <div class=\"skeleton skeleton-branch-name\"></div>\r\n                </div>\r\n            `,\r\n\r\n            // Info grid skeleton\r\n            infoGrid: `\r\n                <div class=\"skeleton-info-grid\">\r\n                    <div class=\"skeleton-info-item\">\r\n                        <div class=\"skeleton skeleton-info-label\"></div>\r\n                        <div class=\"skeleton skeleton-info-value\"></div>\r\n                    </div>\r\n                    <div class=\"skeleton-info-item\">\r\n                        <div class=\"skeleton skeleton-info-label\"></div>\r\n                        <div class=\"skeleton skeleton-info-value\"></div>\r\n                    </div>\r\n                    <div class=\"skeleton-info-item\">\r\n                        <div class=\"skeleton skeleton-info-label\"></div>\r\n                        <div class=\"skeleton skeleton-info-value\"></div>\r\n                    </div>\r\n                    <div class=\"skeleton-info-item\">\r\n                        <div class=\"skeleton skeleton-info-label\"></div>\r\n                        <div class=\"skeleton skeleton-info-value\"></div>\r\n                    </div>\r\n                </div>\r\n            `,\r\n\r\n            // Overview cards skeleton\r\n            overviewGrid: `\r\n                <div class=\"skeleton-overview-grid\">\r\n                    <div class=\"skeleton-overview-card\">\r\n                        <div class=\"skeleton-overview-header\">\r\n                            <div class=\"skeleton skeleton-overview-title\"></div>\r\n                            <div class=\"skeleton skeleton-overview-indicator\"></div>\r\n                        </div>\r\n                        <div class=\"skeleton-overview-content\">\r\n                            <div class=\"skeleton skeleton-text\"></div>\r\n                            <div class=\"skeleton skeleton-text\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"skeleton-overview-card\">\r\n                        <div class=\"skeleton-overview-header\">\r\n                            <div class=\"skeleton skeleton-overview-title\"></div>\r\n                            <div class=\"skeleton skeleton-overview-indicator\"></div>\r\n                        </div>\r\n                        <div class=\"skeleton-overview-content\">\r\n                            <div class=\"skeleton skeleton-text\"></div>\r\n                            <div class=\"skeleton skeleton-text\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"skeleton-overview-card\">\r\n                        <div class=\"skeleton-overview-header\">\r\n                            <div class=\"skeleton skeleton-overview-title\"></div>\r\n                            <div class=\"skeleton skeleton-overview-indicator\"></div>\r\n                        </div>\r\n                        <div class=\"skeleton-overview-content\">\r\n                            <div class=\"skeleton skeleton-text\"></div>\r\n                            <div class=\"skeleton skeleton-text\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"skeleton-overview-card\">\r\n                        <div class=\"skeleton-overview-header\">\r\n                            <div class=\"skeleton skeleton-overview-title\"></div>\r\n                            <div class=\"skeleton skeleton-overview-indicator\"></div>\r\n                        </div>\r\n                        <div class=\"skeleton-overview-content\">\r\n                            <div class=\"skeleton skeleton-text\"></div>\r\n                            <div class=\"skeleton skeleton-text\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `,\r\n\r\n            // Directory item skeleton\r\n            directoryItem: `\r\n                <div class=\"skeleton-directory-item\">\r\n                    <div class=\"skeleton skeleton-directory-icon\"></div>\r\n                    <div class=\"skeleton-directory-info\">\r\n                        <div class=\"skeleton skeleton-directory-name\"></div>\r\n                        <div class=\"skeleton skeleton-directory-permissions\"></div>\r\n                    </div>\r\n                </div>\r\n            `,\r\n\r\n            // Welcome screen skeleton\r\n            welcome: `\r\n                <div class=\"skeleton-welcome\">\r\n                    <div class=\"skeleton-welcome-content\">\r\n                        <div class=\"skeleton skeleton-welcome-icon\"></div>\r\n                        <div class=\"skeleton skeleton-welcome-title\"></div>\r\n                        <div class=\"skeleton skeleton-welcome-description\"></div>\r\n                        <div class=\"skeleton-welcome-actions\">\r\n                            <div class=\"skeleton skeleton-welcome-button\"></div>\r\n                            <div class=\"skeleton skeleton-welcome-button\"></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `,\r\n\r\n            // Tab content skeleton\r\n            tabContent: `\r\n                <div class=\"skeleton-tab-content\">\r\n                    <div class=\"skeleton-tab-header\">\r\n                        <div class=\"skeleton skeleton-tab-title\"></div>\r\n                        <div class=\"skeleton-tab-actions\">\r\n                            <div class=\"skeleton skeleton-tab-action\"></div>\r\n                            <div class=\"skeleton skeleton-tab-action\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"skeleton-list\">\r\n                        <div class=\"skeleton-list-item\">\r\n                            <div class=\"skeleton skeleton-list-icon\"></div>\r\n                            <div class=\"skeleton-list-content\">\r\n                                <div class=\"skeleton skeleton-list-title\"></div>\r\n                                <div class=\"skeleton skeleton-list-subtitle\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"skeleton-list-item\">\r\n                            <div class=\"skeleton skeleton-list-icon\"></div>\r\n                            <div class=\"skeleton-list-content\">\r\n                                <div class=\"skeleton skeleton-list-title\"></div>\r\n                                <div class=\"skeleton skeleton-list-subtitle\"></div>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"skeleton-list-item\">\r\n                            <div class=\"skeleton skeleton-list-icon\"></div>\r\n                            <div class=\"skeleton-list-content\">\r\n                                <div class=\"skeleton skeleton-list-title\"></div>\r\n                                <div class=\"skeleton skeleton-list-subtitle\"></div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            `,\r\n\r\n            // Progress overlay skeleton\r\n            progressOverlay: `\r\n                <div class=\"skeleton-progress-overlay\">\r\n                    <div class=\"skeleton-progress-content\">\r\n                        <div class=\"skeleton skeleton-progress-spinner\"></div>\r\n                        <div class=\"skeleton skeleton-progress-text\"></div>\r\n                    </div>\r\n                </div>\r\n            `,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Show skeleton loading for repository list\r\n     */\r\n    showRepoSkeleton() {\r\n        const repoList = document.querySelector(\".git-repo-list\");\r\n        if (repoList) {\r\n            repoList.classList.add(\"skeleton-loading-repos\");\r\n            const skeletonHTML = this.skeletonTemplates.repoCard.repeat(5);\r\n            repoList.innerHTML = skeletonHTML;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide skeleton loading for repository list\r\n     */\r\n    hideRepoSkeleton() {\r\n        const repoList = document.querySelector(\".git-repo-list\");\r\n        if (repoList) {\r\n            repoList.classList.remove(\"skeleton-loading-repos\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show skeleton loading for commits\r\n     */\r\n    showCommitsSkeleton() {\r\n        const commitsList = document.querySelector(\".commits-list\");\r\n        if (commitsList) {\r\n            commitsList.classList.add(\"skeleton-loading-commits\");\r\n            const skeletonHTML = this.skeletonTemplates.commitItem.repeat(3);\r\n            commitsList.innerHTML = skeletonHTML;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide skeleton loading for commits\r\n     */\r\n    hideCommitsSkeleton() {\r\n        const commitsList = document.querySelector(\".commits-list\");\r\n        if (commitsList) {\r\n            commitsList.classList.remove(\"skeleton-loading-commits\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show skeleton loading for branches\r\n     */\r\n    showBranchesSkeleton() {\r\n        const branchesList = document.querySelector(\".branches-list\");\r\n        if (branchesList) {\r\n            branchesList.classList.add(\"skeleton-loading-branches\");\r\n            const skeletonHTML = this.skeletonTemplates.branchItem.repeat(4);\r\n            branchesList.innerHTML = skeletonHTML;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide skeleton loading for branches\r\n     */\r\n    hideBranchesSkeleton() {\r\n        const branchesList = document.querySelector(\".branches-list\");\r\n        if (branchesList) {\r\n            branchesList.classList.remove(\"skeleton-loading-branches\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show skeleton loading for repository details\r\n     */\r\n    showRepoDetailsSkeleton() {\r\n        const repoDetails = document.querySelector(\".git-repo-details\");\r\n        if (!repoDetails) {\r\n            return;\r\n        }\r\n\r\n        // Never replace innerHTML for containers that include persistent IDs.\r\n        // Instead, toggle lightweight skeleton classes that do not remove children.\r\n        const infoGrid = repoDetails.querySelector(\".repo-info-grid\");\r\n        if (infoGrid) {\r\n            infoGrid.classList.add(\"skeleton-loading-info-grid\");\r\n        }\r\n\r\n        const overviewGrid = repoDetails.querySelector(\".repo-overview-grid\");\r\n        if (overviewGrid) {\r\n            overviewGrid.classList.add(\"skeleton-loading-overview-grid\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide skeleton loading for repository details\r\n     */\r\n    hideRepoDetailsSkeleton() {\r\n        const repoDetails = document.querySelector(\".git-repo-details\");\r\n        if (!repoDetails) {\r\n            return;\r\n        }\r\n        const infoGrid = repoDetails.querySelector(\".repo-info-grid\");\r\n        if (infoGrid) {\r\n            infoGrid.classList.remove(\"skeleton-loading-info-grid\");\r\n        }\r\n        const overviewGrid = repoDetails.querySelector(\".repo-overview-grid\");\r\n        if (overviewGrid) {\r\n            overviewGrid.classList.remove(\"skeleton-loading-overview-grid\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show skeleton loading for directory browser\r\n     */\r\n    showDirectorySkeleton() {\r\n        const directoryList = document.querySelector(\".directory-list\");\r\n        if (directoryList) {\r\n            directoryList.classList.add(\"skeleton-loading-directories\");\r\n            const skeletonHTML = this.skeletonTemplates.directoryItem.repeat(6);\r\n            directoryList.innerHTML = skeletonHTML;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide skeleton loading for directory browser\r\n     */\r\n    hideDirectorySkeleton() {\r\n        const directoryList = document.querySelector(\".directory-list\");\r\n        if (directoryList) {\r\n            directoryList.classList.remove(\"skeleton-loading-directories\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show skeleton loading for welcome screen\r\n     */\r\n    showWelcomeSkeleton() {\r\n        const welcomeScreen = document.querySelector(\".git-repo-welcome\");\r\n        if (welcomeScreen) {\r\n            welcomeScreen.innerHTML = this.skeletonTemplates.welcome;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show skeleton loading for tab content\r\n     */\r\n    showTabSkeleton() {\r\n        const tabContent = document.querySelector(\".git-repo-content\");\r\n        if (tabContent) {\r\n            tabContent.innerHTML = this.skeletonTemplates.tabContent;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show skeleton progress overlay\r\n     */\r\n    showProgressSkeleton(message = WPGitManagerGlobal.translations.processing) {\r\n        let overlay = document.getElementById(\"git-progress-overlay\");\r\n        if (!overlay) {\r\n            overlay = document.createElement(\"div\");\r\n            overlay.id = \"git-progress-overlay\";\r\n            document.body.appendChild(overlay);\r\n        }\r\n\r\n        overlay.innerHTML = `\r\n            <div class=\"skeleton-progress-content\">\r\n                <div class=\"skeleton skeleton-progress-spinner\"></div>\r\n                <div class=\"skeleton skeleton-progress-text\"></div>\r\n            </div>\r\n        `;\r\n        overlay.style.display = \"flex\";\r\n\r\n        // Update message if provided\r\n        const textElement = overlay.querySelector(\".skeleton-progress-text\");\r\n        if (textElement) {\r\n            textElement.textContent = message;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide skeleton progress overlay\r\n     */\r\n    hideProgressSkeleton() {\r\n        const overlay = document.getElementById(\"git-progress-overlay\");\r\n        if (overlay) {\r\n            overlay.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show skeleton loading for any container\r\n     */\r\n    showSkeleton(container, type, count = 1) {\r\n        if (!container) {\r\n            return;\r\n        }\r\n\r\n        const template = this.skeletonTemplates[type];\r\n        if (template) {\r\n            container.innerHTML = template.repeat(count);\r\n            container.classList.add(`skeleton-loading-${type}`);\r\n        } else {\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide skeleton loading for any container\r\n     */\r\n    hideSkeleton(container, type) {\r\n        if (!container) {\r\n            return;\r\n        }\r\n\r\n        container.classList.remove(`skeleton-loading-${type}`);\r\n        // Also remove any skeleton elements that might be left\r\n        const skeletonElements = container.querySelectorAll(\".skeleton\");\r\n        skeletonElements.forEach((el) => el.remove());\r\n    }\r\n\r\n    /**\r\n     * Hide all skeleton loading states\r\n     */\r\n    hideAllSkeletons() {\r\n        // Hide repository skeleton\r\n        this.hideRepoSkeleton();\r\n\r\n        // Hide commits skeleton\r\n        this.hideCommitsSkeleton();\r\n\r\n        // Hide branches skeleton\r\n        this.hideBranchesSkeleton();\r\n\r\n        // Hide repository details skeleton\r\n        this.hideRepoDetailsSkeleton();\r\n\r\n        // Hide directory skeleton\r\n        this.hideDirectorySkeleton();\r\n\r\n        // Hide progress skeleton\r\n        this.hideProgressSkeleton();\r\n\r\n        // Remove any remaining skeleton elements, but be careful not to remove actual content\r\n        document.querySelectorAll(\".skeleton\").forEach((el) => {\r\n            // Only remove skeleton elements that are not part of actual content\r\n            if (\r\n                el.classList.contains(\"skeleton\") &&\r\n                !el.closest(\".repo-info-item\") &&\r\n                !el.closest(\".repo-status-content\") &&\r\n                !el.closest(\".repo-branch-content\") &&\r\n                !el.closest(\".repo-changes-content\") &&\r\n                !el.closest(\".repo-commit-content\")\r\n            ) {\r\n                el.remove();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create custom skeleton element\r\n     */\r\n    createSkeletonElement(className, width = \"100%\", height = \"1em\") {\r\n        const element = document.createElement(\"div\");\r\n        element.className = `skeleton ${className}`;\r\n        element.style.width = width;\r\n        element.style.height = height;\r\n    }\r\n}\r\n"],"names":[],"sourceRoot":""}